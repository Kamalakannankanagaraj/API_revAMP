{
	"info": {
		"_postman_id": "b1401c90-ad1a-4830-80af-a5eb02e666f3",
		"name": "revAMPAPICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26031806",
		"_collection_link": "https://eproductsteam.postman.co/workspace/Domestic-Workspace~68dc3baf-93b6-4828-84dc-3acc3be55576/collection/25705399-b1401c90-ad1a-4830-80af-a5eb02e666f3?action=share&source=collection_link&creator=26031806"
	},
	"item": [
		{
			"name": "revAMP-GET USER ROLE BY SITE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Site",
							"item": [
								{
									"name": "Normal Site",
									"item": [
										{
											"name": "User- kkanagaraj@jcrinc.com and  Site- Katalon Test site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
															"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
															"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
															"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
															"// Note could be different from Dev to Main due to data changes. \r",
															"// User ID - 85 Darlene Luttman \r",
															"//1509\r",
															"\r",
															"\r",
															"// userID = 528714\r",
															"// agatha@test.ing\r",
															"\r",
															"// userid 337506\r",
															"\r",
															"\r",
															"// DB stored proc:\r",
															"// DECLARE @SiteId int = 760 \r",
															"// DECLARE @UserId int = 85\r",
															"\r",
															"// SELECT \r",
															"\r",
															"// RT.RoleTypeID AS RoleTypeId,\r",
															"// RT.RoleTypeName AS RoleTypeName,\r",
															"// RT.SortOrder AS SortOrder \r",
															"\r",
															"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
															"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
															"\r",
															"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify Get User Role By Site for Normal Site -\" +  jsonData.payload[i].roleID + \" and \" + jsonData.payload[i].roleName +  \" ///does not display null /// \", function () {\r",
															"console.log(jsonData.payload[i].roleID)\r",
															"console.log(jsonData.payload[i].roleName)\r",
															"pm.expect(jsonData.payload[i].roleID).to.exist\r",
															"pm.expect(jsonData.payload[i].roleID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].roleName).to.exist\r",
															"pm.expect(jsonData.payload[i].roleName).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"pm.test(\"Get User Role By Site for Normal Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Get User Role By Site for Normal Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get User Role By Site for Normal Site -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUserRolesBySite?siteid={{Normal_SiteID}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUserRolesBySite"
													],
													"query": [
														{
															"key": "siteid",
															"value": "{{Normal_SiteID}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "MockSurveySite",
									"item": [
										{
											"name": "User- kkanagaraj@jcrinc.com and Site- API Automation site 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
															"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
															"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
															"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
															"// Note could be different from Dev to Main due to data changes. \r",
															"// User ID - 85 Darlene Luttman \r",
															"//1509\r",
															"\r",
															"\r",
															"// userID = 528714\r",
															"// agatha@test.ing\r",
															"\r",
															"// userid 337506\r",
															"\r",
															"\r",
															"// DB stored proc:\r",
															"// DECLARE @SiteId int = 760 \r",
															"// DECLARE @UserId int = 85\r",
															"\r",
															"// SELECT \r",
															"\r",
															"// RT.RoleTypeID AS RoleTypeId,\r",
															"// RT.RoleTypeName AS RoleTypeName,\r",
															"// RT.SortOrder AS SortOrder \r",
															"\r",
															"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
															"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
															"\r",
															"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
															"\r",
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify Get User Role By Site for Mock survey Site - \" +  jsonData.payload[i].roleID + \" and \" + jsonData.payload[i].roleName +  \" ///does not display null /// \", function () {\r",
															"console.log(jsonData.payload[i].roleID)\r",
															"console.log(jsonData.payload[i].roleName)\r",
															"pm.expect(jsonData.payload[i].roleID).to.exist\r",
															"pm.expect(jsonData.payload[i].roleID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].roleName).to.exist\r",
															"pm.expect(jsonData.payload[i].roleName).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUserRolesBySite?siteid={{MockSurvey_SiteID}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUserRolesBySite"
													],
													"query": [
														{
															"key": "siteid",
															"value": "{{MockSurvey_SiteID}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify 403 Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Get User Role By Site for Invalid Site - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site for Invalid Site - success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site for Invalid Site - errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUserRolesBySite?siteid=99999999",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUserRolesBySite"
									],
									"query": [
										{
											"key": "siteid",
											"value": "99999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 400 Header Host not checked --> correct site ID and correct UserID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
											"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
											"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
											"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
											"// Note could be different from Dev to Main due to data changes. \r",
											"// User ID - 85 Darlene Luttman \r",
											"//1509\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// DB stored proc:\r",
											"// DECLARE @SiteId int = 760 \r",
											"// DECLARE @UserId int = 85\r",
											"\r",
											"// SELECT \r",
											"\r",
											"// RT.RoleTypeID AS RoleTypeId,\r",
											"// RT.RoleTypeName AS RoleTypeName,\r",
											"// RT.SortOrder AS SortOrder \r",
											"\r",
											"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
											"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
											"\r",
											"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site -Status message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUserRolesBySite?siteid=41533",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUserRolesBySite"
									],
									"query": [
										{
											"key": "siteid",
											"value": "41533"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 405 - Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
											"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
											"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
											"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
											"// Note could be different from Dev to Main due to data changes. \r",
											"// User ID - 85 Darlene Luttman \r",
											"//1509\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// DB stored proc:\r",
											"// DECLARE @SiteId int = 760 \r",
											"// DECLARE @UserId int = 85\r",
											"\r",
											"// SELECT \r",
											"\r",
											"// RT.RoleTypeID AS RoleTypeId,\r",
											"// RT.RoleTypeName AS RoleTypeName,\r",
											"// RT.SortOrder AS SortOrder \r",
											"\r",
											"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
											"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
											"\r",
											"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site -Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Get User Role By Site -Status message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUserRolesBySite?siteid=33",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUserRolesBySite"
									],
									"query": [
										{
											"key": "siteid",
											"value": "33"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "<img src=\"https://content.pstmn.io/f14c0de1-67c0-4e1a-a0e2-fa066c008fa0/U2NyZWVuc2hvdCAoMTA5MCkucG5n\" alt=\"\">",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-GET USER BY SITE AND ROLE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Program Admin",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds=8%2C9",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "8%2C9"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds=1%2C8%2C9",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "1%2C8%2C9"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Site Manager",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{Normal_SiteID}}&roleIds={{SIM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{Normal_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{SIM}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds={{SIM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{SIM}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{ESTEnabled_SiteID}}&roleIds={{SIM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{ESTEnabled_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{SIM}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Staff Member",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{Normal_SiteID}}&roleIds={{STM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{Normal_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{STM}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds={{STM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{STM}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{ESTEnabled_SiteID}}&roleIds={{STM}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{ESTEnabled_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{STM}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey Reviewer",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds={{MSR}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{MSR}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{ESTEnabled_SiteID}}&roleIds={{MSR}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{ESTEnabled_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{MSR}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey User",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{MockSurvey_SiteID}}&roleIds={{MSU}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{MockSurvey_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{MSU}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"console.log(jsonData.payload.length)\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].userLogonID + \" and \" + jsonData.payload[i].userID +  \" does not display null \", function () {\r",
															"console.log(jsonData.payload[i].userLogonID)\r",
															"console.log(jsonData.payload[i].userID)\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.exist\r",
															"pm.expect(jsonData.payload[i].userLogonID).to.not.be.null\r",
															"pm.expect(jsonData.payload[i].userID).to.exist\r",
															"pm.expect(jsonData.payload[i].userID).to.not.be.null\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{ESTEnabled_SiteID}}&roleIds={{MSU}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetUsersBySiteAndRole"
													],
													"query": [
														{
															"key": "siteId",
															"value": "{{ESTEnabled_SiteID}}"
														},
														{
															"key": "roleIds",
															"value": "{{MSU}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify 403 Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId=0&roleIds=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "roleIds",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 403 Invalid RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId=760&roleIds=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "760"
										},
										{
											"key": "roleIds",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID and RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
											"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
											"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
											"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
											"// Note could be different from Dev to Main due to data changes. \r",
											"// User ID - 85 Darlene Luttman \r",
											"//1509\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// DB stored proc:\r",
											"// DECLARE @SiteId int = 760 \r",
											"// DECLARE @UserId int = 85\r",
											"\r",
											"// SELECT \r",
											"\r",
											"// RT.RoleTypeID AS RoleTypeId,\r",
											"// RT.RoleTypeName AS RoleTypeName,\r",
											"// RT.SortOrder AS SortOrder \r",
											"\r",
											"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
											"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
											"\r",
											"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId=0&roleIds=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "roleIds",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 405 - Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//siteID = 7906 Abrazo Maryvale Campus\tActive\tMock Survey Reviewer\r",
											"//siteID = \t18340\tHospital Systems Corporate Liaisons\tActive\tStaff Member\r",
											"//siteID =  5588\tArizona Spine and Joint Hospital, LLC\tActive\tProgram Administrator\r",
											"//siteID = 1509\tWest Boca Medical Center, Inc.\tActive\tMock Survey User Program Administrator (if user has more than 1 role the most highest will display as the response body.) in this case Mock Survey User. \r",
											"// Note could be different from Dev to Main due to data changes. \r",
											"// User ID - 85 Darlene Luttman \r",
											"//1509\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// DB stored proc:\r",
											"// DECLARE @SiteId int = 760 \r",
											"// DECLARE @UserId int = 85\r",
											"\r",
											"// SELECT \r",
											"\r",
											"// RT.RoleTypeID AS RoleTypeId,\r",
											"// RT.RoleTypeName AS RoleTypeName,\r",
											"// RT.SortOrder AS SortOrder \r",
											"\r",
											"// FROM [dbo].[UserSiteMultiRoleMap] USM\r",
											"// INNER JOIN dbo.RoleType RT ON USM.RoleTypeID = RT.RoleTypeID\r",
											"\r",
											"// WHERE USM.SiteID = @SiteId AND USM.UserID = @UserId\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId=760&roleIds=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "760"
										},
										{
											"key": "roleIds",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "<img src=\"https://content.pstmn.io/f14c0de1-67c0-4e1a-a0e2-fa066c008fa0/U2NyZWVuc2hvdCAoMTA5MCkucG5n\" alt=\"\">",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-USER MENU STATE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetMenuState",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Database - UserMenustate - \r",
											"// this is not related to Portal Page, this will be utilized in the AMP site -- \r",
											"// this is a bug but not in scope --- \r",
											"//Need to talk about this one. - need to be a maintenance -  \r",
											"\r",
											"\r",
											" \r",
											"//Value = 1115\r",
											"//siteID = 54586 - Katalon Test site 1 \r",
											"\r",
											"// No need for this --> &key=SiteID&value=54586\r",
											"// User ID = 359843 sshiekh \r",
											"//if in AMP - site dropdown is changed or any other parameter - it should reflect in the response body after sending the request. \r",
											"\r",
											"// GETMENUSTATE// \r",
											"// Whenever user login AMP - this api will fetch the listed columns from the database\r",
											"// and this is used to store the session variables\r",
											"// Generally any basic values will be taken (for ex siteid, cycleid etc) from the session variables - which in turn comes from the api\r",
											"// SAVEMENUSTATE// and whenever any changes happen in the AMP site - like changing the site, program - will be saved to the database using \"SaveMenuState\" APi - which I have removed it temporarily as we do not have the scope immediatley\r",
											"\r",
											"\r",
											"    var jsonData = pm.response.json();\r",
											"   \r",
											"pm.test(\"Verify for userMenuState count should be 15\", function () {\r",
											" console.log(jsonData.payload)\r",
											"\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"var PayloadCount  = Object.keys(jsonData.payload).length;\r",
											"\r",
											"console.log(JsonCount)\r",
											"console.log(PayloadCount)\r",
											"\r",
											" pm.expect(PayloadCount).to.eql(15);\r",
											" pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											" console.log(jsonData.errors)\r",
											"console.log(jsonData.payload.userID)\r",
											"\r",
											"    pm.test(\"Verify User--\" +  jsonData.payload.firstName + \" and UserID --\" +jsonData.payload.userID +\" ///does not display null /// \", function () {\r",
											"\r",
											"console.log(jsonData.payload.siteID)\r",
											"\r",
											"pm.expect(jsonData.payload.userID).to.exist\r",
											"pm.expect(jsonData.payload.userID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.siteID).to.exist\r",
											"pm.expect(jsonData.payload.siteID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.userRoleID).to.exist\r",
											"pm.expect(jsonData.payload.userRoleID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.programID).to.exist\r",
											"pm.expect(jsonData.payload.programID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.certificationItemID).to.exist\r",
											"pm.expect(jsonData.payload.certificationItemID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.isCurrentCycle).to.exist\r",
											"pm.expect(jsonData.payload.isCurrentCycle).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.accessToCMS).to.exist\r",
											"pm.expect(jsonData.payload.accessToCMS).to.not.be.null\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.accessToMockSurvey).to.exist\r",
											"pm.expect(jsonData.payload.accessToMockSurvey).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.firstName).to.exist\r",
											"pm.expect(jsonData.payload.firstName).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.lastName).to.exist\r",
											"pm.expect(jsonData.payload.lastName).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.userLogonID).to.exist\r",
											"pm.expect(jsonData.payload.userLogonID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload.programGroupTypeID).to.exist\r",
											"pm.expect(jsonData.payload.programGroupTypeID).to.not.be.null\r",
											"})\r",
											"\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenuState",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenuState"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify 400 Header Host not checked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Database - UserMenustate - \r",
											"// this is not related to Portal Page, this will be utilized in the AMP site -- \r",
											"// this is a bug but not in scope --- \r",
											"//Need to talk about this one. - need to be a maintenance -  \r",
											"\r",
											"\r",
											"//User iD = 56 Kevin \r",
											"//Value = 1115\r",
											"//siteID = 54586 - Katalon Test site 1 \r",
											"// User ID = 337506\t- pa@katsite.org\r",
											"// No need for this --> &key=SiteID&value=54586\r",
											"// User ID = 359843 sshiekh \r",
											"//if in AMP - site dropdown is changed or any other parameter - it should reflect in the response body after sending the request. \r",
											"\r",
											"// GETMENUSTATE// \r",
											"// Whenever user login AMP - this api will fetch the listed columns from the database\r",
											"// and this is used to store the session variables\r",
											"// Generally any basic values will be taken (for ex siteid, cycleid etc) from the session variables - which in turn comes from the api\r",
											"// SAVEMENUSTATE// and whenever any changes happen in the AMP site - like changing the site, program - will be saved to the database using \"SaveMenuState\" APi - which I have removed it temporarily as we do not have the scope immediatley\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400 BAD RESULT\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenuState",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenuState"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 405 Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Database - UserMenustate - \r",
											"// this is not related to Portal Page, this will be utilized in the AMP site -- \r",
											"// this is a bug but not in scope --- \r",
											"//Need to talk about this one. - need to be a maintenance -  \r",
											"\r",
											"\r",
											"//User iD = 56 Kevin \r",
											"//Value = 1115\r",
											"//siteID = 54586 - Katalon Test site 1 \r",
											"// User ID = 337506\t- pa@katsite.org\r",
											"// No need for this --> &key=SiteID&value=54586\r",
											"// User ID = 359843 sshiekh \r",
											"//if in AMP - site dropdown is changed or any other parameter - it should reflect in the response body after sending the request. \r",
											"\r",
											"// GETMENUSTATE// \r",
											"// Whenever user login AMP - this api will fetch the listed columns from the database\r",
											"// and this is used to store the session variables\r",
											"// Generally any basic values will be taken (for ex siteid, cycleid etc) from the session variables - which in turn comes from the api\r",
											"// SAVEMENUSTATE// and whenever any changes happen in the AMP site - like changing the site, program - will be saved to the database using \"SaveMenuState\" APi - which I have removed it temporarily as we do not have the scope immediatley\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 405 METHOD NOT ALLOWED\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenuState",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenuState"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET VIEW BY FILTER DATA",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Normal Site",
							"item": [
								{
									"name": "Normal Site - Program Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{PA}},\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Normal Site - Site Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All User Assignments');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15th row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 16th row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 17th row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[12].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[12].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[13].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[13].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[14].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[14].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[15].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[15].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[16].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[16].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[17].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[17].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[18].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[18].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[19].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[19].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[20].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[20].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[21].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[21].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[22].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[22].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[23].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[23].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[24].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[24].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[25].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[25].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[26].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[26].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[27].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[27].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[28].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[28].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[29].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[29].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"// pm.test(\"Verify 3rd row \" + jsonData[30].epFilterDisplayText  + \" displays\", function () {\r",
													"//     pm.expect(jsonData[30].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"// });\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{SIM}},\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 23,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Normal Site - Staff Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function () {\r",
													"    console.log(jsonData.errors)\r",
													"    pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													"    console.log(jsonData)\r",
													"    var JsonCount = Object.keys(jsonData).length;\r",
													"    console.log(JsonCount)\r",
													"    pm.expect(JsonCount).to.eql(3);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function () {\r",
													"    console.log(jsonData.success)\r",
													"    pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('EPs Assigned to me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('EPs Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14th row \" + jsonData.payload[13].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15th row \" + jsonData.payload[14].epFilterDisplayText + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload.reduce(function (arr, b) {\r",
													"        if (!arr.includes(b.epFilterDisplayText)) {\r",
													"            arr.push(b.epFilterDisplayText);\r",
													"        }\r",
													"        return arr;\r",
													"    }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{STM}},\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EST Enabled Site",
							"item": [
								{
									"name": "EST Enabled Site- Program Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13rd row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14rd row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{PA}},\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 23,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "EST Enabled Site- Site Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13rd row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14rd row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{SIM}}   ,\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 23,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "EST Enabled Site- Staff Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('EPs Assigned to me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13rd row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('EPs Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14rd row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{STM}},\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 23,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mock Survey Site",
							"item": [
								{
									"name": "Mock Survey Site - program Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 17th row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 18th row \" + jsonData.payload[17].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[17].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"pm.test(\"Verify 19th row \" + jsonData.payload[18].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[18].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{PA}},\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 23,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mock Survey Site  -Site Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13rd row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14rd row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{SIM}},\r\n  \"siteID\": 54587,\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mock Survey Site  - Staff Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"           \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('EPs Assigned to me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14th row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('EPs Not Scored');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"pm.test(\"Verify 17rd row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{STM}},\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mock Survey Site -Mock Survey User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{MSU}},\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mock Survey Site  - Mock Survey Reviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": {{MSR}},\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"isESTEnabled\": false,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Mock Survey Site With EST Enabled",
							"item": [
								{
									"name": "Get View By Filter Data- program Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14th row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 17rd row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": 1,\r\n  \"siteID\": 33,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 2,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get View By Filter Data -Site Manager",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14th row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('No Preliminary Scorer');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 17rd row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": 2,\r\n  \"siteID\": 33,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 2,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get View By Filter Data - Staff Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('Final - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Preliminary - Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Preliminary - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Preliminary - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 8th row \" + jsonData.payload[7].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Not Scored');\r",
													"});\r",
													"pm.test(\"Verify 9th row \" + jsonData.payload[8].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 10th row \" + jsonData.payload[9].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 11th row \" + jsonData.payload[10].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify 12th row \" + jsonData.payload[11].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 13th row \" + jsonData.payload[12].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 14th row \" + jsonData.payload[13].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('EPs Assigned to me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 15rd row \" + jsonData.payload[14].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('EPs Not Scored');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 16rd row \" + jsonData.payload[15].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 17rd row \" + jsonData.payload[16].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[16].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 18rd row \" + jsonData.payload[17].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[17].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": 4,\r\n  \"siteID\": 33,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 23,\r\n  \"isCorporate\": true,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get View By Filter Data -Mock Survey User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": 9,\r\n  \"siteID\": 33,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get View By Filter Data-Mock Survey Reviewer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"pm.test(\"Verify 1st row \" + jsonData.payload[0].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Standards');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 2nd row \" + jsonData.payload[1].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Satisfactory');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 3rd row \" + jsonData.payload[2].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Insufficient');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 4th row \" + jsonData.payload[3].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql('JCR Mock Survey');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 5th row \" + jsonData.payload[4].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('All Open Tasks');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 6th row \" + jsonData.payload[5].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Opened Tasks Assigned to Me');\r",
													"});\r",
													"\r",
													"pm.test(\"Verify 7th row \" + jsonData.payload[6].epFilterDisplayText  + \" displays\", function () {\r",
													"    pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('- Opened Tasks Assigned by Me');\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate epFilterDisplayText\", function() {\r",
													"  var jsonData = pm.response.json();\r",
													"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
													"    if (!arr.includes(b.epFilterDisplayText)) {\r",
													"      arr.push(b.epFilterDisplayText);\r",
													"    }\r",
													"    return arr;\r",
													"  }, []).length).to.eql(jsonData.payload.length);\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userRoleID\": 9,\r\n  \"siteID\": 33,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Filter",
												"GetViewByFilterData"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify - Without Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetViewByFilterData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleID\": 9,\r\n  \"siteID\": 760,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 0,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterDat",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetViewByFilterDat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userRoleID\": 9,\r\n  \"siteID\": 0,\r\n  \"isESTEnabled\": true,\r\n  \"programID\": 2,\r\n  \"isCorporate\": false,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetViewByFilterData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetViewByFilterData"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-GET CHAPTERS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Get Chapter Based on Program ID = 2 - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 2 - Hospital -- \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 23 - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 23 - Ambulatory -- \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 23,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 6294 - Assisted Living Community",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 6294 - Assisted Living Community --\" +  jsonData.payload.chapters[i].chapterText + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \"are  displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 6294,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 6- Behavior Health and Human Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 6- Behavior Health and Human Services -- \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 6,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 69- Critical Access Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 69- Critical Access Hospital --  \" +  jsonData.payload.chapters[i].chapterText + \" and \" + jsonData.payload.chapters[i].chapterCode +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 22- Home Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 22- Home Care -- \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \"are displayed\", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 22,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 21- Laboratory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 21- Laboratory \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 21,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 5- Nursing Care Center",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 5- Nursing Care Center\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 5,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 68- Office Based Surgery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"// data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 68- Office Based Surgery \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 68,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Get Chapter Based on Program ID = 67 Disease-Specific Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 67 Disease-Specific Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \"  are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 67,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 3570- Comprehensive Cardiac Center",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 3570- Comprehensive Cardiac Center\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 3570,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 1341- Health Care Staffing Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 1341- Health Care Staffing Services\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 1341,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 3485- Integrated Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 3485- Integrated Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are display  \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 3485,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 6326- Maternal Levels of Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 6326- Maternal Levels of Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed  \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 6326,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 3572- Medication Compounding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 3572- Medication Compounding\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed  \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 3572,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 2183- Palliative Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 2183- Palliative Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed  \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2183,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 3442- Patient Blood Management",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 3442- Patient Blood Management\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 3442,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 3470- Perinatal Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 3470- Perinatal Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \"are displayed  \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 3470,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Advance Disease",
							"item": [
								{
									"name": "Get Chapter Based on Program ID = 67- Acute Heart Attack Ready",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 67- Acute Heart Attack Ready \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 67,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 1346-  Ventricular Assist Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 1346-  Ventricular Assist Device \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 1346,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Chapter Based on Program ID = 1345-  Lung Volume Reduction Surgery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 1345-  Lung Volume Reduction Surgery \" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed \", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 1345,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Verification",
							"item": [
								{
									"name": "Get Chapter Based on Program ID = 6326- Maternal Levels of Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for(i=0;i<jsonData.payload.chapters.length;i++){\r",
													"    pm.test(\"Verify Get Chapter Based on Program ID = 6326- Maternal Levels of Care\" +  jsonData.payload.chapters[i].chapterCode + \" and \" + jsonData.payload.chapters[i].chapterTextName +  \" are displayed\", function () {\r",
													"console.log(jsonData.payload.chapters[i].chapterText)\r",
													"console.log(jsonData.payload.chapters[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.chapters[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(i=0;i<jsonData.payload.tjcManuals.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.tjcManuals[i].chapterText + \" and \" + jsonData.payload.tjcManuals[i].chapterTextName +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterText)\r",
													"console.log(jsonData.payload.tjcManuals[i].chapterTextName)\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterText).to.not.be.null\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.exist\r",
													"pm.expect(jsonData.payload.tjcManuals[i].chapterTextName).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 6326,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetChapters"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Get Chapter Based on Program ID  - Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"chapters should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload.chapters).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"tjcManuals should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload.tjcManuals).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": 15320,\r\n  \"hcoid\": 337843,\r\n  \"programID\": 0,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Chapter Based on Program ID  - Invalid hcoid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"chapters should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload.chapters).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"tjcManuals should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload.tjcManuals).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": 15320,\r\n  \"hcoid\": 0,\r\n  \"programID\": 0,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method Get Chapter Based on Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": 15320,\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 13,\r\n  \"standardEffBeginDate\": \"07/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"userID\": 0,\r\n  \"isSiteESTEnable\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Body Get Chapter Based on Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapters",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapters"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-GET STANDARDS BY CHAPTERS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation Hospital ProgramID=2",
							"item": [
								{
									"name": "Verify all APR ChapterID = 23 Standards display for Agatha Raisins and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"//console.log(Object.keys(jsonData.payload).length)\r",
													"console.log(jsonData.payload)\r",
													" //console.log(jsonData.payload[\"13360\"][0].standardID);\r",
													" //console.log(jsonData.payload[\"13360\"].length);\r",
													"console.log(jsonData.payload[\"13361\"][0].standardID)\r",
													"\r",
													"console.log(jsonData.payload[\"13361\"].length)\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"data = [\"13360\",\"13361\",\"13362\",\"13363\", \"13376\", \"13365\", \"13366\", \"13367\", \"13368\", \"13369\", \"13370\", \"13371\", \"14227\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// pm.test(\"Verify \" +  jsonData[13365][0].standardLabel + \" and \" + jsonData[13365][0].standardText +  \" does not display null \", function () {\r",
													"//     pm.expect(jsonData[13365][0].standardLabel).to.exist\r",
													"//     pm.expect(jsonData[13365][0].standardLabel).to.not.be.null\r",
													"//     console.log(jsonData[13365][0].standardLabel)\r",
													"//            pm.expect(jsonData[13365][0].standardText).to.exist\r",
													"//     pm.expect(jsonData[13365][0].standardText).to.not.be.null\r",
													"//     console.log(jsonData[13365][0].standardText)\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all EC ChapterID = 54 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13405\",\"13380\",\"13381\",\"13382\", \"13383\", \"13385\", \"13386\", \"13388\", \"13389\", \"13390\", \"16512\", \"13391\", \"13392\",\"13393\",\"13394\",\"13395\", \"13396\", \"13421\", \"13402\", \"13403\",\"13404\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 54,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all EM ChapterID = 47 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"16562\",\"16597\",\"16596\",\"16595\", \"16594\", \"16593\", \"16592\", \"16591\", \"16590\", \"16598\", \"16589\", \"16588\", \"16599\",\"16587\",\"16600\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 47,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all HR ChapterID = 55 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13348\",\"13349\",\"13353\",\"13356\", \"13358\", \"13359\", \"13355\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 55,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all IC ChapterID = 52 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13320\",\"13332\",\"13321\",\"13322\", \"13335\", \"13331\", \"13323\", \"13327\", \"13328\", \"13329\", \"16456\", \"13330\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 52,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all IM ChapterID = 56 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13333\",\"13334\",\"13340\",\"13336\", \"13337\", \"13338\", \"13341\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 56,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all LD ChapterID = 7 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13573\",\"13574\",\"13575\",\"13576\", \"13577\", \"13578\", \"13424\", \"13580\", \"13582\", \"13585\", \"13586\", \"13587\",\"13588\",\"13589\", \"14517\", \"14518\", \"14519\", \"14520\", \"13590\", \"13627\", \"13634\", \"14237\", \"13635\",\"14521\",\"13626\",\"13622\",\"13423\",\"13425\",\"13625\",\"13624\",\"13629\",\"13623\", \"14470\"];\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all LS ChapterID = 44 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13384\",\"13387\",\"13521\",\"13522\", \"13523\", \"13524\", \"13525\", \"13526\", \"13527\", \"13528\", \"13529\", \"13530\",\"13531\",\"13532\", \"13533\", \"13534\", \"13535\", \"13536\", \"16472\", \"16473\", \"16474\", \"16475\", \"16476\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 44,\r\n  \"siteID\":{{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all MM ChapterID = 22 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13397\",\"13419\",\"13688\",\"13398\", \"13399\", \"13400\", \"13401\", \"13406\", \"13407\", \"13408\", \"13409\", \"13410\",\"13411\",\"13413\", \"13414\", \"13415\", \"13416\", \"13420\", \"13418\", \"13422\", \"14398\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 22,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all MS ChapterID = 14 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"14163\",\"13595\",\"13596\",\"13597\", \"13598\", \"13599\", \"13600\", \"13601\", \"13602\", \"13603\", \"13604\", \"13605\",\"13606\",\"13607\", \"13608\", \"13609\", \"13610\", \"13617\", \"13618\", \"13611\", \"13612\", \"13613\", \"13614\",\"13615\",\"13616\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 14,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all NPSG AND UP ChapterID = 43 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13669\",\"13671\",\"13672\",\"13673\", \"14172\", \"14251\", \"13674\", \"13683\", \"13685\", \"13686\", \"13687\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 43,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all NR ChapterID = 15 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13470\",\"13471\",\"13469\",\"13472\", \"13636\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 15,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all PC ChapterID = 57 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13450\",\"13466\",\"13467\",\"13468\", \"13440\", \"13689\", \"13446\", \"13447\", \"13448\", \"13449\", \"13457\", \"13458\",\"13459\",\"13455\", \"13456\", \"13454\", \"13451\", \"13690\", \"16495\", \"14161\", \"13473\", \"13480\",\"13478\",\"13481\",  \"14201\", \"14202\", \"14203\", \"13464\", \"13465\", \"13463\", \"13462\",\"13461\",\"13664\",\"13650\",\"13651\",\"13652\",\"13653\", \"13654\",\"13655\",\"13656\",\"13657\",\"13518\",\"13517\",\"13639\",\"13516\", \"16450\",\"16451\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all PI ChapterID = 58 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13324\",\"16506\",\"16505\",\"16501\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 58,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all RC ChapterID = 51 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13519\",\"13342\",\"13621\",\"13520\", \"13620\", \"13343\", \"13344\", \"13346\", \"13347\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 51,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all RI ChapterID = 53 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13426\",\"13437\",\"13427\",\"13428\", \"13444\", \"13430\", \"14204\", \"13431\", \"13441\", \"13442\", \"13443\", \"13438\",\"13432\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 53,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all TS ChapterID = 49 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13584\",\"13638\",\"13540\",\"13541\", \"13542\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 49,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify all WT ChapterID = 18 Standards display for Agatha Raisin and siteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"data = [\"13510\",\"13511\",\"13512\",\"13513\", \"13514\"];\r",
													"for(i=0;i<data.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[data[i]][0].standardLabel + \" and \" + jsonData.payload[data[i]][0].standardText +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[data[i]][0].standardLabel)\r",
													"console.log(jsonData.payload[data[i]][0].standardText)\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.exist\r",
													"pm.expect(jsonData.payload[data[i]][0].standardText).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": 18,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetStandardsByChapter"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify - Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 18,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify  - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 18,\r\n  \"siteID\": {{siteId}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify  - Invalid Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid ProductType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 18,\r\n  \"siteID\": {{siteId}},\r\n  \"programID\": 2,\r\n  \"productType\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid Chapter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid UserID PRODUCTION DEFECT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 0,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"currentStandardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetStandardsByChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetStandardsByChapter"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-GET EPS BY STANDARD",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "EP Attribute Icons",
							"item": [
								{
									"name": "Get EP Icon's-APR.09.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"errors should be null\", function () {\r",
													"    console.log(jsonData.errors)\r",
													"    pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													"    console.log(jsonData)\r",
													"    var JsonCount = Object.keys(jsonData).length;\r",
													"    console.log(JsonCount)\r",
													"    pm.expect(JsonCount).to.eql(3);\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function () {\r",
													"    console.log(jsonData.success)\r",
													"    pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for (i = 0; i < jsonData.payload.ePs.length; i++) {\r",
													"    pm.test(\"Verify EP Icon's- APR.09.01.01 - patientSafetyFlag should be 1 for EP - \" + jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID + \" and both does not display null \", function () {\r",
													"\r",
													"        console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"        console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"        pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"        pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"        pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"        pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"        pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"        pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"    })\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// Test to check if the response status code is 200\r",
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the success property is true\r",
													"pm.test(\"Success should be true\", function () {\r",
													"    pm.expect(pm.response.json().success).to.be.true;\r",
													"});\r",
													"\r",
													"// Test to check if the payload object exists\r",
													"pm.test(\"Payload object should exist\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.property('payload');\r",
													"});\r",
													"\r",
													"// Test to check if the ePs array exists in the payload\r",
													"pm.test(\"ePs array should exist in the payload\", function () {\r",
													"    pm.expect(pm.response.json().payload).to.have.property('ePs');\r",
													"});\r",
													"\r",
													"// Test to check if each EP in the ePs array has the required properties\r",
													"pm.test(\"Each EP in the ePs array should have the required properties\", function () {\r",
													"    pm.response.json().payload.ePs.forEach(function (ep) {\r",
													"        pm.expect(ep).to.have.property('epTextID');\r",
													"        pm.expect(ep).to.have.property('epid');\r",
													"        pm.expect(ep).to.have.property('epLabel');\r",
													"        pm.expect(ep).to.have.property('epText');\r",
													"        pm.expect(ep).to.have.property('patientSafetyFlag');\r",
													"        pm.expect(ep).to.have.property('iqcpFlag');\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test to check if the patientSafetyFlag is 1 and iqcpFlag is 0 for each EP\r",
													"pm.test(\"patientSafetyFlag should be 1 and iqcpFlag should be 0 for each EP\", function () {\r",
													"    pm.response.json().payload.ePs.forEach(function (ep) {\r",
													"        pm.expect(ep.patientSafetyFlag).to.eql(1);\r",
													"        pm.expect(ep.iqcpFlag).to.eql(0);\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"The response should have a success property and it should be true\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.property('success').and.to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The response should have a payload object\", function () {\r",
													"    pm.expect(pm.response.json()).to.have.property('payload');\r",
													"});\r",
													"\r",
													"pm.test(\"The payload object should have an ePs property that is an array\", function () {\r",
													"    pm.expect(pm.response.json().payload).to.have.property('ePs').that.is.an('array');\r",
													"});\r",
													"\r",
													"pm.test(\"Each EP in the ePs array should have the required properties\", function () {\r",
													"    pm.response.json().payload.ePs.forEach(function (ep) {\r",
													"        pm.expect(ep).to.have.property('epTextID').that.is.a('number');\r",
													"        pm.expect(ep).to.have.property('epid').that.is.a('number');\r",
													"        pm.expect(ep).to.have.property('epLabel').that.is.a('number');\r",
													"        pm.expect(ep).to.have.property('epText').that.is.a('string');\r",
													"        pm.expect(ep).to.have.property('patientSafetyFlag').that.is.a('number');\r",
													"        pm.expect(ep).to.have.property('iqcpFlag').that.is.a('number');\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"The patientSafetyFlag should be 1 and iqcpFlag should be 0 for each EP\", function () {\r",
													"    pm.response.json().payload.ePs.forEach(function (ep) {\r",
													"        pm.expect(ep.patientSafetyFlag).to.eql(1);\r",
													"        pm.expect(ep.iqcpFlag).to.eql(0);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13369,\r\n    \"standardTextID\": 16764,\r\n    \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-APR.09.02.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- APR.09.02.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 2,\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13370,\r\n  \"standardTextID\": 14726,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's- EC.04.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- EC.04.01.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 54,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13402,\r\n  \"standardTextID\": 14837,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-IC.01.03.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- IC.01.03.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 52,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13321,\r\n  \"standardTextID\": 14576,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-LD.03.09.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- LD.03.09.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 7,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 14519,\r\n    \"standardTextID\": 17579,\r\n    \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-LD.02.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- LD.02.01.01- patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 7,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13578,\r\n  \"standardTextID\": 15207,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-MS.09.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- MS.09.01.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 14,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13611,\r\n  \"standardTextID\": 14085,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-PC.03.05.19",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- PC.03.05.19 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 57,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13658,\r\n  \"standardTextID\": 14562,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's-RI.02.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- RI.02.01.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 53,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"isSiteEST\": true,\r\n    \"hcoid\": 337483,\r\n   \"standardID\": 13432,\r\n  \"standardTextID\": 30689\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's- RI.01.05.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- RI.01.05.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 53,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13431,\r\n  \"standardTextID\": 14928,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's- NR.02.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- NR.02.01.01 - patientSafetyFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(1)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(0)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 15,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13469,\r\n  \"standardTextID\": 15036,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's- QSA.02.04.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- QSA.02.04.01 - iqcpFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(0)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(1)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 59,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 21,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 14357,\r\n  \"standardTextID\": 17398,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP Icon's- QSA.10.04.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"       \r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify EP Icon's- QSA.10.04.01 - iqcpFlag should be 1 for EP - \" +  jsonData.payload.ePs[i].epTextID + \" and standardID \" + jsonData.payload.ePs[i].standardID +  \" and both does not display null \", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[i].patientSafetyFlag)\r",
													"     console.log(jsonData.payload.ePs[i].iqcpFlag)\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[i].patientSafetyFlag).to.eql(0)\r",
													"pm.expect(jsonData.payload.ePs[i].iqcpFlag).to.eql(1)\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 59,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 21,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13834,\r\n  \"standardTextID\": 30098,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EPs By Standard",
							"item": [
								{
									"name": "Get EP's-APR.01.02.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// pm.environment.unset(\"UserIds\");\r",
													"// var UserIds = pm.environment.get(\"UserIds\");\r",
													"// // console.log(UserIds.length)\r",
													"\r",
													"\r",
													"// if(UserIds && UserIds.length > 0){\r",
													"// postman.setNextRequest(\"https://eprodservices-dev.devjcrinc.com/standards/api/Standard/GetEPsByStandard?userId={{UserIds}}&productType=1&siteId=15076&programId=2&standardId=13360&standardTextId=14698&standardEffBeginDate=07%2F01%2F2022&currentStandardEffBeginDate=07%2F01%2F2022&serviceProfileTypeId=1&certificationItemId=0&roleId=1&chapterId=23\");\r",
													"// } else {\r",
													"// postman.setNextRequest(null);\r",
													"// }\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// pm.test(\"Verify PDF based on given File Stream ID and Chapter\", function () {\r",
													"//     pm.expect(jsonData).to.eql\r",
													"//    (});\r",
													"\r",
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"   \r",
													"pm.test(\"Verify for EP's for -APR.01.02.01 standard\", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[0].epTextID)\r",
													"     console.log(jsonData.payload.ePs[0].epText)\r",
													"      console.log(jsonData.payload.ePs[0].siteID)\r",
													"       \r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epTextID).to.eql(56464);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epText).to.eql('The hospital meets all requirements for timely submissions of data and information to The Joint Commission.<br/>Note 1: The Joint Commission will impose the following consequence for failure to comply with this APR:<br/>If the hospital consistently fails to meet the requirements for the timely submission of data and information to The Joint Commission, the hospital will be required to undergo an Accreditation with Follow-up Survey. Failure to resolve this issue at the time of the Accreditation with Follow-up Survey may result in an accreditation decision change.<br/>Note 2: The proposed consequences address only compliance with the requirement itself. They do not address the content of the hospital’s submissions to The Joint Commission. For example, if information in a hospital’s electronic application for accreditation (E-App) leads to inaccuracies in the appropriate length of the survey and a longer survey is required, the hospital will incur the additional costs of the longer survey. In addition, if there is evidence that the hospital has intentionally falsified the information submitted to The Joint Commission, the requirement at APR.01.02.01, EP 1 and its consequences will apply.  ');\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Remove policy medical code- pmflag\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.pmflag).does.not.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate setupMenu\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.length).to.eql(1)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.ePs[i].epTextID + \" and \" + jsonData.payload.ePs[i].epText +  \" ///does not display null /// \", function () {\r",
													"console.log(jsonData.payload.ePs[i].epTextID)\r",
													"console.log(jsonData.payload.ePs[i].epText)\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 2,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n   \"standardID\": 13360,\r\n  \"standardTextID\": 14698,\r\n  \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP's-LD.01.01.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"   \r",
													"pm.test(\"Verify for EP's for -LD.01.01.01 standard\", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[0].epTextID)\r",
													"    console.log(jsonData.payload.ePs[0].epText)\r",
													"    console.log(jsonData.payload.ePs[0].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[1].epTextID)\r",
													"    console.log(jsonData.payload.ePs[1].epText)\r",
													"    console.log(jsonData.payload.ePs[1].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[2].epTextID)\r",
													"    console.log(jsonData.payload.ePs[2].epText)\r",
													"    console.log(jsonData.payload.ePs[2].siteID)\r",
													"       \r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epTextID).to.eql(28790);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epText).to.eql('The hospital identifies those responsible for governance.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].siteID).to.eql(54586);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].epTextID).to.eql(28796);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].epText).to.eql('The governing body identifies those responsible for planning, management, and operational activities.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].siteID).to.eql(54586);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].epTextID).to.eql(55819);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].epText).to.eql('The governing body identifies those responsible for the provision of care, treatment, and services.  ');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].siteID).to.eql(54586);\r",
													"});\r",
													"\r",
													"pm.test(\"Remove policy medical code- pmflag\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.pmflag).does.not.exist;\r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate setupMenu\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.length).to.eql(3)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.ePs[i].epTextID + \" and \" + jsonData.payload.ePs[i].epText +  \" ///does not display null /// \", function () {\r",
													"console.log(jsonData.payload.ePs[i].epTextID)\r",
													"console.log(jsonData.payload.ePs[i].epText)\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 7,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13573,\r\n    \"standardTextID\": 15194,\r\n    \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EP's-NR.02.03.01",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"   \r",
													"pm.test(\"Verify for EP's for -LD.01.01.01 standard\", function () {\r",
													"\r",
													"    console.log(jsonData.payload.ePs[0].epTextID)\r",
													"    console.log(jsonData.payload.ePs[0].epText)\r",
													"    console.log(jsonData.payload.ePs[0].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[1].epTextID)\r",
													"    console.log(jsonData.payload.ePs[1].epText)\r",
													"    console.log(jsonData.payload.ePs[1].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[2].epTextID)\r",
													"    console.log(jsonData.payload.ePs[2].epText)\r",
													"    console.log(jsonData.payload.ePs[2].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[3].epTextID)\r",
													"    console.log(jsonData.payload.ePs[3].epText)\r",
													"    console.log(jsonData.payload.ePs[3].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[4].epTextID)\r",
													"    console.log(jsonData.payload.ePs[4].epText)\r",
													"    console.log(jsonData.payload.ePs[4].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[5].epTextID)\r",
													"    console.log(jsonData.payload.ePs[5].epText)\r",
													"    console.log(jsonData.payload.ePs[5].siteID)\r",
													"\r",
													"    console.log(jsonData.payload.ePs[6].epTextID)\r",
													"    console.log(jsonData.payload.ePs[6].epText)\r",
													"    console.log(jsonData.payload.ePs[6].siteID)\r",
													"       \r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epTextID).to.eql(56060);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].epText).to.eql('The nurse executive implements nursing policies, procedures, and standards that describe and guide how the staff provide nursing care, treatment, and services.  ');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[0].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].epTextID).to.eql(32654);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].epText).to.eql('The nurse executive provides access to all nursing policies, procedures, and standards to the nursing staff.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[1].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].epTextID).to.eql(32656);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].epText).to.eql('The nurse executive is responsible for the provision of nursing services 24 hours a day, 7 days a week.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[2].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[3].epTextID).to.eql(32659);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[3].epText).to.eql('The nurse executive or designee exercises final authority over staff who provide nursing care, treatment, and services.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[3].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[4].epTextID).to.eql(53168);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[4].epText).to.eql('A registered nurse provides or supervises the nursing services 24 hours a day, 7 days a week.<br/>Note: For hospitals that use Joint Commission accreditation for deemed status purposes: A registered nurse is immediately available for the provision of care of any patient.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[4].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[5].epTextID).to.eql(32663);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[5].epText).to.eql('For hospitals that use Joint Commission accreditation for deemed status purposes: A registered nurse assigns the nursing care for each patient to other nursing personnel in accordance with the patient’s needs and the qualifications and competence of the nursing staff available.');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[5].siteID).to.eql(15320);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[6].epTextID).to.eql(52003);\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[6].epText).to.eql('For hospitals that use Joint Commission accreditation for deemed status purposes: The hospital has policies and procedures that establish which outpatient departments, if any, are not required to have a registered nurse present. The policies and procedures are as follows:<br/>- Establish criteria that such outpatient departments need to meet, taking into account the types of services delivered, the general level of acuity of patients served by the department, and established standards of practice for the services delivered<br/>- Describe alternative staffing plans<br/>- Approved by the director of nursing<br/>- Reviewed at least once every three years');\r",
													"\r",
													"pm.expect(jsonData.payload.ePs[6].siteID).to.eql(15320);\r",
													"\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"No Duplicate setupMenu\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.length).to.eql(7)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"pm.test(\"Remove policy medical code- pmflag\", function() {\r",
													" console.log(jsonData.payload.ePs.length)\r",
													" pm.expect(jsonData.payload.ePs.pmflag).does.not.exist;\r",
													"});\r",
													"\r",
													"\r",
													"for(i=0;i<jsonData.payload.ePs.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload.ePs[i].epTextID + \" and \" + jsonData.payload.ePs[i].epText +  \" ///does not display null /// \", function () {\r",
													"console.log(jsonData.payload.ePs[i].epTextID)\r",
													"console.log(jsonData.payload.ePs[i].epText)\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epTextID).to.not.be.null\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.exist\r",
													"pm.expect(jsonData.payload.ePs[i].epText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"chapterID\": 15,\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 13,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13636,\r\n    \"standardTextID\": 14174,\r\n    \"isSiteEST\": true,\r\n    \"hcoid\": 337483\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetEPsByStandard"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify- Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 0,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid ChapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 0,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid productType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 0,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 0,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid standardId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 0,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid serviceProfileTypeId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": null,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid certificationItemId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": null,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid -roleId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": null,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandards",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandards"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid currentStandardEffBeginDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": null,\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET ASSIGNED TO USER TREE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "CREATE Single Individual User Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Payload should be true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify success should be true\",function()\r",
											"{\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify errors should be null\",function()\r",
											"{\r",
											"    pm.expect(res.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userID\": 0,\r\n    \"roleID\": {{PA}},\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n         {\r\n            \"userID\": {{KamalID}},\r\n            \"fullName\": \"kamal, kanagaraj \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Kannan\",\r\n            \"userName\": \"string\"\r\n         }       \r\n    ],\r\n    \"teamCordinator\":\r\n        {\r\n            \"userID\": {{DivakarID}},\r\n            \"fullName\": \"Divaker, Yuvaraj \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"Divakar\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Y\",\r\n            \"userName\": \"string\"\r\n        },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateandCancelEPAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be TRUE\", function () {\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function () {\r",
											"    pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											"    var JsonCount = Object.keys(jsonData).length;\r",
											"    pm.expect(JsonCount).to.eql(3);\r",
											"});\r",
											"\r",
											"jsonData.payload.forEach(function (item) {\r",
											"    pm.test(\"Verify \" + item.itemLabel + \" and \" + item.itemText + \" do not display null\", function () {\r",
											"        pm.expect(item.itemLabel).to.exist;\r",
											"        pm.expect(item.itemLabel).to.not.be.null;\r",
											"        pm.expect(item.itemText).to.exist;\r",
											"        pm.expect(item.itemText).to.not.be.null;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Check 1st itemLabel is APR\", function () {\r",
											"    pm.expect(jsonData.payload[0].itemLabel).to.eql(\"APR\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 56,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": {{KamalID}},\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify- Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 597472,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": 54586,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 597472,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid assignedToUserId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": 54586,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify- Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": 23,\r\n    \"siteID\": 67103,\r\n    \"programID\": 2,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"viewByID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"currentStandardEffBeginDate\": \"01/01/2023\",\r\n    \"stickyStartDate\": null,\r\n    \"stickyEndDate\": null,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTre",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTre"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET PRINT CHAPTER",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Get APR Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// jsonData\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-23\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-23\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-23\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-23\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-23\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-23\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-23\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].printStandards[i].printEps[0].epText)\r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-23\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-23\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-23\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-23\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-23\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EC Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-54\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-54\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-54\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-54\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-54\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-54\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-54\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-54\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-54\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-54\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-54\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-54\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 54,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get EM Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-47\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-47\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-47\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-47\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-47\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-47\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-47\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-47\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-47\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-47\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-47\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-47\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 47,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 57295\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get HR Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-55\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-55\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-55\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-55\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-55\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-55\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-55\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-55\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-55\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-55\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-55\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-55\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 55,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get IC Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-52\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-52\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-52\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-52\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-52\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-52\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-52\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-52\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-52\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-52\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-52\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-52\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 52,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get IM Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-56\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-56\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-56\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-56\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-56\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-56\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-56\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-56\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-56\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-56\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-56\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-56\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 56,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LD Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-7\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-7\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-7\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-7\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-7\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-7\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-7\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-7\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-7\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-7\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-7\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-7\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 7,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get LS Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-44\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-44\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-44\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-44\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-44\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-44\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-44\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-44\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-44\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-44\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-44\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-44\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 44,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get MM Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-22\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-22\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-22\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-22\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-22\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-22\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-22\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-22\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-22\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-22\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-22\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-22\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 22,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get MS Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-14\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-14\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-14\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-14\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-14\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-14\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-14\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-14\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-14\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-14\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-14\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-14\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 14,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get NPSG AND UP Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-43\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-43\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-43\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-43\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-43\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-43\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-43\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-43\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-43\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-43\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-43\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-43\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 43,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get NR Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-15\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-15\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-15\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-15\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-15\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-15\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-15\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-15\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-15\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-15\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-15\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-15\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 15,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get PC Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-57\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-57\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-57\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-57\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-57\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-57\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-57\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-57\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-57\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-57\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-57\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-57\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 57,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get PI Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-58\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-58\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-58\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-58\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-58\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-58\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-58\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-58\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-58\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-58\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-58\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-58\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 58,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RC Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-51\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-51\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-51\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-51\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-51\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-51\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-51\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-51\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-51\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-51\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-51\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-51\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 51,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RI Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-53\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-53\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-53\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-53\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-53\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-53\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-53\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-53\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-53\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-53\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-53\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-53\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 53,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get TS Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-49\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-49\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-49\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-49\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-49\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-49\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-49\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-49\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-49\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-49\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-49\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-49\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 49,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get WT Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-18\"].printStandards.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-18\"].printStandards[i].standardTextId  + jsonData.payload[\"chapterId-18\"].printStandards[i].chapterCode + \" and \" + jsonData.payload[\"chapterId-18\"].printStandards[i].standardLabel + \" and \" + jsonData.payload[\"chapterId-18\"].printStandards[i].chapterText  + \" and \" +  jsonData.payload[\"chapterId-18\"].printStandards[i].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload[\"chapterId-18\"].printStandards[i].printEps[0].epText + \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterText)\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].printStandards[i].standardText)\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].printStandards[i].standardLabel)\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterCode)\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].printStandards[i].printEps[0].epText)\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterCode).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterCode).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].standardLabel).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].standardLabel).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].chapterText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].standardText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].standardText).to.not.be.null\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].printEps[0].epText).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].printStandards[i].printEps[0].epText).to.not.be.null\r",
													"})}\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-18\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-18\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-18\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-18\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-18\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 18,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Get DSCT Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-65\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-65\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-65\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-65\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-65\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-65\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-65\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 65,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DSPM Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-66\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-66\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-66\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-66\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-66\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-66\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-66\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 66,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DSPR Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-62\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-62\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-62\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-62\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-62\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-62\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-62\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 62,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DSSE Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-64\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-64\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-64\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-64\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-64\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-64\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-64\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 64,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CPR Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-61\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-61\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-61\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-61\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-61\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-61\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-61\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 61,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get DSDF Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-63\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-63\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-63\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-63\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-63\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-63\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-63\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 67,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 63,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ACPCDF Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-1555\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-1555\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 6339,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 1555,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ACPCIM Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-1554\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-1554\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 6339,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 1554,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ICPC Print Chapter Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be true\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"for (i = 0; i < jsonData.payload[\"chapterId-88\"].chaptersOverview.length; i++) {\r",
													"pm.test(\"Verify \" + jsonData.payload[\"chapterId-88\"].chaptersOverview[i].chapterName+ \" and Text \"+ jsonData.payload[\"chapterId-88\"].chaptersOverview[i].sectionText+ \" should not \" + \"  display null \", function () {\r",
													"    console.log(jsonData.payload[\"chapterId-88\"].chaptersOverview[i].chapterName)\r",
													"    console.log(jsonData.payload[\"chapterId-88\"].chaptersOverview[i].sectionText)\r",
													"    \r",
													"    \r",
													"    pm.expect(jsonData.payload[\"chapterId-88\"].chaptersOverview[i].chapterName).to.exist\r",
													"    pm.expect(jsonData.payload[\"chapterId-88\"].chaptersOverview[i].sectionText).to.not.be.null\r",
													"    \r",
													"})}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 3485,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 88,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 41533\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetPrintChapter"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify -Invalid chapterId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"printStandards should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload[\"chapterId-0\"].printStandards).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"chaptersOverview should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload[\"chapterId-0\"].chaptersOverview).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"printStandards should be Empty\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload[\"chapterId-23\"].printStandards).to.eql([])\r",
											"});\r",
											"\r",
											"pm.test(\"chaptersOverview should be No Chapter Overview Available\", function() {\r",
											" console.log(jsonData.payload[\"chapterId-23\"].chaptersOverview)\r",
											" pm.expect(jsonData.payload[\"chapterId-23\"].chaptersOverview[0].sectionText).to.eql(\"No Chapter Overview Available\")\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintChapter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintChapter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintChapter"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET BULK TREE DATA",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Get BulkTreeData Based on Program ID = 2 - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 23 - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 6 - Behavioral Health and Human Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 6,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 69-Critical Access Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 22-Home care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 22,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 21-Laboratory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n     \r\n  \"programID\": 21,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 5-Nursing Care Centre",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 5,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 68-Office Based Surery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 68,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Get BulkTreeData Based on Program ID = 67-Disease-Specific Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 67,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": 85,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 6339-Advanced Certification in Perinatal Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 6339,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": 85,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 3570-Comprehensive Cardiac Center",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3570,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 1341 -Health Care Staffing Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 1341,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 3485 -Integrated Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3485,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 6326- Maternal Levels of Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 6326,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 3572-Medication Compounding",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 2183-Palliative Care",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2183,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 3442-Patient Blood Management\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chapterID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3442,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Advance Disease",
							"item": [
								{
									"name": "Get BulkTreeData Based on Program ID = 67-Thrombectomy-Capable Stroke Center",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 67,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get BulkTreeData Based on Program ID = 1346-Ventricular Assist Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"console.log(jsonData.payload.length)\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify Chapter- \" +  jsonData.payload[i].itemLabel  +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[i].itemLabel)\r",
													"console.log(jsonData.payload[i].itemText)\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[i].itemText).to.not.be.null\r",
													"})\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].itemLabel+ \" Standard- \" +  jsonData.payload[j].items[i].itemLabel +  \" does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].itemLabel)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].itemText).to.not.be.null  \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"for(j=0;j<jsonData.payload.length;j++){\r",
													"\r",
													"for(i=0;i<jsonData.payload[j].items.length;i++){\r",
													"\r",
													"    for(k=0;k<jsonData.payload[j].items[i].items.length;k++){\r",
													"\r",
													"    pm.test(\"Verify \" + jsonData.payload[j].items[i].itemLabel+ \" EP- \" +  jsonData.payload[j].items[i].items[k].id + \"  does not display null \", function () {\r",
													"console.log(jsonData.payload[j].items[i].items[k].id)\r",
													"\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.exist\r",
													"pm.expect(jsonData.payload[j].items[i].items[k].itemText).to.not.be.null\r",
													"    \r",
													"            } \r",
													"   )}\r",
													"}\r",
													"\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"chapterID\": null,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 1346,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": null,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Standard",
												"GetBulkTreeData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": 15804,\r\n  \"programID\": 1346,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetBulkTreeData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid roleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": 15804,\r\n  \"programID\": 1346,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 0,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetBulkTreeData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Site ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"chapterID\": null,\r\n    \"siteID\": 0,\r\n    \"programID\": 1346,\r\n    \"productType\": 1,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"roleID\": 1,\r\n    \"additionalFilterId\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"userID\": null,\r\n    \"standardTextID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetBulkTreeData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": null,\r\n   \"siteID\": 15804,\r\n  \"programID\": 0,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"additionalFilterId\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetBulkTreeData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetBulkTreeData"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-POST/GET/DELETE EP SCORE ASSIGNMENTS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "CREATE EPSCOREASSIGNMENT",
							"item": [
								{
									"name": "CREATE Single Individual User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Payload should be true\",function()\r",
													"{\r",
													"    pm.expect(res.payload).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify success should be true\",function()\r",
													"{\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify errors should be null\",function()\r",
													"{\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"roleID\": {{PA}},\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n         {\r\n            \"userID\": {{KamalID}},\r\n            \"fullName\": \"kamal, kanagaraj \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Kannan\",\r\n            \"userName\": \"string\"\r\n         }       \r\n    ],\r\n    \"teamCordinator\":\r\n        {\r\n            \"userID\": {{DivakarID}},\r\n            \"fullName\": \"Divaker, Yuvaraj \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"Divakar\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Y\",\r\n            \"userName\": \"string\"\r\n        },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateandCancelEPAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE Multiple Individual User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Payload should be true\",function()\r",
													"{\r",
													"    pm.expect(res.payload).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify success should be true\",function()\r",
													"{\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify errors should be null\",function()\r",
													"{\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"roleID\": 1,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": {{KamalID}},\r\n            \"fullName\": \"kamal, kanagaraj \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"k\",\r\n            \"userName\": \"string\"\r\n        },\r\n        {\r\n            \"userID\": {{DivakarID}},\r\n            \"fullName\": \"D, Yuvaraj \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"k\",\r\n            \"userName\": \"string\"\r\n        }\r\n    ],\r\n    \"teamCordinator\": {\r\n        \"userID\": {{DivakarID}},\r\n        \"fullName\": \"Divaker, Yuvaraj \",\r\n        \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n        \"firstName\": \"Divakar\",\r\n        \"middleName\": \"string\",\r\n        \"lastName\": \"Y\",\r\n        \"userName\": \"string\"\r\n    },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateandCancelEPAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "GET EPSCOREASSIGNMENT",
							"item": [
								{
									"name": "GetEPScoreAssignments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   var jsonData = pm.response.json();\r",
													"\r",
													"   \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"console.log(jsonData.payload)\r",
													"console.log(jsonData.payload.length)\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[i].userName + \" and \" + jsonData.payload[i].action +  \" ---does not display null \", function () {\r",
													"console.log(jsonData.payload[i].userName)\r",
													"console.log(jsonData.payload[i].dueDate)\r",
													"pm.expect(jsonData.payload[i].userName).to.exist\r",
													"pm.expect(jsonData.payload[i].userName).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].dueDate).to.exist\r",
													"pm.expect(jsonData.payload[i].dueDate).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"GetEPScoresAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPScoreAssignments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   var jsonData = pm.response.json();\r",
													"\r",
													"   \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"console.log(jsonData.payload)\r",
													"console.log(jsonData.payload.length)\r",
													"\r",
													"\r",
													"    pm.test(\"Verify \" +  jsonData.payload[0].userName + \" and \" + jsonData.payload[0].action +  \" ---does not display null \", function () {\r",
													"console.log(jsonData.payload[0].userName)\r",
													"console.log(jsonData.payload[0].dueDate)\r",
													"pm.expect(jsonData.payload[0].userName).to.exist\r",
													"pm.expect(jsonData.payload[0].userName).to.not.be.null\r",
													"pm.expect(jsonData.payload[0].dueDate).to.exist\r",
													"pm.expect(jsonData.payload[0].dueDate).to.not.be.null\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"GetEPScoresAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DELETE EPSCOREASSIGNMENT",
							"item": [
								{
									"name": "DeleteEPScoreAssignments Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"   var jsonData = pm.response.json();\r",
													"\r",
													"   \r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"console.log(jsonData.payload)\r",
													"console.log(jsonData.payload.length)\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[i].userName + \" and \" + jsonData.payload[i].action +  \" ---does not display null \", function () {\r",
													"console.log(jsonData.payload[i].userName)\r",
													"console.log(jsonData.payload[i].dueDate)\r",
													"pm.expect(jsonData.payload[i].userName).to.exist\r",
													"pm.expect(jsonData.payload[i].userName).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].dueDate).to.exist\r",
													"pm.expect(jsonData.payload[i].dueDate).to.not.be.null\r",
													"})\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"id\": 646495,\r\n  \"type\": \"Score\",\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/DeleteEPScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"DeleteEPScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Automation",
					"item": [
						{
							"name": "GetEPScoreAssignments - Individual Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"ScoreID\",jsonData.payload[0].id);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteEPScoreAssignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n\"programID\": 2,\r\n\"epUserRoleID\": 3,\r\n\"certificationItemID\": 0,\r\n\"chapterID\": 23,\r\n\"standardTextID\": 14698,\r\n\"epTextID\": 58534,\r\n\"id\": {{ScoreID}},\r\n\"type\": \"Assignment\",\r\n\"userID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/DeleteEPScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"DeleteEPScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE New score assignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Payload should be true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify success should be true for CREATE New score assignments\",function()\r",
											"{\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify errors should be null\",function()\r",
											"{\r",
											"    pm.expect(res.errors).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userID\": 0,\r\n    \"roleID\": 1,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 646495,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n         {\r\n            \"userID\": {{KamalID}},\r\n            \"fullName\": \"kamal, Kanagaraj \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"K\",\r\n            \"userName\": \"string\"\r\n         }       \r\n    ],\r\n    \"teamCordinator\":\r\n        {\r\n            \"userID\": {{DivakarID}},\r\n            \"fullName\": \"Divakar, Y \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"Divakar\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Y\",\r\n            \"userName\": \"string\"\r\n        },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateandCancelEPAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPScoreAssignments - Individual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Verify GetEPScoreAssignments - Individual \" +  jsonData.payload[0].action + \" and \" + jsonData.payload[0].userName , function () {\r",
											"console.log(jsonData.payload[0].userName)\r",
											"\r",
											"pm.expect(jsonData.payload[0].userName).to.eql(\"Kanagaraj, Kamal\");\r",
											"\r",
											"    })\r",
											"\r",
											"pm.environment.set(\"ScoreID\",jsonData.payload[0].id);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPScoreAssignments - Preliminary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be true\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"\r",
											"    pm.test(\"Verify GetEPScoreAssignments - Preliminary\" +  jsonData.payload[0].action + \" and \" + jsonData.payload[0].userName , function () {\r",
											"console.log(jsonData.payload[0].userName)\r",
											"\r",
											"pm.expect(jsonData.payload[0].userName).to.eql(\"Yuvaraj, Divakar\");\r",
											"\r",
											"    })\r",
											"\r",
											"pm.collectionVariables.set(\"ScoreID\",jsonData.payload[0].id);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteEPScoreAssignments Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n\"programID\": 2,\r\n\"epUserRoleID\": 3,\r\n\"certificationItemID\": 0,\r\n\"chapterID\": 23,\r\n\"standardTextID\": 14698,\r\n\"epTextID\": 58534,\r\n\"id\": {{ScoreID}},\r\n\"type\": \"Assignment\",\r\n\"userID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/DeleteEPScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"DeleteEPScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPScoreAssignments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response status is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId=00000&programId=2&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=56464",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "00000"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "56464"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId=&programId=2&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=56464",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": ""
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "56464"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid EPTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId={{Normal_SiteID}}&programId=2&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=000000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 0,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epUserRoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 0,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": true,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid isHistoryGrid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"isHistoryGrid\": null,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET RELATED EPS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetRelatedEPs- APR.01.01.01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify Related EP's \" +  jsonData.payload[i].siteID + \" and \" + jsonData.payload[i].chapterName +  \" is \" + jsonData.payload[i].standardLabel + \" does not display null \", function () {\r",
											"console.log(jsonData.payload[i].siteID)\r",
											"console.log(jsonData.payload[i].chapterName)\r",
											"console.log(jsonData.payload[i].standardLabel)\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.exist\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardText).to.exist\r",
											"pm.expect(jsonData.payload[i].standardText).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].epText).to.exist\r",
											"pm.expect(jsonData.payload[i].epText).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].rationaleText).to.exist\r",
											"pm.expect(jsonData.payload[i].rationaleText).to.not.be.null\r",
											"})\r",
											"}\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 56324,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetRelatedEPs -PC.01.02.03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"   // User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify Related EP's \" +  jsonData.payload[i].siteID + \" and \" + jsonData.payload[i].chapterName +  \" is \" + jsonData.payload[i].standardLabel + \" does not display null \", function () {\r",
											"console.log(jsonData.payload[i].siteID)\r",
											"console.log(jsonData.payload[i].chapterName)\r",
											"console.log(jsonData.payload[i].standardLabel)\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.exist\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardText).to.exist\r",
											"pm.expect(jsonData.payload[i].standardText).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].epText).to.exist\r",
											"pm.expect(jsonData.payload[i].epText).to.not.be.null\r",
											"\r",
											"\r",
											"})\r",
											"}\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify GetRelatedEPs display based on ChapterID and ProgramID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload).to.eql\r",
											"   ([\r",
											"   {\r",
											"            \"siteID\": 41533,\r",
											"            \"programID\": 23,\r",
											"            \"final\": \"\",\r",
											"            \"preliminary\": \"\",\r",
											"            \"sc\": \"\",\r",
											"            \"chapterName\": \"Provision of Care, Treatment, and Services\",\r",
											"            \"standardID\": 13466,\r",
											"            \"standardLabel\": \"PC.01.02.01\",\r",
											"            \"standardText\": \"The organization assesses and reassesses its patients.\",\r",
											"            \"epTextID\": 56507,\r",
											"            \"epLabel\": \"1\",\r",
											"            \"epText\": \"The organization defines, in writing, the scope and content of screening, assessment, and reassessment information it collects. Patient information is collected according to these requirements. <br/>Note 1: The scope and content are dependent on whether the patient is making an initial or follow-up visit and whether the assessment is focused or comprehensive.<br/>Note 2: In defining the scope and content of the information it collects, the organization may want to consider information that it can obtain, with the patient’s consent, from the patient’s family and the patient’s other care providers, as well as information conveyed on any medical jewelry. (See also RC.02.01.01, EP 2)\",\r",
											"            \"hasNewCritical\": \"N\",\r",
											"            \"hasMOS\": \"U\",\r",
											"            \"hasFSA\": 0,\r",
											"            \"hasCMS\": 0,\r",
											"            \"hasDocumentation\": \"Y\",\r",
											"            \"hasESP\": \"Y\",\r",
											"            \"fsa\": \"\",\r",
											"            \"cmsRequirement\": \"\",\r",
											"            \"rationaleText\": null,\r",
											"            \"standardIntroductionHeader\": \"Introduction to Standard PC.01.02.01\",\r",
											"            \"standardIntroductionText\": \"The goal of assessment is to determine the care, treatment, or services that will meet the patient’s initial and continuing needs. Patient needs must be reassessed throughout the course of care, treatment, or services. <br/><br/>Identifying and delivering the right care, treatment, or services depends on the following three processes:<br/>1. Collecting information about the patient’s health history as well as physical, functional, and psychosocial status<br/>2. Analyzing the information in order to understand the patient’s needs for care, treatment, or services <br/>3. Making care, treatment, or service decisions based on the analysis of information collected<br/><br/>The depth and frequency of assessment depends on a number of factors, including the patient’s needs, program goals, and the care, treatment, or services provided. Assessment activities may vary between settings, as defined by the organization’s leaders. <br/><br/>Information gathered at the patient’s first contact may indicate the need for more data or a more intensive assessment. At a minimum, the need for further assessment is determined by the care, treatment, or services sought; the patient’s presenting condition(s); and whether the patient agrees to the recommended care, treatment, or services.\",\r",
											"            \"chapterSortOrder\": 16,\r",
											"            \"standardSortOrder\": 110,\r",
											"            \"sortOrder\": 1\r",
											"        },\r",
											"        {\r",
											"            \"siteID\": 41533,\r",
											"            \"programID\": 23,\r",
											"            \"final\": \"\",\r",
											"            \"preliminary\": \"\",\r",
											"            \"sc\": \"\",\r",
											"            \"chapterName\": \"Provision of Care, Treatment, and Services\",\r",
											"            \"standardID\": 13465,\r",
											"            \"standardLabel\": \"PC.03.01.03\",\r",
											"            \"standardText\": \"The organization provides the patient with care before initiating operative or other high-risk procedures, including those that require the administration of moderate or deep sedation or anesthesia.\",\r",
											"            \"epTextID\": 55734,\r",
											"            \"epLabel\": \"1\",\r",
											"            \"epText\": \"Before operative or other high-risk procedures are initiated, or before moderate or deep sedation or anesthesia is administered: The organization conducts a presedation or preanesthesia patient assessment.  (See also RC.02.01.01, EP 2)\",\r",
											"            \"hasNewCritical\": \"N\",\r",
											"            \"hasMOS\": \"U\",\r",
											"            \"hasFSA\": 0,\r",
											"            \"hasCMS\": 1,\r",
											"            \"hasDocumentation\": \"N\",\r",
											"            \"hasESP\": \"N\",\r",
											"            \"fsa\": \"\",\r",
											"            \"cmsRequirement\": \"§416.52(a)(2)\",\r",
											"            \"rationaleText\": null,\r",
											"            \"standardIntroductionHeader\": \"Introduction to Standards PC.03.01.01 Through PC.03.01.07\",\r",
											"            \"standardIntroductionText\": \"The standards for sedation and anesthesia care apply when patients in any setting receive, for any purpose, by any of the following routes:<br/>- General, spinal, or other major regional anesthesia<br/>- Moderate or deep sedation (with or without analgesia) that, in the manner used, may be expected to result in the loss of protective reflexes\",\r",
											"            \"chapterSortOrder\": 16,\r",
											"            \"standardSortOrder\": 150,\r",
											"            \"sortOrder\": 1\r",
											"        },\r",
											"        {\r",
											"            \"siteID\": 41533,\r",
											"            \"programID\": 23,\r",
											"            \"final\": \"\",\r",
											"            \"preliminary\": \"\",\r",
											"            \"sc\": \"\",\r",
											"            \"chapterName\": \"Provision of Care, Treatment, and Services\",\r",
											"            \"standardID\": 13465,\r",
											"            \"standardLabel\": \"PC.03.01.03\",\r",
											"            \"standardText\": \"The organization provides the patient with care before initiating operative or other high-risk procedures, including those that require the administration of moderate or deep sedation or anesthesia.\",\r",
											"            \"epTextID\": 56571,\r",
											"            \"epLabel\": \"8\",\r",
											"            \"epText\": \"The organization reevaluates the patient immediately before administering moderate or deep sedation or anesthesia.  (See also RC.02.01.01, EP 2)\",\r",
											"            \"hasNewCritical\": \"N\",\r",
											"            \"hasMOS\": \"U\",\r",
											"            \"hasFSA\": 0,\r",
											"            \"hasCMS\": 1,\r",
											"            \"hasDocumentation\": \"N\",\r",
											"            \"hasESP\": \"N\",\r",
											"            \"fsa\": \"\",\r",
											"            \"cmsRequirement\": \"§416.52(a)(2)\",\r",
											"            \"rationaleText\": null,\r",
											"            \"standardIntroductionHeader\": \"Introduction to Standards PC.03.01.01 Through PC.03.01.07\",\r",
											"            \"standardIntroductionText\": \"The standards for sedation and anesthesia care apply when patients in any setting receive, for any purpose, by any of the following routes:<br/>- General, spinal, or other major regional anesthesia<br/>- Moderate or deep sedation (with or without analgesia) that, in the manner used, may be expected to result in the loss of protective reflexes\",\r",
											"            \"chapterSortOrder\": 16,\r",
											"            \"standardSortOrder\": 150,\r",
											"            \"sortOrder\": 8\r",
											"        }\r",
											"])});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 56569,\r\n  \"siteID\": 41533,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetRelatedEPs EM.01.01.01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"  // User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify Related EP's \" +  jsonData.payload[i].siteID + \" and \" + jsonData.payload[i].chapterName +  \" is \" + jsonData.payload[i].standardLabel + \" does not display null \", function () {\r",
											"console.log(jsonData.payload[i].siteID)\r",
											"console.log(jsonData.payload[i].chapterName)\r",
											"console.log(jsonData.payload[i].standardLabel)\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.exist\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardText).to.exist\r",
											"pm.expect(jsonData.payload[i].standardText).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].epText).to.exist\r",
											"pm.expect(jsonData.payload[i].epText).to.not.be.null\r",
											"\r",
											"\r",
											"})\r",
											"}\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload[0].rationaleText).to.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[1].rationaleText).to.exist\r",
											"pm.expect(jsonData.payload[1].rationaleText).to.not.be.null\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 56311,\r\n  \"siteID\": 41533,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid epTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    pm.test(\"Verify Payload should be Empty \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql([])\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 0,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"    pm.test(\"Verify Payload should be Empty \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql([])\r",
											"\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 53698,\r\n  \"siteID\": 760,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"epTextID\": 53698,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"productType\": 1,\r\n  \"isVerificationProgram\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"verificationProgramGroupTypeId\": 0,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetRelatedEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetRelatedEPs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET/SAVE EP ATTRIBUTE FILTER",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Site",
							"item": [
								{
									"name": "Mock Survey Site",
									"item": [
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1,4,5,6\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[0].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[0].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": 0,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1,\r\n    \"epAttributeFilterTypeIDList\": \"4\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[2].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[2].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"5\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[3].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[3].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"7\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[4].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[4].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"4,5,6,7\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n   \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"6\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[1].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[1].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Normal Site",
									"item": [
										{
											"name": "SAVE Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[0].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[0].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Normal site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"3\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Labaratory Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(3);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"IQCP Eligible\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[1].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[1].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 21,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Normal site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"2\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[1].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[1].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"4\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[3].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[3].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"5\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[4].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[4].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"6\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[2].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[2].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"7\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															" console.log(jsonData.payload.epAttributeFilters[5].isSelectedOption)\r",
															" pm.expect(jsonData.payload.epAttributeFilters[5].isSelectedOption).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										},
										{
											"name": "SAVE Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"4,5,6,7\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"SaveEPAttributeFilter"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET Hospital Attributes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for EP Attribute Filter- Mock Survey Site\", function () {\r",
															"\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterTypeID).to.eql(1);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[0].epAttributeFilterDisplayText).to.eql(\"New/Changed EP's as of selected effective date\");\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID).to.eql(2);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText).to.eql(\"Patient Safety\");\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[1].epAttributeFilterDisplayText);\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID).to.eql(4);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText).to.eql(\"All EPs required for Full FSA Submission\");\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[3].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID).to.eql(5);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText).to.eql(\"Requirements for Improvement (RFI)\");\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[4].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID).to.eql(6);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText).to.eql(\"Requires Written Documentation\");\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[2].epAttributeFilterDisplayText);\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID).to.eql(7);\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText).to.eql(\"Early Survey Policy Option 1\");\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterTypeID);\r",
															"console.log(jsonData.payload.epAttributeFilters[5].epAttributeFilterDisplayText)                                              \r",
															"});\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															"\r",
															"pm.test(\"isSelectedOption should be TRUE\", function() {\r",
															"pm.expect(jsonData.payload.epAttributeFilters[2].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[3].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[4].isSelectedOption).to.eql(true)\r",
															"pm.expect(jsonData.payload.epAttributeFilters[5].isSelectedOption).to.eql(true)\r",
															"});\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": null,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"serviceProfileTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Filter/GetEPAttributeFilters",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Filter",
														"GetEPAttributeFilters"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 33,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilte",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"SaveEPAttributeFilte"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 33,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"SaveEPAttributeFilter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": null,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"SaveEPAttributeFilter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid UserID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"SaveEPAttributeFilter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": null,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"serviceProfileTypeID\": 1,\r\n  \"epAttributeFilterTypeIDList\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/SaveEPAttributeFilter",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"SaveEPAttributeFilter"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET PRINT STANDARD",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Get ARR 01.01.01 Print Standard Standard Text ID=14698",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 41,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ARR 01.02.01 Print Standard Standard Text ID=14703",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ARR 01.03.01 Print Standard Standard Text ID=14371",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14371,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ARR 09.04.01 Print Standard Standard Text ID=30501",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30501,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EC 01.01.01 Print Standard Standard Text ID=30306",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 54,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30306,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EC 04.01.05 Print Standard Standard Text ID=14844",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 54,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14844,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EM 09.01.01 Print Standard Standard Text ID=30766",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 47,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30766,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get EM 17.01.01 Print Standard Standard Text ID=30841",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 47,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30841,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HR 01.01.01 Print Standard Standard Text ID=17410",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 55,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 17410,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get HR 01.07.01 Print Standard Standard Text ID=14688",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 55,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14688,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IC 01.01.01 Print Standard Standard Text ID=14571",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 52,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14571,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IC 03.01.01 Print Standard Standard Text ID=14618",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 52,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": null,\r\n  \"standardTextID\": null,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IM 01.01.01 Print Standard Standard Text ID=14631",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 56,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14631,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get IM 03.01.01 Print Standard Standard Text ID=13093",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 56,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 13093,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LD 01.01.01 Print Standard Standard Text ID=15194",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 7,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 15194,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LD 04.03.13 Print Standard Standard Text ID=17548",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 7,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 17548,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LS 01.01.01 Print Standard Standard Text ID=14766",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 44,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14766,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get LS 05.01.34 Print Standard Standard Text ID=30356",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 44,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30356,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MM 01.01.01 Print Standard Standard Text ID=30010",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 22,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30010,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MM 09.01.01 Print Standard Standard Text ID=17290",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 22,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 14398,\r\n  \"standardTextID\": 30651,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS 01.01.01 Print Standard Standard Text ID=16562",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 14,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 16562,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS 13.01.03 Print Standard Standard Text ID=14091",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 14,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14091,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NPSG 01.01.01 Print Standard Standard Text ID=30031",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 43,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30031,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NPSG 01.03.01 Print Standard Standard Text ID=15390",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 43,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 15390,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NR 01.01.01 Print Standard Standard Text ID=13642",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 15,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13470,\r\n  \"standardTextID\": 13642,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NR 02.03.01 Print Standard Standard Text ID=14174",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 15,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14174,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PC 01.01.01 Print Standard Standard Text ID=14980",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 57,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14980,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PC 06.03.01 Print Standard Standard Text ID=30092",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 57,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30092,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PI 01.01.01 Print Standard Standard Text ID=13324",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 58,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14596,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PI 04.01.01 Print Standard Standard Text ID=30450",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 58,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30450,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RC 01.01.01 Print Standard Standard Text ID=14436",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 51,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14436,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RC 02.04.01 Print Standard Standard Text ID=30066",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 51,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 30066,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RI 01.01.01 Print Standard Standard Text ID=14446",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 53,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14446,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get RI 02.01.01 Print Standard Standard Text ID=30689",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 53,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13432,\r\n  \"standardTextID\": 30689,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TS 01.01.01 Print Standard Standard Text ID=15222",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 49,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 15222,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TS 03.03.01 Print Standard Standard Text ID=15155",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 49,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13542,\r\n  \"standardTextID\": 15155,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get WT 01.01.01 Print Standard Standard Text ID=13766",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 18,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 13766,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get WT 05.01.01 Print Standard Standard Text ID=14458",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"console.log(jsonData.payload[\"printStandards\"])\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" + jsonData.payload[\"printStandards\"].chapterCode + \" and \" + jsonData.payload[\"printStandards\"].standardLabel + \" and \" + jsonData.payload[\"printStandards\"].chapterText  + \" and \" +  jsonData.payload[\"printStandards\"].standardText + \" and DISPLAYS EP TEXT AS ---> \" + jsonData.payload.printEps.epText + \" should not \" + \"  display null \", function () {\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardText)\r",
											"    console.log(jsonData.payload[\"printStandards\"].standardLabel)\r",
											"    console.log(jsonData.payload[\"printStandards\"].chapterCode)\r",
											"   \r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterCode).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardLabel).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].chapterText).to.not.be.null\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.exist\r",
											"    pm.expect(jsonData.payload[\"printStandards\"].standardText).to.not.be.null\r",
											"\r",
											"});\r",
											" \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 18,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14458,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify - Invalid productId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify printStandards as Null\",function()\r",
											"{\r",
											"    pm.expect(res.payload.printStandards).to.eql(null);\r",
											"     pm.expect(res.payload.printEps).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid siteId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify printStandards as Null\",function()\r",
											"{\r",
											"    pm.expect(res.payload.printStandards).to.eql(null);\r",
											"     pm.expect(res.payload.printEps).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 5555555\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid chapterId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify printStandards as Null\",function()\r",
											"{\r",
											"    pm.expect(res.payload.printStandards).to.eql(null);\r",
											"     pm.expect(res.payload.printEps).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify printStandards as Null\",function()\r",
											"{\r",
											"    pm.expect(res.payload.printStandards).to.eql(null);\r",
											"     pm.expect(res.payload.printEps).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid standardTextId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify printStandards as Null\",function()\r",
											"{\r",
											"    pm.expect(res.payload.printStandards).to.eql(null);\r",
											"     pm.expect(res.payload.printEps).to.eql(null);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 0,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": {{Normal_SiteID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"productID\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"subChapterID\": null,\r\n  \"standardID\": 13360,\r\n  \"standardTextID\": 14703,\r\n  \"cycleID\": 38,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"siteID\": 760\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetPrintStandard"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SELECT PROGRAMS BY SITE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "SelectProgramsBySite for Katalon Test Site 1 SiteID = 15804",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Site ID - 54586 --> Katalon Test Site 1 - Has ambulatory so response should show ambulatory \r",
											"//Inside AMP and Tracers you have the programs drop down - this is displaying that dropdown per the site......\r",
											"//15804 Jill test site does not have ambulatory so the response body should not show that --- \r",
											"\r",
											"/*\r",
											"    var jsonData = pm.response.json();\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[0].programID + \"  should display  Hospital\", function () {\r",
											"    pm.expect(jsonData.payload[0].programName).to.eql('Hospital');\r",
											"});\r",
											"    // var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[1].programID + \"  should display  Ambulatory\", function () {\r",
											"    pm.expect(jsonData.payload[1].programName).to.eql('Ambulatory');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[2].programID + \"  should display  Behavioral Health and Human Services\", function () {\r",
											"    pm.expect(jsonData.payload[2].programName).to.eql('Behavioral Health and Human Services');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[3].programID + \"  should display  Critical Access Hospital\", function () {\r",
											"    pm.expect(jsonData.payload[3].programName).to.eql('Critical Access Hospital');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[4].programID + \"  should display  Home Care\", function () {\r",
											"    pm.expect(jsonData.payload[4].programName).to.eql('Home Care');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[5].programID + \"  should display  Laboratory\", function () {\r",
											"    pm.expect(jsonData.payload[5].programName).to.eql('Laboratory');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[6].programID + \"  should display  Nursing Care Center\", function () {\r",
											"    pm.expect(jsonData.payload[6].programName).to.eql('Nursing Care Center');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[7].programID + \"  should display  Office Based Surgery\", function () {\r",
											"    pm.expect(jsonData.payload[7].programName).to.eql('Office Based Surgery');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[8].programID + \"  should display  Disease-Specific Care\", function () {\r",
											"    pm.expect(jsonData.payload[8].programName).to.eql('Disease-Specific Care');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[9].programID + \"  should display  Abdominal Aortic Aneurysm\", function () {\r",
											"    pm.expect(jsonData.payload[9].programName).to.eql('Abdominal Aortic Aneurysm');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[10].programID + \"  should display  Acute Myocardial Infarction\", function () {\r",
											"    pm.expect(jsonData.payload[10].programName).to.eql('Acute Myocardial Infarction');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[11].programID + \"  should display  Asthma\", function () {\r",
											"    pm.expect(jsonData.payload[11].programName).to.eql('Asthma');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[12].programID + \"  should display Asthma, Pediatrics\", function () {\r",
											"    pm.expect(jsonData.payload[12].programName).to.eql('Asthma, Pediatrics');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[13].programID + \"  should display Bone Marrow Transplant\", function () {\r",
											"    pm.expect(jsonData.payload[13].programName).to.eql('Bone Marrow Transplant');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[14].programID + \"  should display  Chronic Kidney Disease\", function () {\r",
											"    pm.expect(jsonData.payload[14].programName).to.eql('Breast Cancer');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[15].programID + \"  should display Carotid Stenosis\", function () {\r",
											"    pm.expect(jsonData.payload[15].programName).to.eql('Carotid Stenosis');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[16].programID + \"  should display Chronic Obstructive Pulmonary Disease (COPD)\", function () {\r",
											"    pm.expect(jsonData.payload[16].programName).to.eql('Chronic Obstructive Pulmonary Disease (COPD)');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[17].programID + \"  should display Colorectal Cancer\", function () {\r",
											"    pm.expect(jsonData.payload[17].programName).to.eql('Colorectal Cancer');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[18].programID + \"  should display Coronary Artery Bypass Graft\", function () {\r",
											"    pm.expect(jsonData.payload[18].programName).to.eql('Coronary Artery Bypass Graft');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[19].programID + \"  should display  Depression\", function () {\r",
											"    pm.expect(jsonData.payload[19].programName).to.eql('Depression');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[20].programID + \"  should display  Geriatrics Delirium\", function () {\r",
											"    pm.expect(jsonData.payload[20].programName).to.eql('Geriatrics Delirium');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[21].programID + \"  should display Heart Failure (HF)\", function () {\r",
											"    pm.expect(jsonData.payload[21].programName).to.eql('Heart Failure (HF)');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[22].programID + \"  should display  Hip Fracture\", function () {\r",
											"    pm.expect(jsonData.payload[22].programName).to.eql('Hip Fracture');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[23].programID + \"  should display Joint Replacement - Hip\", function () {\r",
											"    pm.expect(jsonData.payload[23].programName).to.eql('Joint Replacement - Hip');\r",
											"});\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[24].programID + \"  should display  Joint Replacement - Knee\", function () {\r",
											"    pm.expect(jsonData.payload[24].programName).to.eql('Joint Replacement - Knee');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[25].programID + \"  should display Multi-System Trauma\", function () {\r",
											"    pm.expect(jsonData.payload[25].programName).to.eql('Multi-System Trauma');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify for ProgramID \" + jsonData.payload[26].programID + \"  should displayPeripheral Vascular Disease\", function () {\r",
											"    pm.expect(jsonData.payload[26].programName).to.eql('Peripheral Vascular Disease');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No Duplicate programName\", function() {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
											"    if (!arr.includes(b.programName)) {\r",
											"      arr.push(b.programName);\r",
											"    }\r",
											"    return arr;\r",
											"  }, []).length).to.eql(jsonData.payload.length);\r",
											"});\r",
											"\r",
											"*/\r",
											"\r",
											"\r",
											"pm.test(\"Payload array is present and is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"All programName properties are present\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.payload.forEach(function (program) {\r",
											"        pm.expect(program.programName).to.exist;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/SelectProgramsBySite?siteId={{Normal_SiteID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"SelectProgramsBySite"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SelectProgramsBySite for Jill Test Site- SiteID =15804",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Payload array is present and is not empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"All programName properties are present\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.payload.forEach(function (program) {\r",
											"        pm.expect(program.programName).to.exist;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/SelectProgramsBySite?siteId={{MockSurvey_SiteID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"SelectProgramsBySite"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify 404 Invalid site ID - PRODUCTION DEFECT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/SelectProgramsBySite?siteId=11110000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"SelectProgramsBySite"
									],
									"query": [
										{
											"key": "siteId",
											"value": "11110000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 400 Header Host not checked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Site ID - 54586 --> Katalon Test Site 1 - Has ambulatory so response should show ambulatory \r",
											"//Inside AMP and Tracers you have the programs drop down - this is displaying that dropdown per the site......\r",
											"//15804 Jill test site does not have ambulatory so the response body should not show that --- \r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/SelectProgramsBySite?siteId=4565467",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"SelectProgramsBySite"
									],
									"query": [
										{
											"key": "siteId",
											"value": "4565467"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 405 Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/SelectProgramsBySite?siteId=4565467",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"SelectProgramsBySite"
									],
									"query": [
										{
											"key": "siteId",
											"value": "4565467"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-CREATE/UPDATE/DELETE TASK",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Create Task- Single User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Create & Delete Task -Single User TO\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"pm.environment.set(\"createdTaskId\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  jsonData.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.exist\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"{{KamalID}}\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resend Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"taskIDs\": \"{{createdTaskId}}\",\r\n  \"skipItemAssociated\": false,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/Resendtasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"Resendtasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Multiple User TO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Create & Delete Task -Multiple User TO\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"pm.environment.set(\"createdTaskId\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"{{KamalID}},613412\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n        \"ccUserIDs\": \"{{DivakarID}}\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Multiple User CC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Create & Delete Task -Multiple User CC\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"pm.environment.set(\"createdTaskId\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"});\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"577754\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"577754,{{KamalID}}\",\r\n        \"listCcEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Multiple User TO & CC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Create & Delete Task -Multiple User TO & CC\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"pm.environment.set(\"createdTaskId\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n        \r\n        \"listUsers\": \"577754,{{KamalID}}\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n        \"ccUserIDs\": \"577754,{{KamalID}}\",\r\n        \"listCcEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Inactive User TO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.inactiveUsersTo)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.inactiveUsersTo + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.inactiveUsersTo).to.exist\r",
											"pm.expect(res.payload.inactiveUsersTo).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n        \r\n        \"listUsers\": \"195485\",\r\n        \"listToEmailIDs\": \"smur05gantsl@caromonthealth.org\",\r\n\r\n        \"ccUserIDs\": \"577754,{{KamalID}}\",\r\n        \"listCcEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Inactive User CC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.inactiveUsersCc)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.inactiveUsersCc + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.inactiveUsersCc).to.exist\r",
											"pm.expect(res.payload.inactiveUsersCc).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n        \r\n        \"listUsers\": \"577754,{{KamalID}}\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n        \"ccUserIDs\": \"190648\",\r\n        \"listCcEmailIDs\": \"123lorrie.hubbard@providence.org\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -GuestUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Create & Delete Task -Guest User TO\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.guestUserTo[0].emailAddress)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.guestUserTo[0].emailAddress + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.guestUserTo[0].emailAddress).to.exist\r",
											"pm.expect(res.payload.guestUserTo[0].emailAddress).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"577754\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"597472\",\r\n        \"listCcEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": \"{{$randomEmail}}\",\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task- Single User Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Create & Delete Task -Single User TO\", function () {\r",
											"pm.collectionVariables.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"pm.environment.set(\"createdTaskId\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  jsonData.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.exist\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"{{KamalID}}\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Task Name & TaskDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 2,\r\n        \"assignedDate\": \"10/06/2022\",\r\n       \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": null,\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": \"578215\"\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - TaskStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 2,\r\n        \"assignedDate\": \"10/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\": true,\r\n        \"skipItemAssociated\": false,\r\n        \"listUsers\": \"597472\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": \"578215\"\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 646495\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - assignedDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"10/06/2021\",\r\n       \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"597472\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": \"578215\"\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Duedate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"10/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"597472\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": \"578215\"\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Inactive Personresposible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.inactiveUsersTo)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.inactiveUsersTo + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.inactiveUsersTo).to.exist\r",
											"pm.expect(res.payload.inactiveUsersTo).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"Create New for testing\",\r\n        \"taskDetails\": \"Test create and update\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2021\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"73079\",\r\n        \"assignedToUserID\": \"73079\",\r\n        \"listToEmailIDs\": \"@uhsinc.com-INVALID\",\r\n\r\n         \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2\r\n       \r\n    },\r\n    \"lstUserEmailsTo\": \"guestusersruthi@jcrinc.com\",\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Inactive CC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"Create New for testing\",\r\n        \"taskDetails\": \"Test create and update\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"279324\",        \r\n        \"listToEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"73079\",\r\n        \"listCcEmailIDs\": \"@uhsinc.com-INVALID\",\r\n\r\n        \"assignedToUserID\": 0,\r\n        \"updatedByUserID\": 646495,\r\n        \"createdByUserID\": 646495,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2\r\n       \r\n    },\r\n    \"lstUserEmailsTo\": \"guestusersruthi@jcrinc.com\",\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 646495\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Personresposible",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"01/09/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"577754\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 577754\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - CC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56465,\r\n        \"taskID\": {{createdTaskId}},\r\n        \"taskName\": \"Create New for testing\",\r\n        \"taskDetails\": \"Test create and update\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n       \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"597472\",\r\n     \r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"577754\",\r\n        \"assignedToUserID\": 0,\r\n        \"listCcEmailIDs\": \"smurali@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2\r\n       \r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task - Completed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56465,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"Create New for testing\",\r\n        \"taskDetails\": \"Test create and update\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n       \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"597472\",\r\n     \r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"577754\",\r\n        \"assignedToUserID\": 0,\r\n        \"listCcEmailIDs\": \"smurali@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2\r\n       \r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReAssignTasks- Single Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstTaskIDs\": \"438843\",\r\n  \"assignedToUserID\": 613412,\r\n  \"assignedToEmailID\": \"kkanagaraj@jcrinc.com\",\r\n   \"ccUserIDs\": \"279324\",\r\n  \"ccEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n  \"dueDate\": \"09/27/2023\",\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"updatedByUserID\": 220956,\r\n   \"skipItemAssociated\": true,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReAssignTasks - Multiple Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var res = pm.response.json();\r",
											"console.log(res.payload.createdTaskIds)\r",
											"\r",
											"   pm.test(\"Verify \" +  res.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(res.payload.createdTaskIds).to.exist\r",
											"pm.expect(res.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstTaskIDs\": \"438817,438818,438819\",\r\n  \"assignedToUserID\": 613412,\r\n  \"assignedToEmailID\": \"kkanagaraj@jcrinc.com\",\r\n   \"ccUserIDs\": \"279324\",\r\n  \"ccEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n  \"dueDate\": \"09/27/2023\",\r\n  \"siteID\":  {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"updatedByUserID\": 220956,\r\n   \"skipItemAssociated\": true,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"08/27/2023\",\r\n    \"epTextID\": 56464,\r\n    \"taskTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetUsersForBrowserPopup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"\r",
											"    pm.test(\"Verify ALL fullName\",function()\r",
											"{\r",
											"\r",
											"console.log(\"fullName is\",jsonData.payload[i].fullName)\r",
											" pm.expect(jsonData.payload[i].fullName).to.includes(\"k\")\r",
											"})\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersForBrowserPopup?siteId= {{Normal_SiteID}}&searchString=k",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersForBrowserPopup"
									],
									"query": [
										{
											"key": "siteId",
											"value": " {{Normal_SiteID}}"
										},
										{
											"key": "searchString",
											"value": "k"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId= {{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": " {{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskIds}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskIds}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AccessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Automation",
					"item": [
						{
							"name": "Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Create Tasks\", function () {\r",
											"pm.environment.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{MockSurvey_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"{{KamalID}}\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"{{DivakarID}}\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Get & Delete all Tasks\", function () {\r",
											"    pm.environment.set(\"TaskCount\", jsonData.payload.taskList.length);\r",
											"\r",
											"    console.log(jsonData.payload.taskList.length);\r",
											"    for (i = 0; i < jsonData.payload.taskList.length; i++) {\r",
											"\r",
											"        console.log(\"taskID is\", jsonData.payload.taskList[i].taskID)\r",
											"\r",
											"        pm.environment.set(\"createdTaskIds\", jsonData.payload.taskList[i].taskID);\r",
											"\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Retrieve the taskList from the response\r",
											"var taskList = pm.response.json().payload.taskList;\r",
											"\r",
											"// Create an array to store the taskIDs\r",
											"var taskIDs = [];\r",
											"\r",
											"// Iterate over the taskList and extract the taskID\r",
											"taskList.forEach(function (task) {\r",
											"    taskIDs.push(task.taskID);\r",
											"});\r",
											"\r",
											"// Set the environment variable with the taskIDs\r",
											"pm.environment.set(\"createdTaskIds\", taskIDs.join(','));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"08/27/2023\",\r\n    \"epTextID\": 56464,\r\n    \"taskTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"let res= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",res);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskIds}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Create Tasks\", function () {\r",
											"pm.environment.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": \"{{KamalID}}\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"{{DivakarID}}\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,\r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Resend Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify status\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(true);\r",
											"     pm.expect(jsonData.success).to.eql(true);\r",
											"     pm.expect(jsonData.errors).to.eql(null);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"taskIDs\": \"{{createdTaskIds}}\",\r\n  \"skipItemAssociated\": false,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/Resendtasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"Resendtasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Create taskName\", function () {\r",
											"    pm.environment.set(\"taskName\", jsonData.payload.taskDetail.taskName);\r",
											"    pm.environment.set(\"taskID\", jsonData.payload.taskDetail.taskID);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"// Retrieve the saved \"createdTaskIds\" value from the environment\r",
											"pm.test(\"Check 'createdTaskIds' from environment is equal to 'taskID'\", function () {\r",
											"    var createdTaskIds = pm.environment.get(\"createdTaskIds\");\r",
											"    var taskID = jsonData.payload.taskDetail.taskID;\r",
											"\r",
											"    pm.expect(createdTaskIds).to.equal(String(taskID));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"let res= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",res);\r",
											"\r",
											"pm.test(\"Verify createdTaskIds\",function()\r",
											"{\r",
											"    pm.expect(res.payload.createdTaskIds).to.eql(pm.environment.get(\"createdTaskIds\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var taskName=pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.collectionVariables.set('taskName',taskName);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n       \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskIds}},\r\n        \"taskName\": \"{{taskName}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"10/06/2022\",\r\n        \"assignedByUserID\": 220956,\r\n        \"dueDate\": \"09/09/2023\",\r\n        \"reminderEmailRequired\":true,\r\n        \"skipItemAssociated\": false,\r\n\r\n        \"listUsers\": null,\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"Dyuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": \"578215\"\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-Check(GetTaskAndUserDetails)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"let res= pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify Updated Data's\",function()\r",
											"{\r",
											"    pm.expect(res.payload.taskDetail.taskName).to.eql(pm.environment.get(\"taskName\"));\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ReCheck- Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let res= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",res);\r",
											"\r",
											"\r",
											"console.log(\"1st taskName is:-\",res.payload.taskList[0].taskName);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"08/27/2023\",\r\n    \"epTextID\": 56464,\r\n    \"taskTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "ReAssignTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"lstTaskIDs\": \"{{createdTaskIds}}\",\r\n  \"assignedToUserID\": {{KamalID}},\r\n  \"assignedToEmailID\": \"kkanagaraj@jcrinc.com\",\r\n  \"ccUserIDs\": \"279324,577754\",\r\n  \"ccEmailIDs\": \"DYuvaraj@jcrinc.com,smurali@jcrinc.com\",\r\n  \"dueDate\": \"09/27/2022\",\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"updatedByUserID\": {{KamalID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-Check(GetTaskAndUserDetails)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"pm.test(\"Verify assignedToUserID\",function()\r",
											"{\r",
											"\r",
											"console.log(pm.environment.get(\"assignedToUserID\"))\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{createdTaskIds}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": "{{createdTaskIds}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ReCheck- Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify hasTask\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.statusFlags.hasTask).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"08/27/2023\",\r\n    \"epTextID\": 56464,\r\n    \"taskTypeId\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-Check(GetTaskAndUserDetails)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{AccessToken}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid Site- GetUsersForBrowserPopup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersForBrowserPopup?siteId=0&searchString=k",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersForBrowserPopup"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "searchString",
											"value": "k"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID-Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"taskList should be Empty\", function() {\r",
											"  var jsonData = pm.response.json();\r",
											" \r",
											"pm.expect(jsonData.payload.taskList).length(0)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 5586,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetAMPTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetAMPTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epTextiD-Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"taskList should be Empty\", function() {\r",
											"  var jsonData = pm.response.json();\r",
											" \r",
											"pm.expect(jsonData.payload.taskList).length(0)\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 5464,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetAMPTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetAMPTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid dueDate-Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464\r\n\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetAMPTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetAMPTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid tasksID-DeleteTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds=",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"DeleteTasks"
									],
									"query": [
										{
											"key": "taskIds",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId=&programId=2&taskId=380753&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": ""
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "380753"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=&taskId=380753&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": ""
										},
										{
											"key": "taskId",
											"value": "380753"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid taskId- GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId=84747474&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "84747474"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardEffBeginDate- GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId=380753&standardEffBeginDate=",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "380753"
										},
										{
											"key": "standardEffBeginDate",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidURL- ReAssignTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lstTaskIDs\": \"380730\",\r\n    \"assignedToUserID\": 597472,\r\n    \"ccUserIDs\": \"85,291465\",\r\n    \"dueDate\": \"09/10/2022\",\r\n    \"siteID\": 685,\r\n    \"programID\": 3570,\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Added More than one User assignedToUserID- ReAssignTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lstTaskIDs\": \"380730\",\r\n    \"assignedToUserID\": 1234567,\r\n    \"ccUserIDs\": \"85291465,77,7\",\r\n    \"dueDate\": \"09/10/2022\",\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "AlphaNumeric Values-ReAssignTasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lstTaskIDs\": \"12,34Error678,9&&\",\r\n    \"assignedToUserID\": 8,\r\n    \"ccUserIDs\": \"8,291465\",\r\n    \"dueDate\": \"09/10/2022\",\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 7777,\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ReAssignTasks"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-TASK EMAIL'S",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Create Task- Single User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"console.log(\"taskID is:-\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"\r",
											"pm.environment.set(\"createdTaskIds\", jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"console.log(jsonData.createdTaskIds)\r",
											"\r",
											"     pm.test(\"Verify \" +  jsonData.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.exist\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2022\",\r\n        \"reminderEmailRequired\": true,\r\n\r\n        \"listUsers\": \"578215\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com;\",\r\n\r\n         \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTaskAndUserDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify taskID\",function()\r",
											"{\r",
											"    console.log(\"epLinkDocumentID is\",jsonData.payload.taskDetail.taskID);\r",
											"\r",
											"    pm.expect(jsonData.payload.taskDetail.taskID).to.eql(parseInt(pm.environment.get(\"createdTaskIds\")));\r",
											"\r",
											"   \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{createdTaskIds}}&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskAndUserDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "taskId",
											"value": "{{createdTaskIds}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task- Single User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",jsonData);\r",
											"\r",
											"console.log(\"taskID is:-\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"taskID\", jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"console.log(jsonData.createdTaskIds)\r",
											"\r",
											"     pm.test(\"Verify \" +  jsonData.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.exist\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n       \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": {{createdTaskIds}},\r\n        \"taskName\": \"{{$randomBankAccount}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2022\",\r\n        \"reminderEmailRequired\": true,\r\n\r\n        \"listUsers\": null,\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n\r\n        \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 613412,\r\n        \"createdByUserID\": 613412,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 1,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Task -Multiple User TO Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Create & Delete Task -Multiple User TO\", function () {\r",
											"pm.environment.set(\"createdTaskIds\",jsonData.payload.createdTaskIds);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"});\r",
											"\r",
											"console.log(jsonData.createdTaskIds)\r",
											"\r",
											"     pm.test(\"Verify \" +  jsonData.payload.createdTaskIds + \" does not display null \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.exist\r",
											"pm.expect(jsonData.payload.createdTaskIds).to.not.be.null\r",
											"\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userTask\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"epTextID\": 56464,\r\n        \"taskID\": 0,\r\n        \"taskName\": \"{{$randomJobTitle}}\",\r\n        \"taskDetails\": \"{{$randomPhrase}}\",\r\n        \"taskStatus\": 1,\r\n        \"assignedDate\": \"09/06/2022\",\r\n        \"assignedByUserID\": {{KamalID}},\r\n        \"dueDate\": \"09/09/2022\",\r\n        \"reminderEmailRequired\": true,\r\n\r\n        \"listUsers\": \"577754,578215\",\r\n        \"listToEmailIDs\": \"smurali@jcrinc.com;kkanagaraj@jcrinc.com;\",\r\n\r\n         \"ccUserIDs\": \"279324\",\r\n        \"listCcEmailIDs\": \"DYuvaraj@jcrinc.com\",\r\n\r\n\r\n        \"updatedByUserID\": 597472,\r\n        \"createdByUserID\": 597472,\r\n        \"tracerCustomID\": 0,\r\n        \"tracerResponseID\": 0,\r\n        \"tracerQuestionID\": 0,\r\n        \"tracerQuestionAnswerID\": 0,\r\n        \"cmsStandardID\": 0,       \r\n        \"taskResolution\": null,\r\n        \"completeDate\": null,\r\n        \"taskTypeID\": 2,\r\n        \"assignedToUserID\": 0\r\n    },\r\n    \"lstUserEmailsTo\": null,\r\n    \"lstUserEmailsCc\": null,\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 597472\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"UpdateUserTask"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ORGANIZATION DOCUMENTATION",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Create Organization Findings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											"pm.environment.set('Description',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Organization Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.epDocuments.epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"hcoid\": 337843,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"epid\": 54649,\r\n  \"documentationTypeID\": 1,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"isOtherFindings\": false,\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isSiteEST\": false,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check History Org Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload[0].epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload[0].epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentationHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Plan Of Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											"pm.environment.set('Description',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify poaFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.poaFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 2,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Plan Of Action",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.epDocuments.epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"hcoid\": 337843,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"epid\": 54649,\r\n  \"documentationTypeID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"isOtherFindings\": false,\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isSiteEST\": false,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check History POA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload[0].epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload[0].epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 2,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentationHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Sustainment Plan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											"pm.environment.set('Description',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify mosFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.mosFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 3,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Sustainment Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.epDocuments.epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"hcoid\": 337843,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"epid\": 54649,\r\n  \"documentationTypeID\": 3,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"isOtherFindings\": false,\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isSiteEST\": false,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check History SP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload[0].epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload[0].epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 3,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentationHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Internal Notes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											"pm.environment.set('Description',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgNotesFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgNotesFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 4,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Internal Notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.epDocuments.epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"hcoid\": 337843,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"epid\": 54649,\r\n  \"documentationTypeID\": 4,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"isOtherFindings\": false,\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isSiteEST\": false,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check History IN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload[0].epDocumentationText);\r",
											"\r",
											"pm.test(\"Verify epDocumentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload[0].epDocumentationText).to.eql(pm.environment.get(\"Description\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 4,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentationHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Site Mock Survey Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.epDocuments);\r",
											"\r",
											"pm.test(\"Verify epDocuments\",function()\r",
											"{\r",
											"    pm.expect(res.payload.epDocuments).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"epTextID\": 56464,\r\n    \"mockSurveyID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"corpScore\": \"string\",\r\n    \"cycleID\": 37,\r\n    \"isOtherFindings\": true,\r\n    \"mockSurveyDocumentationID\": 0,\r\n    \"findings\": \"string\",\r\n    \"userID\": 58742,\r\n    \"scoredBy\": \"string\",\r\n    \"updatedBy\": \"string\",\r\n    \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"scoreID\": 0,\r\n    \"scoreName\": \"string\",\r\n    \"building\": \"string\",\r\n    \"campus\": \"string\",\r\n    \"department\": \"string\",\r\n    \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"safer\": \"string\",\r\n    \"foundBy\": \"string\",\r\n    \"documentationDetails\": \"string\",\r\n    \"documentationTypeID\": 1,\r\n    \"tab\": 1,\r\n    \"organizationDocumentationDto\": {\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"certificationItemID\": 0,\r\n        \"epTextID\": 56464,\r\n        \"documentationTypeID\": 2,\r\n        \"epDocumentationID\": 0,\r\n        \"standardEffBeginDate\": \"07/01/2022\",\r\n        \"epDocumentationText\": \"string\",\r\n        \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n        \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n        \"updatedBy\": \"string\",\r\n        \"userID\": 597472,\r\n        \"role\": \"string\",\r\n        \"userEmail\": \"string\",\r\n        \"isOtherFindings\": false,\r\n        \"chapterID\": 0,\r\n        \"standardTextID\": 0,\r\n        \"epUserRoleID\": 3,\r\n        \"epDocumentationTextNoHTML\": \"string\",\r\n        \"roleTypeID\": 0,\r\n        \"corpScore\": \"string\",\r\n        \"mockSurveyStatusID\": 0\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Mock Survey Recommendations",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 2,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 2,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": false,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Other Survey Findings",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 3,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 2,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": true,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Organization Findings",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 4,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 2,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": false,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Plan of Action",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 5,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 2,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": false,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Sustainment Plan",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 6,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 3,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": false,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get MS Internal Notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"epTextID\": 56464,\r\n  \"mockSurveyID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"corpScore\": \"string\",\r\n  \"cycleID\": 37,\r\n  \"isOtherFindings\": true,\r\n  \"mockSurveyDocumentationID\": 0,\r\n  \"findings\": \"string\",\r\n  \"userID\": 597472,\r\n  \"scoredBy\": \"string\",\r\n  \"updatedBy\": \"string\",\r\n  \"scoreDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"scoreID\": 0,\r\n  \"scoreName\": \"string\",\r\n  \"building\": \"string\",\r\n  \"campus\": \"string\",\r\n  \"department\": \"string\",\r\n  \"updateDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"documentationDate\": \"2022-08-03T01:13:37.647Z\",\r\n  \"safer\": \"string\",\r\n  \"foundBy\": \"string\",\r\n  \"documentationDetails\": \"string\",\r\n  \"documentationTypeID\": 1,\r\n  \"tab\": 7,\r\n  \"organizationDocumentationDto\": {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"documentationTypeID\": 4,\r\n    \"epDocumentationID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"epDocumentationText\": \"string\",\r\n    \"compliantDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"createDate\": \"2022-08-03T01:13:37.647Z\",\r\n    \"updatedBy\": \"string\",\r\n    \"userID\": 85,\r\n    \"role\": \"string\",\r\n    \"userEmail\": \"string\",\r\n    \"isOtherFindings\": false,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"epDocumentationTextNoHTML\": \"string\",\r\n    \"roleTypeID\": 0,\r\n    \"corpScore\": \"string\",\r\n    \"mockSurveyStatusID\": 0\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMSOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMSOrganizationDocumentation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									" var jsonData = pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET CYCLES",
			"item": [
				{
					"name": "Get Cycles- Katalon Test Site 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"const jsonData= pm.response.json();\r",
									"pm.test(\"success should be TRUE\", function() {\r",
									" console.log(jsonData.success)\r",
									" pm.expect(jsonData.success).to.eql(true)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"errors should be null\", function() {\r",
									" console.log(jsonData.errors)\r",
									" pm.expect(jsonData.errors).to.eql(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Json Count should be 3\", function () {\r",
									" console.log(jsonData)\r",
									"var JsonCount  = Object.keys(jsonData).length;\r",
									"console.log(JsonCount)\r",
									"pm.expect(JsonCount).to.eql(3);\r",
									"                                      \r",
									"});\r",
									"pm.test(\"No Duplicate display StandardEffBeginDate\", function() {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
									"    if (!arr.includes(b.displayStandardEffBeginDate)) {\r",
									"      arr.push(b.displayStandardEffBeginDate);\r",
									"    }\r",
									"    return arr;\r",
									"  }, []).length).to.eql(jsonData.payload.length);\r",
									"});\r",
									"\r",
									"/*\r",
									"pm.test(\"Verify all cycles display that per the siteID with standardEffBeginDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"pm.expect(jsonData.payload[0].cycleTypeId).to.eql(1368)\r",
									"pm.expect(jsonData.payload[1].cycleTypeId).to.eql(1333)\r",
									"pm.expect(jsonData.payload[2].cycleTypeId).to.eql(1318)\r",
									"\r",
									"pm.expect(jsonData.payload[0].cycleID).to.eql(39)\r",
									"pm.expect(jsonData.payload[1].cycleID).to.eql(38)\r",
									"pm.expect(jsonData.payload[2].cycleID).to.eql(37)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{BaseURL}}/standards/api/Standard/GetCycles?siteId={{Normal_SiteID}}&productId=1&standardEffBeginDate={{standardEffBegindate}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"standards",
								"api",
								"Standard",
								"GetCycles"
							],
							"query": [
								{
									"key": "siteId",
									"value": "{{Normal_SiteID}}"
								},
								{
									"key": "productId",
									"value": "1"
								},
								{
									"key": "standardEffBeginDate",
									"value": "{{standardEffBegindate}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status Message is OK\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "GET USER SITES",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Getting site List for KKanagaraj@jcrinc.com",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t- pa@katsite.org\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to \r",
											"/*\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Site displays and 1st order -  Sitename- Indian Health Service, Pawnee  Indian Health Center \", function () {\r",
											"    pm.expect(jsonData.payload[0].siteName).to.eql('Indian Health Service, Pawnee  Indian Health Center');\r",
											"\r",
											"     pm.expect(jsonData.payload[0].isESTEnable).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 2nd order -  Sitename- MOCK 3 - CO Testing Only \", function () {\r",
											"    pm.expect(jsonData.payload[1].siteName).to.eql('MOCK 3 - CO Testing Only');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 3rd order -  Sitename- Katalon Test Site 1\", function () {\r",
											"    pm.expect(jsonData.payload[2].siteName).to.eql('Katalon Test Site 1');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify Site displays and 34th order -  Sitename- Corporate Test Site A\", function () {\r",
											"    pm.expect(jsonData.payload[3].siteName).to.eql('Corporate Test Site A');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 5th order -  Sitename- Corporate Test Site B\", function () {\r",
											"    pm.expect(jsonData.payload[4].siteName).to.eql('Corporate Test Site B');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 6th order -  Sitename- Jill Test Site\", function () {\r",
											"    pm.expect(jsonData.payload[5].siteName).to.eql('Jill Test Site');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 7th order -  Sitename- Katalon Content Site 3\", function () {\r",
											"    pm.expect(jsonData.payload[6].siteName).to.eql('Katalon Content Site 3');\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Site displays and 8th order -  Sitename- Katalon Site Two\", function () {\r",
											"    pm.expect(jsonData.payload[7].siteName).to.eql('Katalon Site Two');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No Duplicate SiteNames\", function() {\r",
											"  var jsonData = pm.response.json();\r",
											"  pm.expect(jsonData.payload.reduce(function(arr, b) {\r",
											"    if (!arr.includes(b.siteName)) {\r",
											"      arr.push(b.siteName);\r",
											"    }\r",
											"    return arr;\r",
											"  }, []).length).to.eql(jsonData.payload.length);\r",
											"});\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].siteID \r",
											"+ \" and \" + jsonData.payload[i].siteName\r",
											"+ \" does not display null \", function () {\r",
											"\r",
											"console.log(jsonData.payload[i].siteID)\r",
											"console.log(jsonData.payload[i].siteName)\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload[i].siteName).to.exist\r",
											"pm.expect(jsonData.payload[i].siteName).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].siteID).to.exist\r",
											"pm.expect(jsonData.payload[i].siteID).to.not.be.null\r",
											"\r",
											"\r",
											"})\r",
											"}\r",
											"\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/UserSites",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"UserSites"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify 400 Header Host not checked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to Tracers, it should not\r",
											"// display\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"host": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/UserSites?userID=359843",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"UserSites"
									],
									"query": [
										{
											"key": "userID",
											"value": "359843"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify 405 Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// User ID = 337506\t\r",
											"//User ID = 359843 - sshiekh@jcrinc.com \r",
											"// This API will get all the sites within Tracers and AMP Page, so if sshiekh has extra site on Portal which doesn't have access to Tracers, it should not\r",
											"// display\r",
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/Site/UserSites?userID=359843",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"Site",
										"UserSites"
									],
									"query": [
										{
											"key": "userID",
											"value": "359843"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET WORKSHEETS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Get Worksheets - Laboratory ProgramID = 21",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function () {\r",
											"    console.log(jsonData.success)\r",
											"    pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function () {\r",
											"    console.log(jsonData.errors)\r",
											"    pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											"    console.log(jsonData)\r",
											"    var JsonCount = Object.keys(jsonData).length;\r",
											"    console.log(JsonCount)\r",
											"    pm.expect(JsonCount).to.eql(3);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"fileStreamID should be a string\", function () {\r",
											"    jsonData.payload.forEach(function (worksheet) {\r",
											"        console.log(worksheet.fileStreamID);\r",
											"        pm.expect(worksheet.fileStreamID).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetWorksheets?productId=1&programId=21&chapterId=7&fileTypeId=2&standardEffBeginDate={{standardEffBeginDate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "21"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBeginDate}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Worksheets - Nursing Care Center ProgramID = 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function () {\r",
											"    console.log(jsonData.success)\r",
											"    pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function () {\r",
											"    console.log(jsonData.errors)\r",
											"    pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											"    console.log(jsonData)\r",
											"    var JsonCount = Object.keys(jsonData).length;\r",
											"    console.log(JsonCount)\r",
											"    pm.expect(JsonCount).to.eql(3);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"fileStreamID should be a string\", function () {\r",
											"    jsonData.payload.forEach(function (worksheet) {\r",
											"        console.log(worksheet.fileStreamID);\r",
											"        pm.expect(worksheet.fileStreamID).to.be.a('string');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/GetWorksheets?productId=1&programId=21&chapterId=7&fileTypeId=2&standardEffBeginDate={{standardEffBeginDate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "21"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBeginDate}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify -Invalid HTTP Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=1&programId=5&chapterId=7&fileTypeId=2&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "5"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Bad Request no Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?=",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=1&programId=89789&chapterId=7&fileTypeId=2&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "89789"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Product ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=234234234&programId=5&chapterId=7&fileTypeId=2&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "234234234"
										},
										{
											"key": "programId",
											"value": "5"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid Chapter ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=1&programId=5&chapterId=7897&fileTypeId=2&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "5"
										},
										{
											"key": "chapterId",
											"value": "7897"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid File Type ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=1&programId=5&chapterId=7&fileTypeId=878&standardEffBeginDate=07%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "5"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "878"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Standard Eff Begin Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetWorksheets?productId=1&programId=5&chapterId=7&fileTypeId=2&standardEffBeginDate=02%2F30%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetWorksheets"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "5"
										},
										{
											"key": "chapterId",
											"value": "7"
										},
										{
											"key": "fileTypeId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "02%2F30%2F2022"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET RELATED LINKS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "Verify APR Chapter ID=23",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"   {\r",
															"            \"relatedInformationID\": 1,\r",
															"            \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
															"            \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
															"            \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
															"        },\r",
															"        {\r",
															"            \"relatedInformationID\": 2,\r",
															"            \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
															"            \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
															"            \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
															"        },\r",
															"        {\r",
															"            \"relatedInformationID\": 22,\r",
															"            \"linkDisplayText\": \"Hospital Accreditation Program\",\r",
															"            \"linkUrl\": \"http://www.jointcommission.org/accreditation/hospitals.aspx\",\r",
															"            \"linkDescription\": \"Find the latest news about hospital accreditation as well as information about processes, requirements, publicity, and more.\"\r",
															"        },\r",
															"        {\r",
															"            \"relatedInformationID\": 23,\r",
															"            \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
															"            \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
															"            \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=58&cycleId={{CycleID}}s&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}s"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 -GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - GetRelatedLinks",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=23&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Behavioral Health and Human Services",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CTS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=71&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "71"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HRM Chapter ID=86- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=86&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "86"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Critical Access Hospital",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=57&&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": null,
															"value": null
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=69&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Home Care",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=22&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Laboratory",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DC Chapter ID=60- Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=21&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Disease-Specific Care",
									"item": [
										{
											"name": "Verify DSCT Chapter ID=65 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=67&chapterId=65&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "65"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPM Chapter ID=66 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=67&chapterId=66&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "66"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPR Chapter ID=62- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=67&chapterId=62&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "62"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSSE Chapter ID=64 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=67&chapterId=64&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "64"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSDF Chapter ID=63 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=67&chapterId=63&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "63"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Advanced Certification in Perinatal Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6339&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPM Chapter ID=1555 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6339&chapterId=1555&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1555"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCPM Chapter ID=1557- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6339&chapterId=1557&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1557"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCIM Chapter ID=1554 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6339&chapterId=1554&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1554"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCPI Chapter ID=1556 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6339&chapterId=1556&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1556"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Comprehensive Cardiac Center",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3570&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCM Chapter ID=100 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3570&chapterId=100&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "100"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCIM Chapter ID=102- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3570&chapterId=101&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "101"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCPI Chapter ID=103- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3570&chapterId=102&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "102"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Health Care Staffing Services",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=1341&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSLD Chapter ID=67 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=1341&chapterId=67&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "67"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSHR Chapter ID=68- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=1341&chapterId=68&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "68"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSIM Chapter ID=69- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=1341&chapterId=69&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "69"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSPM  Chapter ID=70- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=1341&chapterId=70&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "70"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Integrated Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3485&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICPA Chapter ID=87- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3485&chapterId=87&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "87"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICPC Chapter ID=88- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3485&chapterId=88&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "88"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICQS Chapter ID=89- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3485&chapterId=89&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "89"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Medication Compounding",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCGR Chapter ID=104- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=104&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "104"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCED Chapter ID=105- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=105&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "105"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCS Chapter ID=106- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=106&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "106"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCN Chapter ID=108- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=107&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "107"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICQS Chapter ID=89- Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=108&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "108"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Palliative Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPM Chapter ID=75- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2183&chapterId=75&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "75"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPC Chapter ID=73- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2183&chapterId=73&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "73"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCIM Chapter ID=72- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2183&chapterId=72&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "72"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPI Chapter ID=74- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2183&chapterId=74&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "74"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Perinatal Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3572&chapterId=61&c&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "c",
															"value": null
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPM Chapter ID=84- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3470&chapterId=84&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "84"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPC Chapter ID=85- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3470&chapterId=85&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "85"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNIM Chapter ID=82- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3470&chapterId=82&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "82"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPI Chapter ID=83 Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=3470&chapterId=83&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "83"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Verification",
							"item": [
								{
									"name": "Maternal Levels of Care",
									"item": [
										{
											"name": "Verify VPR Chapter ID=1548 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].linkDisplayText \r",
															"+ \" and \" + jsonData.payload[i].linkUrl\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].linkDisplayText)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDisplayText).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.exist\r",
															"pm.expect(jsonData.payload[i].linkUrl).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.exist\r",
															"pm.expect(jsonData.payload[i].linkDescription).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=6326&chapterId=1548&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetRelatedLinks"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6326"
														},
														{
															"key": "chapterId",
															"value": "1548"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "WithOut Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid chapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=1&programId=2&chapterId=0000000000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "0000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=1&programId=000000&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "000000"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid productID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=000000&programId=2&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "000000"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CHECK EP ASSIGNMENT",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "CheckSiteEPAssignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Verify Flags\",function()\r",
											"{\r",
											"   \r",
											"\r",
											"    pm.expect(jsonData.payload.indvAssignmentFlag).to.eql(parseInt(1));\r",
											" pm.expect(jsonData.payload.primaryAssignmentFlag).to.eql(parseInt(1));\r",
											"   \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/CheckSiteEPAssignment?&siteId={{Normal_SiteID}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"CheckSiteEPAssignment"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify -Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/CheckSiteEPAssignment?siteId={{siteId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"CheckSiteEPAssignment"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Site- CheckSiteEPAssignment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"success should be False\", function () {\r",
											"    console.log(jsonData.success)\r",
											"    pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											"    console.log(jsonData)\r",
											"    var JsonCount = Object.keys(jsonData).length;\r",
											"    console.log(JsonCount)\r",
											"    pm.expect(JsonCount).to.eql(3);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Error code should be 403\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errors[0].errorCode).to.eql(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/CheckSiteEPAssignment?&siteId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"CheckSiteEPAssignment"
									],
									"query": [
										{
											"key": null,
											"value": null
										},
										{
											"key": "siteId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "UPDATE USER PREFERENCE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "POST Update User Preferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"    pm.expect(res.errors).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/UpdateUserPreference?userId={{KamalID}}&siteId={{Normal_SiteID}}&eProductId=1&programId=2&preferenceId=4&preferenceValue=1&active=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"UpdateUserPreference"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{KamalID}}"
										},
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "eProductId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "preferenceId",
											"value": "4"
										},
										{
											"key": "preferenceValue",
											"value": "1"
										},
										{
											"key": "active",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify -Without Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/UpdateUserPreference?userId=&siteId=&eProductId=&programId=&preferenceId=4&preferenceValue=1&active=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"UpdateUserPreference"
									],
									"query": [
										{
											"key": "userId",
											"value": ""
										},
										{
											"key": "siteId",
											"value": ""
										},
										{
											"key": "eProductId",
											"value": ""
										},
										{
											"key": "programId",
											"value": ""
										},
										{
											"key": "preferenceId",
											"value": "4"
										},
										{
											"key": "preferenceValue",
											"value": "1"
										},
										{
											"key": "active",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/UpdateUserPreference?userId=&siteId=&eProductId=&programId=&preferenceId=4&preferenceValue=1&active=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"UpdateUserPreference"
									],
									"query": [
										{
											"key": "userId",
											"value": ""
										},
										{
											"key": "siteId",
											"value": ""
										},
										{
											"key": "eProductId",
											"value": ""
										},
										{
											"key": "programId",
											"value": ""
										},
										{
											"key": "preferenceId",
											"value": "4"
										},
										{
											"key": "preferenceValue",
											"value": "1"
										},
										{
											"key": "active",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Data- Update User Preferences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"    pm.expect(res.errors).to.eql(null);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/UpdateUserPreference?userId=0&siteId=0&eProductId=1&programId=2&preferenceId=4&preferenceValue=1&active=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"UpdateUserPreference"
									],
									"query": [
										{
											"key": "userId",
											"value": "0"
										},
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "eProductId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "preferenceId",
											"value": "4"
										},
										{
											"key": "preferenceValue",
											"value": "1"
										},
										{
											"key": "active",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "UPDATE EP SCORE",
			"item": [
				{
					"name": "BUSINESS SCENARIOS",
					"item": [
						{
							"name": "Individual Scored By Staff Member",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 99,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\":0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 2,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 6,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1122,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"08/13/2022\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1122,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1123,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1221,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1222,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1223,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1321,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1322,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1323,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Preliminary Scored By Staff Member",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 99,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 2,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 6,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1122,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1123,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1221,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1222,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1223,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1321,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1322,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1323,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Final Scored By Program Admin/ Site Manager",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 99,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 2,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 6,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1122,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1123,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1221,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1222,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55085,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1223,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55088,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1321,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55367,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1322,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1323,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateEPScore"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const res = pm.response.json();",
									"",
									"pm.test(\"Verify Response as true\",function()",
									"{",
									"   pm.expect(res.payload).to.eql(true);",
									"    pm.expect(res.success).to.eql(true);",
									"    pm.expect(res.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "STATUS SCENARIOS",
					"item": [
						{
							"name": "InvalidsiteId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": null,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": 55122,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1323,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						},
						{
							"name": "InvalidScoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": null,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid EpTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 47,\r\n    \"standardTextID\": 30766,\r\n    \"epTextID\": null,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status Message is Bad Request\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});"
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-SERVICE PROFILE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital- programID-2",
							"item": [
								{
									"name": "GET Service Profile all Applicable EPs for Critical Access Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[i].standardLabel + \" and \" + jsonData.payload[i].epLabel + jsonData.payload[i].epText + \" does not display null \", function () {\r",
													"pm.expect(jsonData.payload[i].standardLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].standardLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].epLabel).to.exist\r",
													"pm.expect(jsonData.payload[i].epLabel).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].epText).to.exist\r",
													"pm.expect(jsonData.payload[i].epText).to.not.be.null\r",
													"    })\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"programID\": 2,\r\n\"serviceID\": 2172,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"epTextID\": 0,\r\n\"standardLabel\": \"string\",\r\n\"epLabel\": \"string\",\r\n\"epText\": \"string\",\r\n\"chapterSortOrder\": 0,\r\n\"standardTextSortOrder\": 0,\r\n\"epSortID\": 0,\r\n\"checkedEP\": 0\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetApplicableEPs",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"ServiceProfile",
												"GetApplicableEPs"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Service Profile Type by User ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"    pm.test(\"Verify \" +  jsonData.payload.profileName + \" does not display null \", function () {\r",
													"pm.expect(jsonData.payload.profileName).to.exist\r",
													"pm.expect(jsonData.payload.profileName).to.not.be.null\r",
													"\r",
													"    })\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n\"programID\": 2,\r\n\"userID\": 85,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"currentStandardEffBeginDate\": \"07/01/2022\",\r\n\"productID\": 1,\r\n\"serviceProfileType\": 0,\r\n\"profileName\": \"string\",\r\n\"lastUpdatedDate\": \"string\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTypeByUserID",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"ServiceProfile",
												"GetServiceProfileTypeByUserID"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Service Profile File",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"\r",
													"    pm.test(\"Verify \" +  jsonData.payload.fileDisplayText + \" and \" + jsonData.fileStreamID + \" and \" + jsonData.payload.filePath + \" does not display null \", function () {\r",
													"pm.expect(jsonData.payload.fileDisplayText).to.exist\r",
													"pm.expect(jsonData.payload.fileDisplayText).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.fileStreamID).to.exist\r",
													"pm.expect(jsonData.payload.fileStreamID).to.not.be.null\r",
													"\r",
													"pm.expect(jsonData.payload.filePath).to.exist\r",
													"pm.expect(jsonData.payload.filePath).to.not.be.null\r",
													"    })"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"fileManualID\": 0,\r\n\"fileDisplayText\": null,\r\n\"fileStreamID\":null,\r\n\"filePath\": null,\r\n\"programID\": 2,\r\n\"menuItemTypeID\": null,\r\n\"chapterID\": null,\r\n\"nonMedicareFlag\": true,\r\n\"sortID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"standardEffEndDate\": \"\",\r\n\"certificationItemID\": 0,\r\n\"eProductID\": 1\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileFile",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"ServiceProfile",
												"GetServiceProfileFile"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save Service profile-User Profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response as true\",function()\r",
													"{\r",
													"    pm.expect(res.payload).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": {{KamalID}},\r\n    \"standardEffBeginDate\": \"08/27/2023\",\r\n    \"serviceProfileTypeID\": 2,\r\n    \"serviceIDList\": \"2,2172,3291,2173,3290,3490\",\r\n    \"serviceProfileIxIDList\": \"3432,3068,3248\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/ServiceProfile/UpdateServiceProfileBySiteId",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"ServiceProfile",
												"UpdateServiceProfileBySiteId"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code",
					"item": [
						{
							"name": "Invalid programID- GET Service Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Invalid Program ID \", function () {\r",
											"pm.expect(jsonData.payload.additionalServices).to.eql([])\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"pm.expect(jsonData.payload.serviceProfileTree).to.eql([[]])\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n\r\n{\r\n  \"siteID\": 54586,\r\n  \"userID\": 0,\r\n  \"programID\": 0,\r\n  \"serviceProfileTypeID\": 2,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid URL - GET Service Profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"siteID\": 760,\r\n\"userID\": 85,\r\n\"programID\": null,\r\n\"serviceProfileTypeID\": 0,\r\n\"treeViewNumber\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTre",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTre"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GET Service Profile Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"siteID\": 760,\r\n\"userID\": 85,\r\n\"programID\": null,\r\n\"serviceProfileTypeID\": 0,\r\n\"treeViewNumber\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid serviceID- GET All Applicable EPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"programID\": 69,\r\n\"serviceID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"epTextID\": 0,\r\n\"standardLabel\": \"string\",\r\n\"epLabel\": \"string\",\r\n\"epText\": \"string\",\r\n\"chapterSortOrder\": 0,\r\n\"standardTextSortOrder\": 0,\r\n\"epSortID\": 0,\r\n\"checkedEP\": 0\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetApplicableEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetApplicableEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- GET All Applicable EPs Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"programID\": 0,\r\n\"serviceID\": 3262,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"epTextID\": 0,\r\n\"standardLabel\": \"string\",\r\n\"epLabel\": \"string\",\r\n\"epText\": \"string\",\r\n\"chapterSortOrder\": 0,\r\n\"standardTextSortOrder\": 0,\r\n\"epSortID\": 0,\r\n\"checkedEP\": 0\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetApplicableEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetApplicableEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid URL- GET All Applicable EPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"programID\": 69,\r\n\"serviceID\": 3262,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"epTextID\": 0,\r\n\"standardLabel\": \"string\",\r\n\"epLabel\": \"string\",\r\n\"epText\": \"string\",\r\n\"chapterSortOrder\": 0,\r\n\"standardTextSortOrder\": 0,\r\n\"epSortID\": 0,\r\n\"checkedEP\": 0\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetApplicableEP",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetApplicableEP"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GET All Applicable EPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"programID\": 69,\r\n\"serviceID\": 3262,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"epTextID\": 0,\r\n\"standardLabel\": \"string\",\r\n\"epLabel\": \"string\",\r\n\"epText\": \"string\",\r\n\"chapterSortOrder\": 0,\r\n\"standardTextSortOrder\": 0,\r\n\"epSortID\": 0,\r\n\"checkedEP\": 0\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetApplicableEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetApplicableEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid URL- Service Profile Type by User ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": 760,\r\n\"programID\": 2,\r\n\"userID\": 85,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"currentStandardEffBeginDate\": \"07/01/2022\",\r\n\"productID\": 1,\r\n\"serviceProfileType\": 0,\r\n\"profileName\": \"string\",\r\n\"lastUpdatedDate\": \"string\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTypeByUserI",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTypeByUserI"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- Service Profile Type by User ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": 760,\r\n\"programID\": 2,\r\n\"userID\": 85,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"currentStandardEffBeginDate\": \"07/01/2022\",\r\n\"productID\": 1,\r\n\"serviceProfileType\": 0,\r\n\"profileName\": \"string\",\r\n\"lastUpdatedDate\": \"string\"\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTypeByUserID",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTypeByUserID"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- Service Profile File",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fileManualID\": 0,\r\n\"fileDisplayText\": null,\r\n\"fileStreamID\":null,\r\n\"filePath\": null,\r\n\"programID\": 0,\r\n\"menuItemTypeID\": null,\r\n\"chapterID\": null,\r\n\"nonMedicareFlag\": true,\r\n\"sortID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"standardEffEndDate\": \"\",\r\n\"certificationItemID\": 0,\r\n\"eProductID\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileFile",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileFile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty programID- Service Profile File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fileManualID\": 0,\r\n\"fileDisplayText\": null,\r\n\"fileStreamID\":null,\r\n\"filePath\": null,\r\n\"programID\": null,\r\n\"menuItemTypeID\": null,\r\n\"chapterID\": null,\r\n\"nonMedicareFlag\": true,\r\n\"sortID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"standardEffEndDate\": \"\",\r\n\"certificationItemID\": 0,\r\n\"eProductID\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileFile",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileFile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid URL- Service Profile File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fileManualID\": 0,\r\n\"fileDisplayText\": null,\r\n\"fileStreamID\":null,\r\n\"filePath\": null,\r\n\"programID\": 2,\r\n\"menuItemTypeID\": null,\r\n\"chapterID\": null,\r\n\"nonMedicareFlag\": true,\r\n\"sortID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"standardEffEndDate\": \"\",\r\n\"certificationItemID\": 0,\r\n\"eProductID\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileFil",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileFil"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- Service Profile File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"fileManualID\": 0,\r\n\"fileDisplayText\": null,\r\n\"fileStreamID\":null,\r\n\"filePath\": null,\r\n\"programID\": 2,\r\n\"menuItemTypeID\": null,\r\n\"chapterID\": null,\r\n\"nonMedicareFlag\": true,\r\n\"sortID\": 0,\r\n\"standardEffBeginDate\": \"07/01/2022\",\r\n\"standardEffEndDate\": \"\",\r\n\"certificationItemID\": 0,\r\n\"eProductID\": 1\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileFile",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileFile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "revAMP - Business Scenario",
					"item": [
						{
							"name": "GET Service Profile- HOSPITAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[0].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Hospital as condition is OR and dependents as 3068\",function()\r",
											"{\r",
											"pm.expect(jsonData.payload.dependencyServices[0].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[0].condition).to.eql(\"or\")\r",
											"\r",
											"    pm.expect(jsonData.payload.dependencyServices[0].dependents[0]).to.eql(3068)\r",
											"});\r",
											"\r",
											"  \r",
											"pm.test(\"Verify Service Profile - dependencyServices for Hospital as isAddOn is FALSE and dependents are 2172,3291,2173,3290,3490,2\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[0].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[0].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[0].services[i].id);\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[0].id).to.eql(2172)\r",
											"      pm.expect(jsonData.payload.dependencyServices[0].services[1].id).to.eql(3291)\r",
											"       pm.expect(jsonData.payload.dependencyServices[0].services[2].id).to.eql(2173)\r",
											"        pm.expect(jsonData.payload.dependencyServices[0].services[3].id).to.eql(3290)\r",
											"         pm.expect(jsonData.payload.dependencyServices[0].services[4].id).to.eql(3490)\r",
											"          pm.expect(jsonData.payload.dependencyServices[0].services[5].id).to.eql(2)\r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Hospital as condition is AND and dependents as 3248\",function()\r",
											"{\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices[1].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[1].condition).to.eql(\"and\")\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].dependents[0]);\r",
											"    pm.expect(jsonData.payload.dependencyServices[1].dependents[0]).to.eql(3248)\r",
											"\r",
											"     console.log(jsonData.payload.dependencyServices[1].services.length);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Hospital as isAddOn is TRUE for 3068 and FALSE for 2173\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[1].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[1].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[1].services[i].id);\r",
											"\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[0].isAddOn).to.eql(true)\r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[1].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[0].id).to.eql(3068)\r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[1].id).to.eql(2173)\r",
											"      \r",
											"      \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 2,\r\n  \"serviceProfileTypeID\": 2,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- AMBULATORY",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[0].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Ambulatory as condition is OR and dependents as 2181\",function()\r",
											"{\r",
											"pm.expect(jsonData.payload.dependencyServices[0].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[0].condition).to.eql(\"or\")\r",
											"\r",
											"    pm.expect(jsonData.payload.dependencyServices[0].dependents[0]).to.eql(2181)\r",
											"});\r",
											"\r",
											"  \r",
											"pm.test(\"Verify Service Profile - dependencyServices for Ambulatory as isAddOn is FALSE and dependents are 2148,2194,2137,23\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[0].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[0].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[0].services[i].id);\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[0].id).to.eql(2148)\r",
											"      pm.expect(jsonData.payload.dependencyServices[0].services[1].id).to.eql(2194)\r",
											"       pm.expect(jsonData.payload.dependencyServices[0].services[2].id).to.eql(2137)\r",
											"        pm.expect(jsonData.payload.dependencyServices[0].services[3].id).to.eql(23)\r",
											"         \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Ambulatory as condition is OR and dependents as 3243\",function()\r",
											"{\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices[1].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[1].condition).to.eql(\"or\")\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].dependents[0]);\r",
											"    pm.expect(jsonData.payload.dependencyServices[1].dependents[0]).to.eql(3243)\r",
											"\r",
											"     console.log(jsonData.payload.dependencyServices[1].services.length);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Ambulatory as isAddOn is FALSE and services are 2149,2139.23 \",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[1].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[1].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[1].services[i].id);\r",
											"   \r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[0].id).to.eql(2149)\r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[1].id).to.eql(2139)\r",
											"       pm.expect(jsonData.payload.dependencyServices[1].services[2].id).to.eql(23)\r",
											"      \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 23,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Behavioral Health and Human Services",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[0].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Behavioral Health and Human Services as condition is OR and dependents as 17,3145,3146,2164,2163\",function()\r",
											"{\r",
											"pm.expect(jsonData.payload.dependencyServices[0].enable).to.eql(false)\r",
											"pm.expect(jsonData.payload.dependencyServices[0].condition).to.eql(\"or\")\r",
											"\r",
											"    pm.expect(jsonData.payload.dependencyServices[0].dependents[0]).to.eql(17,3145,3146,2164,2163)\r",
											"});\r",
											"\r",
											"  \r",
											"pm.test(\"Verify Service Profile - dependencyServices for Behavioral Health and Human Services as isAddOn is FALSE and dependents are 3118,3087 & 6\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[0].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[0].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[0].services[i].id);\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[0].id).to.eql(3118)\r",
											"      pm.expect(jsonData.payload.dependencyServices[0].services[1].id).to.eql(3087)\r",
											"       pm.expect(jsonData.payload.dependencyServices[0].services[2].id).to.eql(6313)\r",
											"  \r",
											"         \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Behavioral Health and Human Services as condition is OR and dependents as 3133,3134\",function()\r",
											"{\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices[1].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[1].condition).to.eql(\"or\")\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].dependents[0]);\r",
											"    pm.expect(jsonData.payload.dependencyServices[1].dependents[0]).to.eql(3132,3134)\r",
											"\r",
											"     console.log(jsonData.payload.dependencyServices[1].services.length);\r",
											"       pm.expect(jsonData.payload.dependencyServices[1].services[0].id).to.eql(3101)\r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[1].id).to.eql(3102)\r",
											"       pm.expect(jsonData.payload.dependencyServices[1].services[2].id).to.eql(3122)\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Behavioral Health and Human Services as isAddOn is FALSE and services are 6315,6317 & 6 \",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[1].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[1].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[1].services[i].id);\r",
											"   \r",
											"      pm.expect(jsonData.payload.dependencyServices[1].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[0].id).to.eql(3101)\r",
											"      pm.expect(jsonData.payload.dependencyServices[2].services[1].id).to.eql(3102)\r",
											"        pm.expect(jsonData.payload.dependencyServices[2].services[2].id).to.eql(3122)\r",
											"       \r",
											"      \r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 6,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Critical Access Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Critical Access Hospital should be Empty \", function () {\r",
											"\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 69,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile-Nursing Care Center",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Nursing Care Center should be Empty \", function () {\r",
											"\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 5,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Home Care",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[0].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Home Care as condition is OR and dependents as 2178\",function()\r",
											"{\r",
											"pm.expect(jsonData.payload.dependencyServices[0].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[0].condition).to.eql(\"or\")\r",
											"\r",
											"    pm.expect(jsonData.payload.dependencyServices[0].dependents[0]).to.eql(2178)\r",
											"});\r",
											"\r",
											"  \r",
											"pm.test(\"Verify Service Profile - dependencyServices for Home Care as isAddOn is FALSE and dependents are 2142,2127,2126,22\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[0].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[0].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[0].services[i].id);\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[0].services[0].id).to.eql(2142)\r",
											"      pm.expect(jsonData.payload.dependencyServices[0].services[1].id).to.eql(2127)\r",
											"       pm.expect(jsonData.payload.dependencyServices[0].services[2].id).to.eql(2126)\r",
											"        pm.expect(jsonData.payload.dependencyServices[0].services[3].id).to.eql(22)\r",
											"         \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].enable);\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Home Care as condition is OR and dependents as 3610\",function()\r",
											"{\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices[1].enable).to.eql(true)\r",
											"pm.expect(jsonData.payload.dependencyServices[1].condition).to.eql(\"or\")\r",
											"\r",
											"console.log(jsonData.payload.dependencyServices[1].dependents[0]);\r",
											"    pm.expect(jsonData.payload.dependencyServices[1].dependents[0]).to.eql(3610)\r",
											"\r",
											"     console.log(jsonData.payload.dependencyServices[1].services.length);\r",
											"}\r",
											");\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Home Care as isAddOn is FALSE and dependents are 6292,22\",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[1].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[1].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[1].services[i].id);\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[1].services[0].id).to.eql(6292)\r",
											"    \r",
											"        pm.expect(jsonData.payload.dependencyServices[1].services[1].id).to.eql(22)\r",
											"         \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Home Care as isAddOn is FALSE and services are 2143,9999,2152,2151,22 \",function()\r",
											"{\r",
											"for(i=0;i<jsonData.payload.dependencyServices[2].services.length;i++){\r",
											"    console.log(jsonData.payload.dependencyServices[2].services[i].isAddOn);\r",
											"     console.log(jsonData.payload.dependencyServices[2].services[i].id);\r",
											"   \r",
											"      pm.expect(jsonData.payload.dependencyServices[2].services[i].isAddOn).to.eql(false)\r",
											"     pm.expect(jsonData.payload.dependencyServices[2].services[0].id).to.eql(2143)\r",
											"      pm.expect(jsonData.payload.dependencyServices[2].services[1].id).to.eql(9999)\r",
											"       pm.expect(jsonData.payload.dependencyServices[2].services[2].id).to.eql(2152)\r",
											"        pm.expect(jsonData.payload.dependencyServices[2].services[3].id).to.eql(2151)\r",
											"         pm.expect(jsonData.payload.dependencyServices[2].services[4].id).to.eql(22)\r",
											"      \r",
											"\r",
											"}\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 22,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Assisted Living Community",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Assisted Living Community should be Empty \", function () {\r",
											"\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 6294,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Laboratory  should be Empty \", function () {\r",
											"\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 21,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Service Profile- Office Based Surgery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"  \r",
											"\r",
											"for(i=0;i<jsonData.payload.additionalServices.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.additionalServices[i].itemName + \" and \" + jsonData.payload.additionalServices[i].itemDisplayText +  \" does not display null \", function () {\r",
											" \r",
											"console.log(jsonData.payload.additionalServices[i].itemName)\r",
											"console.log(jsonData.payload.additionalServices[i].itemDisplayText)\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemName).to.not.be.null\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.exist\r",
											"pm.expect(jsonData.payload.additionalServices[i].itemDisplayText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"pm.test(\"Verify Service Profile - dependencyServices for Office Based Surgery should be Empty \", function () {\r",
											"\r",
											"pm.expect(jsonData.payload.dependencyServices).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"siteID\": {{Normal_SiteID}},\r\n  \"userID\": 0,\r\n  \"programID\": 68,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"treeViewNumber\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/ServiceProfile/GetServiceProfileTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"ServiceProfile",
										"GetServiceProfileTree"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "GET CHAPTER OVERVIEW",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=23&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "23"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Behavioral Health and Human Services",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CTS Chapter ID=71- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=71&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "71"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HRM Chapter ID=86 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=86&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "86"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Critical Access Hospital",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=57&&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": null,
															"value": null
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=69&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "69"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Home Care",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LS Chapter ID=44 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=44&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "44"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MM Chapter ID=22 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=22&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "22"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MS Chapter ID=14 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=14&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "14"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NR Chapter ID=15 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=15&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "15"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PC Chapter ID=57- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=57&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "57"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RC Chapter ID=51- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=51&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "51"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify RI Chapter ID=53 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=53&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "53"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=22&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "22"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Laboratory",
									"item": [
										{
											"name": "Verify APR Chapter ID=23 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DC Chapter ID=60- Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=23&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "23"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EC Chapter ID=54 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=54&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "54"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify EM Chapter ID=47 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=47&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "47"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HR Chapter ID=55 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=55&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "55"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IC Chapter ID=52 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=52&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "52"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify IM Chapter ID=56 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=56&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "56"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify LD Chapter ID=7 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=7&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "7"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify NPSG and UP Chapter ID=43 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=43&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "43"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PI Chapter ID=58- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=58&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "58"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify TS Chapter ID=49 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=49&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "49"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify WT Chapter ID=18 Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=21&chapterId=18&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "21"
														},
														{
															"key": "chapterId",
															"value": "18"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Disease-Specific Care",
									"item": [
										{
											"name": "Verify DSCT Chapter ID=65 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"    {\r",
															"            \"chapterName\": \"Clinical Information Management\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"Delivering or facilitating the delivery of health care is a complex endeavor that is highly dependent on the exchange of information. Over time, patients may receive a range of care in multiple settings from multiple practitioners. The goal of coordinating information across the continuum of care is to manage information so that care is maximized as well as improved. For this reason the disease-specific care program should understand its role within a health care delivery system that spans across settings, services, practitioners, and care levels. Because the continuum of care encompasses such a large scope of people and services, disease-specific care programs must maintain the integrity and security of their data and information as they compile and share it with others.<br/><br/>The standards in this chapter focus on the following:<br/>- Proactively gathering and sharing information across the continuum to coordinate care across settings and over time<br/>- Providing easy access to patient-related information<br/>- Preserving confidentiality of patient information<br/>- Maintaining data quality and integrity<br/>- Integrating and interpreting data from various sources<br/>- Using aggregate data to support the program's information needs and direction setting<br/><br/>Although efficiency may be improved by computerization and other technologies, the principles of good information management apply to all processes, whether paper based or electronic.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=67&chapterId=65&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "65"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPM Chapter ID=66 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=67&chapterId=66&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "66"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPR Chapter ID=62- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=67&chapterId=62&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "62"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSSE Chapter ID=64 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=67&chapterId=64&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "64"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSDF Chapter ID=63 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=67&chapterId=63&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "67"
														},
														{
															"key": "chapterId",
															"value": "63"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Advanced Certification in Perinatal Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"   {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"This chapter includes specific certification participation requirements (CPRs) that apply to the certification process and are required to maintain a certification award. These differ from review eligibility criteria in that the certification process may be initiated even when all CPRs have not yet been met. For an organization seeking certification for the first time, compliance with the CPRs is assessed during the initial review. For the certified program, compliance with these requirements is assessed throughout the certification cycle through on-site reviews, Evidence of Standards Compliance (ESC), and periodic updates of organization-specific data and information. Organizations are either compliant or not compliant with CPRs. When an organization does not comply with a CPR, the organization will be assigned a Requirement for Improvement (RFI) similar to noncompliance with a standard. However, refusal to permit performance of an unscheduled or unannounced for-cause review (CPR.03) or falsification of information (CPR.07) will immediately lead to Preliminary Denial of Certification. Any RFI can potentially impact the certification decision and follow-up requirements, as determined by established certification decision rules. Failure to resolve an RFI has the potential to lead to loss of certification.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6339&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify DSPM Chapter ID=1555 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6339&chapterId=1555&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1555"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCPM Chapter ID=1557- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6339&chapterId=1557&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1557"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCIM Chapter ID=1554 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6339&chapterId=1554&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1554"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ACPCPI Chapter ID=1556 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6339&chapterId=1556&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6339"
														},
														{
															"key": "chapterId",
															"value": "1556"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Comprehensive Cardiac Center",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"  {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"\",\r",
															"            \"sectionText\": \"No Chapter Overview Available\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3570&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCM Chapter ID=100 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3570&chapterId=100&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "100"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCIM Chapter ID=102- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3570&chapterId=101&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "101"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify CCCPI Chapter ID=103- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3570&chapterId=102&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3570"
														},
														{
															"key": "chapterId",
															"value": "102"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Health Care Staffing Services",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"  {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"This chapter includes specific requirements for participation in the certification process and for maintaining a certification award. These requirements differ from review eligibility criteria in that the certification process may be initiated even when all Certification Participation Requirements (CPRs) have not yet been met. For a health care staffing services (HCSS) firm seeking certification for the first time, compliance with the CPRs is assessed during the initial review. For the certified HCSS firm, compliance with these requirements is assessed throughout the certification cycle through review activity, Evidence of Standards Compliance, and periodic updates of staffing firm–specific data and information. HCSS firms are either compliant or not compliant with CPRs. When a firm does not comply with a CPR, the firm will be assigned a Requirement for Improvement (RFI) in the same context that noncompliance with a standard generates an RFI. However, refusal to permit performance of an unscheduled or unannounced for-cause review (CPR 3) or falsification of information (CPR 7) will immediately lead to a decision of Not Certified. All RFIs can impact the certification decision and follow-up requirements, as determined by established certification decision rules. Failure to resolve an RFI can ultimately lead to loss of certification.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=1341&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSLD Chapter ID=67 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"    {\r",
															"            \"chapterName\": \"Leadership\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"Leaders of the health care staffing services (HCSS) firm are responsible for all activities of the firm. Leaders plan, direct, coordinate, and improve services to respond to customer needs and improve patient safety and outcomes. An effective framework for supporting quality staffing services includes clearly defined leader roles, sound business practices, and risk management. Among the many responsibilities that leaders hold, leaders must set goals for the business as well as the staff, manage the HCSS firm’s performance improvement activities, and ensure that all legal and regulatory requirements are met.<br/><br/>Sound business practices are reflected in the HCSS firm’s operations, including establishing productive relationships with customers and staff, maintaining communication throughout the firm and with customers, and ensuring that the firm can respond quickly to issues that could potentially compromise customers' safe care and quality outcomes. In addition, leaders recognize that safety and emergency management programs minimize or eliminate risks for staff, customers, and their patients.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=1341&chapterId=67&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "67"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSHR Chapter ID=68- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=1341&chapterId=68&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "68"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSIM Chapter ID=69- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=1341&chapterId=69&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "69"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify HSPM  Chapter ID=70- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=1341&chapterId=70&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "1341"
														},
														{
															"key": "chapterId",
															"value": "70"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Integrated Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"    {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"This chapter consists of specific requirements for participation in the certification process and for maintaining a certification award.<br/>When a program does not comply with a CPR, the program will be assigned a Requirement for Improvement (RFI) in the same context that noncompliance with a standard or element of performance generates an RFI. However, refusal to permit performance of a review (CPR 3) will lead to a denial of certification. Falsification of information (CPR 7) will lead to a preliminary denial of certification decision. All RFIs can impact the certification decision and follow-up requirements, as determined by established certification decision rules. Failure to resolve an RFI can ultimately lead to loss of certification.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3485&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICPA Chapter ID=87- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3485&chapterId=87&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "87"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICPC Chapter ID=88- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3485&chapterId=88&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "88"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICQS Chapter ID=89- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3485&chapterId=89&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3485"
														},
														{
															"key": "chapterId",
															"value": "89"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Medication Compounding",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"  {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"\",\r",
															"            \"sectionText\": \"No Chapter Overview Available\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCGR Chapter ID=104- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"    {\r",
															"            \"chapterName\": \"General Responsibilities\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"This chapter addresses the general responsibilities of the organization, leadership, and staff regarding the medication compounding services provided.<br/><br/>The standards in this chapter focus on the following:<br/>- Leadership responsibility for providing safe, high-quality medication compounding services<br/>- Responsibilities of staff who compound and dispense sterile and nonsterile medication preparations<br/>- Patient and caregiver education on the safe storage, handling, and administration of dispensed compounded medications\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=104&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "104"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCED Chapter ID=105- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=105&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "105"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCS Chapter ID=106- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=106&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "106"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify MDCN Chapter ID=108- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=107&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "107"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify ICQS Chapter ID=89- Chapter Overview GetChapterOverview Data Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=108&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "108"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Palliative Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"  {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"\",\r",
															"            \"sectionText\": \"No Chapter Overview Available\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=61&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPM Chapter ID=75- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"   {\r",
															"            \"chapterName\": \"Program Management\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"Providing high-quality palliative care requires an infrastructure capable of supporting the activities of the program. Leaders must commit resources to support, evaluate, and improve services. Commitments such as these require leaders to know their organization’s strengths, challenges, and areas for improvement. They must also have a thorough understanding of their patient population so that the care they provide is relevant to their population’s needs. <br/><br/>The standards in this chapter focus on the following:<br/><br/>- Designing and implementing the program<br/>- Integrating the program into the organization<br/>- Evaluating the program<br/>- Orientation for new team members, staff, and volunteers<br/>- Qualifications and experience required for members of the core interdisciplinary team<br/>- Evaluating and assessing competence of team members<br/>- Promoting a collaborative environment\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2183&chapterId=75&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "75"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPC Chapter ID=73- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2183&chapterId=73&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "73"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCIM Chapter ID=72- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2183&chapterId=72&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "72"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PCPI Chapter ID=74- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=2183&chapterId=74&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "2183"
														},
														{
															"key": "chapterId",
															"value": "74"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Perinatal Care",
									"item": [
										{
											"name": "Verify CPR Chapter ID=61 - Chapter Overview GetChapterOverview Data Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"   {\r",
															"            \"chapterName\": \"Certification Participation Requirements\",\r",
															"            \"sectionHeader\": \"\",\r",
															"            \"sectionText\": \"No Chapter Overview Available\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3572&chapterId=61&c&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3572"
														},
														{
															"key": "chapterId",
															"value": "61"
														},
														{
															"key": "c",
															"value": null
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPM Chapter ID=84- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3470&chapterId=84&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "84"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPC Chapter ID=85- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3470&chapterId=85&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "85"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNIM Chapter ID=82- Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3470&chapterId=82&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "82"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Verify PNPI Chapter ID=83 Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=3470&chapterId=83&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "3470"
														},
														{
															"key": "chapterId",
															"value": "83"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Verification",
							"item": [
								{
									"name": "Maternal Levels of Care",
									"item": [
										{
											"name": "Verify VPR Chapter ID=1548 - Chapter Overview GetChapterOverview Data",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"for(i=0;i<jsonData.payload.length;i++){\r",
															"    pm.test(\"Verify \" +  jsonData.payload[i].chapterName \r",
															"+ \" and \" + jsonData.payload[i].sectionHeader\r",
															"+ \" does not display null \", function () {\r",
															"\r",
															"\r",
															"console.log(jsonData.payload[i].chapterName)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionHeader).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].chapterName).to.exist\r",
															"pm.expect(jsonData.payload[i].chapterName).to.not.be.null\r",
															"\r",
															"pm.expect(jsonData.payload[i].sectionText).to.exist\r",
															"pm.expect(jsonData.payload[i].sectionText).to.not.be.null\r",
															"\r",
															"\r",
															"})\r",
															"}\r",
															"\r",
															"\r",
															"pm.test(\"Verify Chapter Overview display based on ChapterID and ProgramID\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.eql\r",
															"   ([\r",
															"  {\r",
															"            \"chapterName\": \"Verification Participation Requirements\",\r",
															"            \"sectionHeader\": \"Overview\",\r",
															"            \"sectionText\": \"This chapter includes specific verification participation requirements (VPRs) that apply to the verification process and are required to maintain a verification award. These differ from review eligibility criteria in that the verification process may be initiated even when all VPRs have not yet been met. For an organization seeking verification for the first time, compliance with the VPRs is assessed during the initial review. For the program that is seeking reverification, compliance with these requirements is assessed throughout the verification cycle through reviews, Evidence of Standards Compliance (ESC), and periodic updates of organization-specific data and information. Organizations are either compliant or not compliant with VPRs. When an organization does not comply with a VPR, the organization will be assigned a Requirement for Improvement (RFI) similar to noncompliance with a standard. However, refusal to permit performance of an unscheduled or unannounced for-cause review (VPR.03) or falsification of information (VPR.05) will immediately lead to Preliminary Denial of Verification. Any RFI can potentially impact the verification decision and follow-up requirements, as determined by established verification decision rules. Failure to resolve an RFI has the potential to lead to loss of verification.\",\r",
															"            \"sortOrder\": 1,\r",
															"            \"chapterID\": 0\r",
															"        }\r",
															"])});\r",
															"\r",
															"//     var jsonData = pm.response.json();\r",
															"// for(i=0;i<jsonData.length;i++){\r",
															"//      pm.test(\"Verify \" +  jsonData[i].OrganizationTitle  + \" does not display null \", function () {\r",
															"//     console.log(jsonData[i].OrganizationTitle)\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.exist\r",
															"//     pm.expect(jsonData[i].OrganizationTitle).to.not.be.null\r",
															"\r",
															"//      })};\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{BaseURL}}/standards/api/Print/GetChapterOverview?productId=1&programId=6326&chapterId=1548&cycleId={{CycleID}}&standardEffBeginDate={{standardEffBegindate}}",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Print",
														"GetChapterOverview"
													],
													"query": [
														{
															"key": "productId",
															"value": "1"
														},
														{
															"key": "programId",
															"value": "6326"
														},
														{
															"key": "chapterId",
															"value": "1548"
														},
														{
															"key": "cycleId",
															"value": "{{CycleID}}"
														},
														{
															"key": "standardEffBeginDate",
															"value": "{{standardEffBegindate}}"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "WithOut Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapterOverview",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapterOverview"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid chapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapterOverview?productId=1&programId=2&chapterId=0000000000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapterOverview"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "0000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapterOverview?productId=1&programId=000000&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapterOverview"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "000000"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid productID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetChapterOverview?productId=000000&programId=2&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetChapterOverview"
									],
									"query": [
										{
											"key": "productId",
											"value": "000000"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET RELATED LINKS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital Chapters Related Links",
							"item": [
								{
									"name": "APR ChapterID = 23 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"\r",
													"  \r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 22,\r",
													"        \"linkDisplayText\": \"Hospital Accreditation Program\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/accreditation/hospitals.aspx\",\r",
													"        \"linkDescription\": \"Find the latest news about hospital accreditation as well as information about processes, requirements, publicity, and more.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=23&cycleId=37&standardEffBeginDate={{standardEffBegindate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "23"
												},
												{
													"key": "cycleId",
													"value": "37"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBegindate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EC ChapterID = 54 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=54",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "54"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EM ChapterID = 47 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/print/GetRelatedLinks?productId=1&programId=2&chapterId=47",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "47"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "HR ChapterID = 55 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=55",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "55"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "IC ChapterID = 52 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 9,\r",
													"        \"linkDisplayText\": \"Infection Control Related Sentinel Events\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/sentinel_event_alert_issue_28_infection_control_related_sentinel_events/\",\r",
													"        \"linkDescription\": \"Infection Control Sentinel Event Alert identifies specific Infection Control sentinel events, describes their common underlying causes, and suggests steps to prevent occurrences in the future. Accredited organizations should consider information in an Alert when designing or redesigning relevant processes and consider implementing relevant suggestions or reasonable alternatives.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 10,\r",
													"        \"linkDisplayText\": \"Joint Commission Infection Control Initiatives\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/infection_control.aspx\",\r",
													"        \"linkDescription\": \"Infection control is a critical component of safe, quality health care.  The Joint Commission is addressing this important issue with a number of initiatives.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=52",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "52"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "IM ChapterID = 56 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=56",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "56"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "LD ChapterID = 7 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=7",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "LS ChapterID = 44 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=7",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MM ChapterID = 22 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 11,\r",
													"        \"linkDisplayText\": \"The Official \\\"Do Not Use\\\" Abbreviations List\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/facts_about_the_official_/\",\r",
													"        \"linkDescription\": \"View Joint Commission's list of “do not use” abbreviations.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=22",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "22"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MS ChapterID = 14 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=14",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "14"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "NPSG and UP  ChapterID = 43 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 6,\r",
													"        \"linkDisplayText\": \"Sentinel Event Alert\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/sentinel_event.aspx\",\r",
													"        \"linkDescription\": \"Sentinel Event Alert identifies specific sentinel events, describes their common underlying causes, and suggests steps to prevent occurrences in the future.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 21,\r",
													"        \"linkDisplayText\": \"Universal Protocol\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/up.aspx\",\r",
													"        \"linkDescription\": \"Learn more about preventing wrong site, wrong procedure, wrong person surgery.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 63,\r",
													"        \"linkDisplayText\": \"National Patient Safety Goals\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/npsgs.aspx\",\r",
													"        \"linkDescription\": \"National Patient Safety Goals\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=43",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "43"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "NR ChapterID = 15 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/print/GetRelatedLinks?productId=1&programId=2&chapterId=15",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "15"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PC ChapterID = 57 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=57",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "57"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PI ChapterID = 58 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=58",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "58"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "RC ChapterID = 51 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=51",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "51"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "RI ChapterID = 53 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 20,\r",
													"        \"linkDisplayText\": \"Hospitals, Language, and Culture: A Snapshot of the Nation\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/hlc\",\r",
													"        \"linkDescription\": \"Research has shown that a lack of sensitivity and responsiveness to cultural and language needs impacts quality, safety, and patient satisfaction.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=53",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "53"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "TS ChapterID = 49 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=49",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "49"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "WT ChapterID = 18 - ProgramID=2 Hospital-Releated Links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"pm.test(jsonData.payload[i].linkUrl +   \" hits the server successfully and included header displays successfully,\" +  function () {\r",
													"pm.sendRequest(jsonData.payload[i].linkUrl, function (err,response){\r",
													"    pm.expect(err).to.not.be.ok;\r",
													"    pm.expect(response).to.have.property('code', 200);\r",
													"    pm.expect(response).to.have.property('status', 'OK');\r",
													"    pm.expect(response.text()).to.include('<title>Login | The Joint Commission</title>')\r",
													"});\r",
													"});\r",
													"}\r",
													"\r",
													"\r",
													"pm.test(\"Verify Related Links display based on ChapterID and ProgramID\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql\r",
													"   ([\r",
													"    {\r",
													"        \"relatedInformationID\": 1,\r",
													"        \"linkDisplayText\": \"Joint Commission Connect Extranet Website\",\r",
													"        \"linkUrl\": \"https://www.jointcommission.org/login/\",\r",
													"        \"linkDescription\": \"Access the secure extranet website to the Joint Commission\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 2,\r",
													"        \"linkDisplayText\": \"Standards Online Question Submission Form\",\r",
													"        \"linkUrl\": \"https://web.jointcommission.org/sigsubmission/sigquestionform.aspx\",\r",
													"        \"linkDescription\": \"Use this form to submit a question directly to our standards interpretation group.\"\r",
													"    },\r",
													"    {\r",
													"        \"relatedInformationID\": 23,\r",
													"        \"linkDisplayText\": \"FAQs - Hospital Standards\",\r",
													"        \"linkUrl\": \"http://www.jointcommission.org/standards_information/jcfaq.aspx?ProgramId=39\",\r",
													"        \"linkDescription\": \"Review frequently asked questions related to hospital standards\"\r",
													"    }\r",
													"])});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetRelatedLinks?productId=1&programId=2&chapterId=18",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetRelatedLinks"
											],
											"query": [
												{
													"key": "productId",
													"value": "1"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "chapterId",
													"value": "18"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid ChapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=1&programId=2&chapterId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=1&programId=0000&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "1"
										},
										{
											"key": "programId",
											"value": "0000"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProductID",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetRelatedLinks?productId=0000&programId=2&chapterId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetRelatedLinks"
									],
									"query": [
										{
											"key": "productId",
											"value": "0000"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "chapterId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "StartFragment\n\nSPRINT 3\n\n150243- API Development - Chapter Overview and Related Links\n\nEndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GET ACCREDITATION GLOSSARY",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Accreditation",
							"item": [
								{
									"name": "Get Glossary for Hospital ProgramID=2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=2&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Ambulatory ProgramID=23",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=23&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Assisted Living Community ProgramID=6294",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=6294&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "6294"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Behavioral Health and Human Services ProgramID=6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=6&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "6"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Critical Access Hospital ProgramID=69",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=69&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Home Care ProgramID=22",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=22&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "22"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Laboratory ProgramID=21",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=21&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "21"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Nursing Care Center ProgramID=5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=5&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "5"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Office Based Surgery ProgramID=68",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"success should be TRUE\", function () {\r",
													"    pm.expect(jsonData.success).to.eql(true);\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function () {\r",
													"    pm.expect(jsonData.errors).to.eql(null);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													"    var JsonCount = Object.keys(jsonData).length;\r",
													"    pm.expect(JsonCount).to.eql(3);\r",
													"});\r",
													"\r",
													"jsonData.payload.forEach(function (payloadItem) {\r",
													"    pm.test(\"Verify \" + payloadItem.termIndex + \" and \" + payloadItem.termTitle + \" and \" + payloadItem.itemDefinition + \" does not display null\", function () {\r",
													"        pm.expect(payloadItem.termIndex).to.exist;\r",
													"        pm.expect(payloadItem.termIndex).to.not.be.null;\r",
													"        pm.expect(payloadItem.termTitle).to.exist;\r",
													"        pm.expect(payloadItem.termTitle).to.not.be.null;\r",
													"        pm.expect(payloadItem.itemDefinition).to.exist;\r",
													"        pm.expect(payloadItem.itemDefinition).to.not.be.null;\r",
													"        pm.expect(payloadItem.itemDefinition).to.be.a('string');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=68&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "68"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Get Glossary for Disease Specific Care ProgramID=67",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=67&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "67"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Comprehensive Cardiac Center ProgramID=3570",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=3570&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "3570"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Health Care Staffing Services ProgramID=1341",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=1341&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "1341"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Integrated Care ProgramID=3485",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=3485&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "3485"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Maternal Levels of Care ProgramID=6326",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=6326&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "6326"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Medication Compounding ProgramID=3572",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=3572&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "3572"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Palliative Care ProgramID=2183",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=2183&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "2183"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Patient Blood Management ProgramID=3442",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=3442&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "3442"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Perinatal Care ProgramID=3470",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=3470&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "3470"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Advance Disease",
							"item": [
								{
									"name": "Get Glossary for Acute Heart Attack Ready ProgramID=67",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=67&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "67"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Ventricular Assist Device ProgramID=1346",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=1346&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "1346"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Glossary for Lung Volume Reduction Surgery ProgramID=1345",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"      pm.test(\"Verify \" +  jsonData.payload[i].termIndex + \" and \" + jsonData.payload[i].termTitle +   \" and \" + jsonData.payload[i].itemDefinition + \" does not display null \", function () {\r",
													" console.log(jsonData.payload[i].termIndex)\r",
													" console.log(jsonData.payload[i].termTitle)\r",
													" console.log(jsonData.payload[i].itemDefinition)\r",
													"pm.expect(jsonData.payload[i].termIndex).to.exist\r",
													"pm.expect(jsonData.payload[i].termIndex).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].termTitle).to.exist\r",
													"pm.expect(jsonData.payload[i].termTitle).to.not.be.null\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.exist\r",
													"pm.expect(jsonData.payload[i].itemDefinition).to.not.be.null\r",
													"})}\r",
													"\r",
													"\r",
													"   "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BaseURL}}/standards/api/Print/GetAccreditationGlossary?programId=1345&standardEffBeginDate={{standardEffBeginDate}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Print",
												"GetAccreditationGlossary"
											],
											"query": [
												{
													"key": "programId",
													"value": "1345"
												},
												{
													"key": "standardEffBeginDate",
													"value": "{{standardEffBeginDate}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify- no Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAccreditationGlossary?",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAccreditationGlossary"
									],
									"query": [
										{
											"key": "",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid HTTP Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAccreditationGlossary?programId=2&standardEffBeginDate=01%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAccreditationGlossary"
									],
									"query": [
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "01%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify -Invalid Program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAccreditationGlossary?programId=78678&standardEffBeginDate=01%2F01%2F2022",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAccreditationGlossary"
									],
									"query": [
										{
											"key": "programId",
											"value": "78678"
										},
										{
											"key": "standardEffBeginDate",
											"value": "01%2F01%2F2022"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify  -  Invalid Standard EFF Date no %",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAccreditationGlossary?programId=2&standardEffBeginDate=012F012F2021",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAccreditationGlossary"
									],
									"query": [
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "012F012F2021"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify  -Invalid Standard EFF Date Wrong Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAccreditationGlossary?programId=2&standardEffBeginDate={{standardEffBegindate}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAccreditationGlossary"
									],
									"query": [
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- Invalid User",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "InActive Users",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": null,\r\n  \"eProductID\": 1,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"dateToProcess\": \"2023-03-01T07:13:04.680Z\",\r\n  \"userPreferenceTypeID\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/ValidateInactiveEmails?listToEmailIDs=brian.pautsch%40jcrinc.com2&listCcEmailIDs=brian.pautsch%40jcrinc.com2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"ValidateInactiveEmails"
									],
									"query": [
										{
											"key": "listToEmailIDs",
											"value": "brian.pautsch%40jcrinc.com2"
										},
										{
											"key": "listCcEmailIDs",
											"value": "brian.pautsch%40jcrinc.com2"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetRFISitesByUser",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetRfiSitesByUser",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/GetRfiSitesByUser",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"GetRfiSitesByUser"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "revAMP- ExportToFSA",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "ExportToFSA",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"userID\": 0,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"fsaFilter\": true,\r\n    \"getNotes\": true,\r\n    \"cycleID\": 39,\r\n    \"programCode\": \"HAP\",\r\n    \"programName\": \"Ambulatory\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/ExportToFSA",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"ExportToFSA"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid SiteID- ExportToFSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has success property set to true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has payload property with success set to false\", function () {\r",
											"    pm.expect(pm.response.json().payload.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has payload property with responseMessage set to the expected value\", function () {\r",
											"    var expectedResponseMessage = \"The export of data was not created because the system did not find data available for export.<br/>One of the causes may be that there are no scored standards for the selected Program.<br/>Please check the scoring status and try again...\";\r",
											"    pm.expect(pm.response.json().payload.responseMessage).to.eql(expectedResponseMessage);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"fsaFilter\": true,\r\n  \"getNotes\": true,\r\n  \"cycleID\": 39,\r\n  \"programCode\": \"HAP\",\r\n  \"programName\": \"Hospital\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/ExportToFSA",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"ExportToFSA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- ExportToFSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has success property set to true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has payload property with success set to false\", function () {\r",
											"    pm.expect(pm.response.json().payload.success).to.be.false;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has payload property with responseMessage set to the expected value\", function () {\r",
											"    var expectedResponseMessage = \"The export of data was not created because the system did not find data available for export.<br/>One of the causes may be that there are no scored standards for the selected Program.<br/>Please check the scoring status and try again...\";\r",
											"    pm.expect(pm.response.json().payload.responseMessage).to.eql(expectedResponseMessage);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"fsaFilter\": true,\r\n  \"getNotes\": true,\r\n  \"cycleID\": 39,\r\n  \"programCode\": \"HAP\",\r\n  \"programName\": \"Hospital\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/ExportToFSA",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"ExportToFSA"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetRfiDetails",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetRfiDetails",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/GetDownloadedRFIs?siteId={{Normal_SiteID}}&standardEffBeginDate=02%2F19%2F2023",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"GetDownloadedRFIs"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "standardEffBeginDate",
											"value": "02%2F19%2F2023"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid SiteID- GetRfiDetails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload should be empty\", function () {\r",
											"    pm.expect(pm.response.json().payload).to.be.an('array').that.is.empty;\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/GetDownloadedRFIs?siteId=0&standardEffBeginDate=02%2F19%2F2023",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"GetDownloadedRFIs"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "standardEffBeginDate",
											"value": "02%2F19%2F2023"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetESTSitesByUser",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetESTSitesByUser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check siteID is 15320\", function () {\r",
											"    var response = pm.response.json();\r",
											"    pm.expect(response.payload[0].siteId).to.equal(15320);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTSitesByUser",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTSitesByUser"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetESTFindings",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetESTFindings",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTFindings"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid Program- GetESTFindings",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 337843,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTFindings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid hcoid- GetESTFindings Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Payload should be Empty \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTFindings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP - GetCoPFilterValue",
			"item": [
				{
					"name": "Hospital",
					"item": [
						{
							"name": "GetCoPFilterValue- PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Program Admin - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- PA- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Hospital (A-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=2&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Site Manager - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Site Manager- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Hospital (A-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=2&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Staff Member - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Staff Member- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Hospital (A-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=2&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Mock Survey Reviewer - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey Reviewer- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Hospital (A-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=2&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Mock Survey User - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey User- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Hospital (A-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=2&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Ambulatory",
					"item": [
						{
							"name": "GetCoPFilterValue- PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Program Admin - Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- PA- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Ambulatory Surgical Center (Q-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=23&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Site Manager- Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Site Manager - Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Ambulatory Surgical Center (Q-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=23&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Staff Member- Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Staff Member- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Ambulatory Surgical Center (Q-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=23&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Mock Survey Reviewer - Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey Reviewer- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Ambulatory Surgical Center (Q-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=23&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 4 - Mock Survey User - Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey User- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Ambulatory Surgical Center (Q-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{MockSurvey_SiteID}}&programId=23&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Critical Access Hospital",
					"item": [
						{
							"name": "GetCoPFilterValue- PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 5 - Program Admin - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(5)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- PA- Critical Access Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Critical Access Hospital (C-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"pm.expect(jsonData.payload[4].copFilterTypeName).to.eql(\"Critical Access Hospital Distinct Part Unit (A-tags)\")\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 5 - Site Manager - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(5)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Site Manager- Critical Access Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Critical Access Hospital (C-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"pm.expect(jsonData.payload[4].copFilterTypeName).to.eql(\"Critical Access Hospital Distinct Part Unit (A-tags)\")\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 5 - Staff Member - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(5)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Staff Member- Critical Access Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Critical Access Hospital (C-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"pm.expect(jsonData.payload[4].copFilterTypeName).to.eql(\"Critical Access Hospital Distinct Part Unit (A-tags)\")\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 5 - Mock Survey Reviewer - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(5)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey Reviewer- Critical Access Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Critical Access Hospital (C-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"pm.expect(jsonData.payload[4].copFilterTypeName).to.eql(\"Critical Access Hospital Distinct Part Unit (A-tags)\")\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPFilterValue- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue Count should be 5 - Mock Survey User - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(5)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCoPFilterValue- Mock Survey User- Critical Access Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].copFilterTypeName).to.eql('All CoPs/Tags')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].copFilterTypeName).to.eql('Critical Access Hospital (C-tags)')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copFilterTypeName).to.eql('Emergency Preparedness (E-tags)')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].copFilterTypeName).to.eql(\"Life Safety Code (K-tags)\")\r",
											"pm.expect(jsonData.payload[4].copFilterTypeName).to.eql(\"Critical Access Hospital Distinct Part Unit (A-tags)\")\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be False\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be 403\", function() {\r",
											" console.log(jsonData.errors.errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId=0&programId=69&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"programID should be 0 for Invalid ProgramID\", function() {\r",
											"\r",
											" pm.expect(jsonData.payload[0].programID).to.eql(0)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=000&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "000"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCoPFilterValue?siteId={{Normal_SiteID}}&programId=69&roleId=09090",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCoPFilterValue"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "09090"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UpdateSiteAttestation",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "UpdateSiteAttestation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response contains the correct responseMessage\", function () {\r",
											"    var responseMessage = pm.response.json().payload.responseMessage;\r",
											"    pm.expect(responseMessage).to.equal(\"Automatic download of RFI and ESC data enabled for HCO ID(s): 660401\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"hcoID\": 660401,\r\n    \"isSiteAttested\": false,\r\n    \"isESCSiteAttested\": true,\r\n    \"isCurrentTab\": false\r\n  }\r\n  ],\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"cycleID\": 39\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/UpdateSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"UpdateSiteAttestation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid SiteID- UpdateSiteAttestation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n    \"siteID\": 0,\r\n    \"hcoID\": 337843,\r\n    \"isSiteAttested\": true,\r\n    \"isESCSiteAttested\": false,\r\n    \"isCurrentTab\": true\r\n  }\r\n  ],\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"cycleID\": 39\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/UpdateSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"UpdateSiteAttestation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid hcoID- UpdateSiteAttestation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n    \"siteID\": 54586,\r\n    \"hcoID\": 0,\r\n    \"isSiteAttested\": true,\r\n    \"isESCSiteAttested\": false,\r\n    \"isCurrentTab\": true\r\n  }\r\n  ],\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"cycleID\": 39\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/UpdateSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"UpdateSiteAttestation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cycleID- UpdateSiteAttestation Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n    \"siteID\": 54586,\r\n    \"hcoID\": 337843,\r\n    \"isSiteAttested\": true,\r\n    \"isESCSiteAttested\": false,\r\n    \"isCurrentTab\": true\r\n  }\r\n  ],\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"cycleID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/RfiEsc/UpdateSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"RfiEsc",
										"UpdateSiteAttestation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UpdateESTSiteAttestation",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "UpdateESTSiteAttestation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Response message is 'Attestation status updated for 1 site(s)'\", function () {\r",
											"    pm.expect(pm.response.json().payload.responseMessage).to.equal(\"Attestation status updated for 1 site(s)\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lstSitesToUpdate\": [\r\n        {\r\n            \"siteID\": {{Normal_SiteID}},\r\n            \"hcoID\": 337843,\r\n            \"isSiteAttested\": false,\r\n            \"isESCSiteAttested\": false,\r\n            \"isCurrentTab\": true\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/UpdateESTSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"UpdateESTSiteAttestation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid SiteID- UpdateSiteAttestation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n      \"siteID\": 0,\r\n      \"hcoID\": 337843,\r\n      \"isSiteAttested\": true,\r\n      \"isESCSiteAttested\": true,\r\n      \"isCurrentTab\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/UpdateESTSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"UpdateESTSiteAttestation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid hcoID- UpdateSiteAttestation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"lstSitesToUpdate\": [\r\n    {\r\n      \"siteID\": 15320,\r\n      \"hcoID\": 0,\r\n      \"isSiteAttested\": true,\r\n      \"isESCSiteAttested\": true,\r\n      \"isCurrentTab\": true\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/UpdateESTSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"UpdateESTSiteAttestation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetESTPrintStandard",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetESTPrintStandard",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"standardID\": 13321\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTPrintStandard"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid standardID- GetESTPrintStandard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload is an empty array\", function () {\r",
											"    pm.expect(pm.response.json().payload).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"standardID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid hcoid- GetESTPrintStandard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload is an empty array\", function () {\r",
											"    pm.expect(pm.response.json().payload).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"standardID\": 56464\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTPrintStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetESTPrintStandard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload is an empty array\", function () {\r",
											"    pm.expect(pm.response.json().payload).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"hcoid\": 337843,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"currentStandardEffBeginDate\": \"07/01/2023\",\r\n  \"standardID\": 13321\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/GetESTPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"GetESTPrintStandard"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetFSAStatus",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetFSAStatus",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 6,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"fsaFilter\": true,\r\n    \"getNotes\": true,\r\n    \"cycleID\": 39,\r\n    \"programName\": \"Hospital\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/GetFSAStatus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"GetFSAStatus"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid SiteID- GetFSAStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has a payload object\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('payload').that.is.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Response payload has a responseMessage property\", function () {\r",
											"    var responseMessage = pm.response.json().payload.responseMessage;\r",
											"    pm.expect(responseMessage).to.exist.and.to.be.a('string').and.to.equal('No updates made!');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 0,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"fsaFilter\": true,\r\n    \"getNotes\": true,\r\n    \"cycleID\": 39,\r\n    \"programName\": \"Hospital\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/UpdateESTSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"UpdateESTSiteAttestation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetFSAStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response has a payload object\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('payload').that.is.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"Response payload has a responseMessage property\", function () {\r",
											"    var responseMessage = pm.response.json().payload.responseMessage;\r",
											"    pm.expect(responseMessage).to.exist.and.to.be.a('string').and.to.equal('No updates made!');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 0,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"fsaFilter\": true,\r\n    \"getNotes\": true,\r\n    \"cycleID\": 39,\r\n    \"programName\": \"Hospital\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/EST/UpdateESTSiteAttestation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"EST",
										"UpdateESTSiteAttestation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET MS CORPORATE SCORES",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetMSCorporateScores- GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"scoreID & likelihood should not be null\", function () {\r",
											"    pm.response.json().payload.forEach(function (score) {\r",
											"        pm.expect(score.scoreID).to.not.be.null;\r",
											"\r",
											"         pm.expect(score.likelihood).to.not.be.null;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId={{MockSurvey_SiteID}}&programId=2&standardEffBeginDate={{standardEffBegindate}}&certificationItemId=0&epTextId=56464",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "{{standardEffBegindate}}"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "56464"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId=0000&programId=2&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=56464",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0000"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "56464"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid EPTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId={{MockSurvey_SiteID}}&programId=2&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=00000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "00000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetMSCorporateScores?siteId={{Normal_SiteID}}&programId=0000&standardEffBeginDate=07%2F01%2F2022&certificationItemId=0&epTextId=56464",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetMSCorporateScores"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "0000"
										},
										{
											"key": "standardEffBeginDate",
											"value": "07%2F01%2F2022"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "56464"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CMS CROSSWALK",
			"item": [
				{
					"name": "Business Scenario",
					"item": [
						{
							"name": "GetCMSCrosswalkDetails- with CMSLicense",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"console.log(jsonData.payload.crosswalkDetails[0].cmsStandardID);\r",
											"console.log(jsonData.payload.crosswalkDetails[0].levelTypeID);\r",
											"\r",
											"pm.collectionVariables.set(\"cmsStandardID\",jsonData.payload.crosswalkDetails[0].cmsStandardID);\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"levelTypeID\",jsonData.payload.crosswalkDetails[0].levelTypeID);\r",
											"\r",
											"for(i=0;i<jsonData.payload.crosswalkDetails.length;i++){\r",
											"    pm.test(\"Verify title- \" +  jsonData.payload.crosswalkDetails[i].title + \" and tagCode-\" + jsonData.payload.crosswalkDetails[i].tagCode + \" and requirementName-\" + jsonData.payload.crosswalkDetails[i].requirementName + \" and copName-\" + jsonData.payload.crosswalkDetails[i].copName + \" and jcrElementText-\" + jsonData.payload.crosswalkDetails[i].jcrElementText + \" and cmsStandardID-\" + jsonData.payload.crosswalkDetails[i].cmsStandardID + \" does not display null \", function () {\r",
											"console.log(jsonData.payload.crosswalkDetails[i].title)\r",
											"console.log(jsonData.payload.crosswalkDetails[i].tagCode)\r",
											"console.log(jsonData.payload.crosswalkDetails[i].copName)\r",
											"console.log(jsonData.payload.crosswalkDetails[i].requirementName)\r",
											"\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].cmsStandardID).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].cmsStandardID).to.not.be.null\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].copName).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].copName).to.not.be.null\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].title).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].title).to.not.be.null\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].tagCode).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].tagCode).to.not.be.null\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].requirementName).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].requirementName).to.not.be.null\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].jcrElementText).to.exist\r",
											"pm.expect(jsonData.payload.crosswalkDetails[i].jcrElementText).to.not.be.null\r",
											"    })\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSCrosswalkDetails?siteId={{Normal_SiteID}}&programId=2&epTextId=55819&cycleId=37&isCMSLicense=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSCrosswalkDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "epTextId",
											"value": "55819"
										},
										{
											"key": "cycleId",
											"value": "37"
										},
										{
											"key": "isCMSLicense",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSStadardsData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify title- \" +  jsonData.payload[i].jcrElementText + \" and tagCode-\" + jsonData.payload[i].tagCode + \" and tagAndRequirement-\" + jsonData.payload[i].tagAndRequirement + \" and siteID-\" + jsonData.payload[i].siteID +\" does not display null \", function () {\r",
											"console.log(jsonData.payload[i].jcrElementText)\r",
											"console.log(jsonData.payload[i].tagCode)\r",
											"console.log(jsonData.payload[i].tagAndRequirement)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload[i].jcrElementText).to.exist\r",
											"pm.expect(jsonData.payload[i].jcrElementText).to.not.be.null\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload[i].tagCode).to.exist\r",
											"pm.expect(jsonData.payload[i].tagCode).to.not.be.null\r",
											"\r",
											"    })\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 85,\r\n  \"roleID\": 1,\r\n  \"copID\": 103,\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"mockSurveyID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateCMSDocumentation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var documentationText= pm.variables.replaceIn('{{$randomCatchPhraseAdjective}}');\r",
											"pm.environment.set('documentationText',documentationText);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 2649,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": \"string\",\r\n  \"scoreDate\": \"2023-02-27T11:14:49.754Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1177,\r\n  \"levelTypeID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{documentationText}}\",\r\n  \"compliantDate\": \"2023-02-27T11:14:49.754Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSDocumentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"console.log(res.payload.documentationText);\r",
											"\r",
											"pm.test(\"Verify documentationText\",function()\r",
											"{\r",
											"    pm.expect(res.payload.documentationText).to.eql(pm.environment.get(\"documentationText\"));\r",
											"});\r",
											"\r",
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": 2649,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenario",
					"item": [
						{
							"name": "Invalid SiteId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"errors should be Unauthorized\", function() {\r",
											" console.log(jsonData.errors[0].message)\r",
											" pm.expect(jsonData.errors[0].message).to.eql(\"Unauthorized to access the requested site.\")\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"success should be FALSE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"errorCode should be 403\", function() {\r",
											" console.log(jsonData.errors[0].errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSCrosswalkDetails?siteId=0&programId=2&epTextId=25746&cycleId=37&isCMSLicense=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSCrosswalkDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "epTextId",
											"value": "25746"
										},
										{
											"key": "cycleId",
											"value": "37"
										},
										{
											"key": "isCMSLicense",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify title as Null & crosswalkDetailsshould be Empty\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.title).to.eql(null);\r",
											"     pm.expect(jsonData.payload.crosswalkDetails).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSCrosswalkDetails?siteId={{Normal_SiteID}}&programId=0&epTextId=25746&cycleId=37&isCMSLicense=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSCrosswalkDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "0"
										},
										{
											"key": "epTextId",
											"value": "25746"
										},
										{
											"key": "cycleId",
											"value": "37"
										},
										{
											"key": "isCMSLicense",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epTextId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify title as Null & crosswalkDetailsshould be Empty\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.title).to.eql(\"CMS Crosswalk\");\r",
											"     pm.expect(jsonData.payload.crosswalkDetails).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSCrosswalkDetails?siteId={{Normal_SiteID}}&programId=2&epTextId=0&cycleId=37&isCMSLicense=true",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSCrosswalkDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "epTextId",
											"value": "0"
										},
										{
											"key": "cycleId",
											"value": "37"
										},
										{
											"key": "isCMSLicense",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid isCMSLicense",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSCrosswalkDetails?siteId={{Normal_SiteID}}&programId=2&epTextId=25746&cycleId=37&isCMSLicense=null",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSCrosswalkDetails"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "epTextId",
											"value": "25746"
										},
										{
											"key": "cycleId",
											"value": "37"
										},
										{
											"key": "isCMSLicense",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"userID\": 59,\r\n  \"roleID\": 1,\r\n  \"copID\": 103,\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"mockSurveyID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"userID\": 59742,\r\n  \"roleID\": 1,\r\n  \"copID\": 103,\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"mockSurveyID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"userID\": 85,\r\n  \"roleID\": 1,\r\n  \"copID\": 103,\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"mockSurveyID\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": null,\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": \"string\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": null,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": \"string\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentationTypeID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": null,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": \"string\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": null,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": \"string\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid levelID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": null,\r\n  \"documentationText\": \"h\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentationText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": 9,\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 760,\r\n  \"cmsStandardID\": 12,\r\n  \"documentationTypeID\": 1,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"levelID\": 1,\r\n  \"documentationText\": \"ll\",\r\n  \"compliantDate\": \"2022-09-23T07:03:28.967Z\",\r\n  \"documentationID\": 0,\r\n  \"additionalScoreDocumentation\": \"string\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": null,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": null,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid scoreID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": null,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epUserRoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": null,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentationTypeID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": null,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid roleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": null,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Test\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentationText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": 8,\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 57,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 85,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": null,\r\n  \"scoreDate\": \"2022-09-28T07:21:44.658Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": true,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"jk\",\r\n  \"compliantDate\": \"2022-09-28T07:21:44.658Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/UpdateCMSEPScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"UpdateCMSEPScoreDocumentation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP - GetCMSFilterData",
			"item": [
				{
					"name": "Hospital",
					"item": [
						{
							"name": "GetCMSFilterData - PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"GetCMSFilterData - PA - success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCMSFilterData - PA -errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"GetCMSFilterData - PA - Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- PA- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"        pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All User Assignments')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=2&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData - Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Site Manager- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=2&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Staff Member- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=2&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey Reviewer- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=2&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey Reviewer- Hospital\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=2&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Ambulatory",
					"item": [
						{
							"name": "GetCMSFilterData - PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- PA- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"        pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=23&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData - Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Site Manager- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"        pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=23&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Staff Member- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"         pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Regulations Assigned to Me')\r",
											"\r",
											"           pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('Regulations Not Reviewed')\r",
											"\r",
											"        pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=23&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey Reviewer- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=23&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey User- Ambulatory\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=23&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Critical Access Hospital",
					"item": [
						{
							"name": "GetCMSFilterData - PA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- PA- CAH\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"        pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=69&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData - Site Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Site Manager- CAH\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"        pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=69&roleId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Staff Member",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Staff Member- CAH\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Final - Not Reviewed')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Final - Compliant')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"Final - Standard Level Deficiency\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('Final - Condition Level Deficiency')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('Final - Immediate Jeopardy')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].epFilterDisplayText).to.eql('Individual - Not Reviewed')\r",
											"\r",
											"    pm.expect(jsonData.payload[7].epFilterDisplayText).to.eql('Individual - Compliant')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].epFilterDisplayText).to.eql('Individual - Standard Level Deficiency')\r",
											"\r",
											"      pm.expect(jsonData.payload[9].epFilterDisplayText).to.eql('Individual - Condition Level Deficiency')\r",
											"\r",
											"       pm.expect(jsonData.payload[10].epFilterDisplayText).to.eql('Individual - Immediate Jeopardy')\r",
											"\r",
											"         pm.expect(jsonData.payload[11].epFilterDisplayText).to.eql('Regulations Assigned to Me')\r",
											"\r",
											"           pm.expect(jsonData.payload[12].epFilterDisplayText).to.eql('Regulations Not Reviewed')\r",
											"\r",
											"        pm.expect(jsonData.payload[13].epFilterDisplayText).to.eql('All Open Tasks')\r",
											"\r",
											"         pm.expect(jsonData.payload[14].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"          pm.expect(jsonData.payload[15].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{Normal_SiteID}}&programId=69&roleId=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey Reviewer- CAH\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=69&roleId=8",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSFilterData- Mock Survey Reviewer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"GetCMSFilterData- Mock Survey User- CAH\", function() {\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[0].epFilterDisplayText).to.eql('All Regulations')\r",
											"\r",
											"  pm.expect(jsonData.payload[1].epFilterDisplayText).to.eql('Mock Survey - Compliant')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].epFilterDisplayText).to.eql('Mock Survey - Deficient')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[3].epFilterDisplayText).to.eql(\"All Open Tasks\")\r",
											"\r",
											" pm.expect(jsonData.payload[4].epFilterDisplayText).to.eql('- Open Tasks Assigned to Me')\r",
											"\r",
											"  pm.expect(jsonData.payload[5].epFilterDisplayText).to.eql('- Open Tasks Assigned by Me')\r",
											"\r",
											"\r",
											"     \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId={{MockSurvey_SiteID}}&programId=69&roleId=9",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "9"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be False\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be 403\", function() {\r",
											" console.log(jsonData.errors.errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId=0&programId=69&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be False\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be 403\", function() {\r",
											" console.log(jsonData.errors.errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId=0&programId=000&roleId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "000"
										},
										{
											"key": "roleId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCMSFilterData?siteId=54586&programId=69&roleId=09090",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCMSFilterData"
									],
									"query": [
										{
											"key": "siteId",
											"value": "54586"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "09090"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP - GETCOPBYPROGRAM",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetCoPByProgram - Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GET COP Count should be 30 - Program - Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(30)\r",
											"});\r",
											"\r",
											"pm.test(\"GET COP's - Program - Hospital\", function() {\r",
											"\r",
											" pm.expect(jsonData.payload[0].copName).to.eql('§482.1')\r",
											"  pm.expect(jsonData.payload[0].title).to.eql('Basis and scope.')\r",
											"\r",
											"pm.expect(jsonData.payload[1].copName).to.eql('§482.11')\r",
											"  pm.expect(jsonData.payload[1].title).to.eql('Compliance with Federal, State and Local Laws')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copName).to.eql('§482.12')\r",
											"  pm.expect(jsonData.payload[2].title).to.eql('Governing Body')\r",
											"\r",
											"    pm.expect(jsonData.payload[3].copName).to.eql('§482.13')\r",
											"  pm.expect(jsonData.payload[3].title).to.eql(\"Patient's Rights\")\r",
											"\r",
											"   pm.expect(jsonData.payload[4].copName).to.eql('§482.15')\r",
											"  pm.expect(jsonData.payload[4].title).to.eql('Emergency Preparedness')\r",
											"\r",
											"    pm.expect(jsonData.payload[5].copName).to.eql('§482.21')\r",
											"  pm.expect(jsonData.payload[5].title).to.eql('Quality Assessment and Performance Improvement Program')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].copName).to.eql('§482.22')\r",
											"  pm.expect(jsonData.payload[6].title).to.eql('Medical staff')\r",
											"\r",
											"     pm.expect(jsonData.payload[7].copName).to.eql('§482.23')\r",
											"  pm.expect(jsonData.payload[7].title).to.eql('Nursing Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].copName).to.eql('§482.24')\r",
											"  pm.expect(jsonData.payload[8].title).to.eql('Medical Record Services')\r",
											"\r",
											"    pm.expect(jsonData.payload[9].copName).to.eql('§482.25')\r",
											"  pm.expect(jsonData.payload[9].title).to.eql('Pharmaceutical Services')\r",
											"\r",
											"    pm.expect(jsonData.payload[10].copName).to.eql('§482.26')\r",
											"  pm.expect(jsonData.payload[10].title).to.eql('Radiologic Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[11].copName).to.eql('§482.27')\r",
											"  pm.expect(jsonData.payload[11].title).to.eql('Laboratory Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[12].copName).to.eql('§482.28')\r",
											"  pm.expect(jsonData.payload[12].title).to.eql('Food and Dietetic Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[13].copName).to.eql('§482.30')\r",
											"  pm.expect(jsonData.payload[13].title).to.eql('Utilization Review')\r",
											"\r",
											"    pm.expect(jsonData.payload[14].copName).to.eql('§482.41')\r",
											"  pm.expect(jsonData.payload[14].title).to.eql('Physical Environment')\r",
											"\r",
											"    pm.expect(jsonData.payload[15].copName).to.eql('§482.42')\r",
											"  pm.expect(jsonData.payload[15].title).to.eql('Infection Prevention and Control and Antibiotic Stewardship Programs')\r",
											"\r",
											"     pm.expect(jsonData.payload[16].copName).to.eql('§482.43')\r",
											"  pm.expect(jsonData.payload[16].title).to.eql('Discharge Planning')\r",
											"\r",
											"     pm.expect(jsonData.payload[17].copName).to.eql('§482.45')\r",
											"  pm.expect(jsonData.payload[17].title).to.eql('Organ, Tissue and Eye Procurement')\r",
											"\r",
											"     pm.expect(jsonData.payload[18].copName).to.eql('§482.51')\r",
											"  pm.expect(jsonData.payload[18].title).to.eql('Surgical Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[19].copName).to.eql('§482.52')\r",
											"  pm.expect(jsonData.payload[19].title).to.eql('Anesthesia Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[20].copName).to.eql('§482.53')\r",
											"  pm.expect(jsonData.payload[20].title).to.eql('Nuclear Medicine Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[21].copName).to.eql('§482.54')\r",
											"  pm.expect(jsonData.payload[21].title).to.eql('Outpatient Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[22].copName).to.eql('§482.55')\r",
											"  pm.expect(jsonData.payload[22].title).to.eql('Emergency Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[23].copName).to.eql('§482.56')\r",
											"  pm.expect(jsonData.payload[23].title).to.eql('Rehabilitation Services')\r",
											"\r",
											"       pm.expect(jsonData.payload[24].copName).to.eql('§482.57')\r",
											"  pm.expect(jsonData.payload[24].title).to.eql('Respiratory Care Services')\r",
											"\r",
											"       pm.expect(jsonData.payload[25].copName).to.eql('§482.58')\r",
											"  pm.expect(jsonData.payload[25].title).to.eql('Special requirements for hospital providers of long-term care services (“swing-beds”).')\r",
											"\r",
											"       pm.expect(jsonData.payload[26].copName).to.eql('§482.60')\r",
											"  pm.expect(jsonData.payload[26].title).to.eql('Special provisions applying to psychiatric hospitals.')\r",
											"\r",
											"       pm.expect(jsonData.payload[27].copName).to.eql('§482.61')\r",
											"  pm.expect(jsonData.payload[27].title).to.eql('Special medical record requirements for psychiatric hospitals.')\r",
											"\r",
											"       pm.expect(jsonData.payload[28].copName).to.eql('§482.62')\r",
											"  pm.expect(jsonData.payload[28].title).to.eql('Special staff requirements for psychiatric hospitals.')\r",
											"\r",
											"       pm.expect(jsonData.payload[29].copName).to.eql('K100')\r",
											"  pm.expect(jsonData.payload[29].title).to.eql('Life Safety Code')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCoPByProgram?siteId={{Normal_SiteID}}&programId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCoPByProgram"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPByProgram - Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GET COP Count should be 17 - Program - Ambulatory\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(17)\r",
											"});\r",
											"\r",
											"pm.test(\"GET COP's - Program - Ambulatory\", function() {\r",
											"\r",
											" pm.expect(jsonData.payload[0].copName).to.eql('§416.2')\r",
											"  pm.expect(jsonData.payload[0].title).to.eql('Definitions')\r",
											"\r",
											"pm.expect(jsonData.payload[1].copName).to.eql('§416.25')\r",
											"  pm.expect(jsonData.payload[1].title).to.eql('Basic Requirements')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copName).to.eql('§416.40')\r",
											"  pm.expect(jsonData.payload[2].title).to.eql(' Compliance With State Licensure Law')\r",
											"\r",
											"    pm.expect(jsonData.payload[3].copName).to.eql('§416.41')\r",
											"  pm.expect(jsonData.payload[3].title).to.eql(\" Governing Body and Management\")\r",
											"\r",
											"   pm.expect(jsonData.payload[4].copName).to.eql('§416.42')\r",
											"  pm.expect(jsonData.payload[4].title).to.eql(' Surgical Services')\r",
											"\r",
											"    pm.expect(jsonData.payload[5].copName).to.eql('§416.43')\r",
											"  pm.expect(jsonData.payload[5].title).to.eql(' Evaluation of Quality')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].copName).to.eql('§416.44')\r",
											"  pm.expect(jsonData.payload[6].title).to.eql(' Environment')\r",
											"\r",
											"     pm.expect(jsonData.payload[7].copName).to.eql('§416.45')\r",
											"  pm.expect(jsonData.payload[7].title).to.eql(' Medical Staff')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].copName).to.eql('§416.46')\r",
											"  pm.expect(jsonData.payload[8].title).to.eql(' Nursing Service')\r",
											"\r",
											"    pm.expect(jsonData.payload[9].copName).to.eql('§416.47')\r",
											"  pm.expect(jsonData.payload[9].title).to.eql(' Medical Records')\r",
											"\r",
											"    pm.expect(jsonData.payload[10].copName).to.eql('§416.48')\r",
											"  pm.expect(jsonData.payload[10].title).to.eql(' Pharmaceutical Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[11].copName).to.eql('§416.49')\r",
											"  pm.expect(jsonData.payload[11].title).to.eql(' Laboratory and Radiologic Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[12].copName).to.eql('§416.50')\r",
											"  pm.expect(jsonData.payload[12].title).to.eql(' Patient Rights')\r",
											"\r",
											"      pm.expect(jsonData.payload[13].copName).to.eql('§416.51')\r",
											"  pm.expect(jsonData.payload[13].title).to.eql(' Infection Control')\r",
											"\r",
											"    pm.expect(jsonData.payload[14].copName).to.eql('§416.52')\r",
											"  pm.expect(jsonData.payload[14].title).to.eql(' Patient Admission, Assessment and Discharge')\r",
											"\r",
											"    pm.expect(jsonData.payload[15].copName).to.eql('§416.54')\r",
											"  pm.expect(jsonData.payload[15].title).to.eql(' Emergency Preparedness')\r",
											"\r",
											"    pm.expect(jsonData.payload[16].copName).to.eql('K100')\r",
											"  pm.expect(jsonData.payload[16].title).to.eql('Life Safety Code')\r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCoPByProgram?siteId={{Normal_SiteID}}&programId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCoPByProgram"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCoPByProgram - Critical Access Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});\r",
											"\r",
											"pm.test(\"GET COP Count should be 53 - Program - Critical Access Hospital\", function() {\r",
											" console.log(jsonData.payload.length)\r",
											" pm.expect(jsonData.payload.length).to.eql(53)\r",
											"});\r",
											"\r",
											"pm.test(\"GET COP's - Program - Critical Access Hospital\", function() {\r",
											"\r",
											" pm.expect(jsonData.payload[0].copName).to.eql('§412.25')\r",
											"  pm.expect(jsonData.payload[0].title).to.eql(' Common Requirements')\r",
											"\r",
											"pm.expect(jsonData.payload[1].copName).to.eql('§412.27')\r",
											"  pm.expect(jsonData.payload[1].title).to.eql(' Additional Requirements')\r",
											"\r",
											"  pm.expect(jsonData.payload[2].copName).to.eql('§412.29')\r",
											"  pm.expect(jsonData.payload[2].title).to.eql('Classification criteria for payment under the inpatient rehabilitation facility prospective payment system')\r",
											"\r",
											"    pm.expect(jsonData.payload[3].copName).to.eql('§485.601')\r",
											"  pm.expect(jsonData.payload[3].title).to.eql(\"Basis and scope\")\r",
											"\r",
											"   pm.expect(jsonData.payload[4].copName).to.eql('§485.603')\r",
											"  pm.expect(jsonData.payload[4].title).to.eql('Rural health network')\r",
											"\r",
											"    pm.expect(jsonData.payload[5].copName).to.eql('§485.604')\r",
											"  pm.expect(jsonData.payload[5].title).to.eql('Personnel qualifications')\r",
											"\r",
											"   pm.expect(jsonData.payload[6].copName).to.eql('§485.606')\r",
											"  pm.expect(jsonData.payload[6].title).to.eql('Designation and certification of CAHs')\r",
											"\r",
											"     pm.expect(jsonData.payload[7].copName).to.eql('§485.608')\r",
											"  pm.expect(jsonData.payload[7].title).to.eql('Compliance With Federal, State, and Local Laws and Regulations')\r",
											"\r",
											"     pm.expect(jsonData.payload[8].copName).to.eql('§485.610')\r",
											"  pm.expect(jsonData.payload[8].title).to.eql('Status and Location')\r",
											"\r",
											"\r",
											"\r",
											"    pm.expect(jsonData.payload[9].copName).to.eql('§485.612')\r",
											"  pm.expect(jsonData.payload[9].title).to.eql('Compliance With CAH Requirements at the Time of Application')\r",
											"\r",
											"    pm.expect(jsonData.payload[10].copName).to.eql('§485.616')\r",
											"  pm.expect(jsonData.payload[10].title).to.eql('Agreements')\r",
											"\r",
											"     pm.expect(jsonData.payload[11].copName).to.eql('§485.618')\r",
											"  pm.expect(jsonData.payload[11].title).to.eql('Emergency Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[12].copName).to.eql('§485.620')\r",
											"  pm.expect(jsonData.payload[12].title).to.eql('Number of Beds and Length of Stay')\r",
											"\r",
											"      pm.expect(jsonData.payload[13].copName).to.eql('§485.623')\r",
											"  pm.expect(jsonData.payload[13].title).to.eql('Physical Plant and Environment')\r",
											"\r",
											"    pm.expect(jsonData.payload[14].copName).to.eql('§485.625')\r",
											"  pm.expect(jsonData.payload[14].title).to.eql('Emergency Preparedness')\r",
											"\r",
											"    pm.expect(jsonData.payload[15].copName).to.eql('§485.627')\r",
											"  pm.expect(jsonData.payload[15].title).to.eql('Organizational Structure')\r",
											"\r",
											"     pm.expect(jsonData.payload[16].copName).to.eql('§485.631')\r",
											"  pm.expect(jsonData.payload[16].title).to.eql('Staffing and Staff Responsibilities')\r",
											"\r",
											"     pm.expect(jsonData.payload[17].copName).to.eql('§485.635')\r",
											"  pm.expect(jsonData.payload[17].title).to.eql('Provision of Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[18].copName).to.eql('§485.638')\r",
											"  pm.expect(jsonData.payload[18].title).to.eql('Clinical Records')\r",
											"\r",
											"     pm.expect(jsonData.payload[19].copName).to.eql('§485.639')\r",
											"  pm.expect(jsonData.payload[19].title).to.eql('Surgical Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[20].copName).to.eql('§485.640')\r",
											"  pm.expect(jsonData.payload[20].title).to.eql('Infection prevention and control and antibiotic stewardship programs.')\r",
											"\r",
											"   \r",
											"\r",
											"     pm.expect(jsonData.payload[21].copName).to.eql('§485.641')\r",
											"  pm.expect(jsonData.payload[21].title).to.eql('Quality Assessment and Performance Improvement Program')\r",
											"\r",
											"     pm.expect(jsonData.payload[22].copName).to.eql('§485.642')\r",
											"  pm.expect(jsonData.payload[22].title).to.eql('Discharge planning.')\r",
											"\r",
											"       pm.expect(jsonData.payload[23].copName).to.eql('§485.643')\r",
											"  pm.expect(jsonData.payload[23].title).to.eql('Organ, Tissue, and Eye Procurement')\r",
											"\r",
											"       pm.expect(jsonData.payload[24].copName).to.eql('§485.645')\r",
											"  pm.expect(jsonData.payload[24].title).to.eql('Special Requirements for CAH Providers of Long-Term Care Services (“Swing-Beds”)')\r",
											"\r",
											"       pm.expect(jsonData.payload[25].copName).to.eql('§485.647')\r",
											"  pm.expect(jsonData.payload[25].title).to.eql('Psychiatric and Rehabilitation Distinct Part Units')\r",
											"\r",
											"       pm.expect(jsonData.payload[26].copName).to.eql('§482.1')\r",
											"  pm.expect(jsonData.payload[26].title).to.eql('Basis and scope.')\r",
											"\r",
											"       pm.expect(jsonData.payload[27].copName).to.eql('§482.11')\r",
											"  pm.expect(jsonData.payload[27].title).to.eql('Compliance with Federal, State and Local Laws')\r",
											"\r",
											"\r",
											"  pm.expect(jsonData.payload[28].copName).to.eql('§482.12')\r",
											"  pm.expect(jsonData.payload[28].title).to.eql('Governing Body')\r",
											"\r",
											"    pm.expect(jsonData.payload[29].copName).to.eql('§482.13')\r",
											"  pm.expect(jsonData.payload[29].title).to.eql(\"Patient's Rights\")\r",
											"\r",
											"   pm.expect(jsonData.payload[30].copName).to.eql('§482.15')\r",
											"  pm.expect(jsonData.payload[30].title).to.eql('Emergency Preparedness')\r",
											"\r",
											"    pm.expect(jsonData.payload[31].copName).to.eql('§482.21')\r",
											"  pm.expect(jsonData.payload[31].title).to.eql('Quality Assessment and Performance Improvement Program')\r",
											"\r",
											"   pm.expect(jsonData.payload[32].copName).to.eql('§482.22')\r",
											"  pm.expect(jsonData.payload[32].title).to.eql('Medical staff')\r",
											"\r",
											"     pm.expect(jsonData.payload[33].copName).to.eql('§482.23')\r",
											"  pm.expect(jsonData.payload[33].title).to.eql('Nursing Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[34].copName).to.eql('§482.24')\r",
											"  pm.expect(jsonData.payload[34].title).to.eql('Medical Record Services')\r",
											"\r",
											"    pm.expect(jsonData.payload[35].copName).to.eql('§482.25')\r",
											"  pm.expect(jsonData.payload[35].title).to.eql('Pharmaceutical Services')\r",
											"\r",
											"    pm.expect(jsonData.payload[36].copName).to.eql('§482.26')\r",
											"  pm.expect(jsonData.payload[36].title).to.eql('Radiologic Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[37].copName).to.eql('§482.27')\r",
											"  pm.expect(jsonData.payload[37].title).to.eql('Laboratory Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[38].copName).to.eql('§482.28')\r",
											"  pm.expect(jsonData.payload[38\r",
											"  ].title).to.eql('Food and Dietetic Services')\r",
											"\r",
											"      pm.expect(jsonData.payload[39].copName).to.eql('§482.30')\r",
											"  pm.expect(jsonData.payload[39].title).to.eql('Utilization Review')\r",
											"\r",
											"    pm.expect(jsonData.payload[40].copName).to.eql('§482.41')\r",
											"  pm.expect(jsonData.payload[40].title).to.eql('Physical Environment')\r",
											"\r",
											"    pm.expect(jsonData.payload[41].copName).to.eql('§482.42')\r",
											"  pm.expect(jsonData.payload[41].title).to.eql('Infection Prevention and Control and Antibiotic Stewardship Programs')\r",
											"\r",
											"     pm.expect(jsonData.payload[42].copName).to.eql('§482.43')\r",
											"  pm.expect(jsonData.payload[42].title).to.eql('Discharge Planning')\r",
											"\r",
											"     pm.expect(jsonData.payload[43].copName).to.eql('§482.45')\r",
											"  pm.expect(jsonData.payload[43].title).to.eql('Organ, Tissue and Eye Procurement')\r",
											"\r",
											"     pm.expect(jsonData.payload[44].copName).to.eql('§482.51')\r",
											"  pm.expect(jsonData.payload[44].title).to.eql('Surgical Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[45].copName).to.eql('§482.52')\r",
											"  pm.expect(jsonData.payload[45].title).to.eql('Anesthesia Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[46].copName).to.eql('§482.53')\r",
											"  pm.expect(jsonData.payload[46].title).to.eql('Nuclear Medicine Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[47].copName).to.eql('§482.54')\r",
											"  pm.expect(jsonData.payload[47].title).to.eql('Outpatient Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[48].copName).to.eql('§482.55')\r",
											"  pm.expect(jsonData.payload[48].title).to.eql('Emergency Services')\r",
											"\r",
											"     pm.expect(jsonData.payload[49].copName).to.eql('§482.56')\r",
											"  pm.expect(jsonData.payload[49].title).to.eql('Rehabilitation Services')\r",
											"\r",
											"       pm.expect(jsonData.payload[50].copName).to.eql('§482.57')\r",
											"  pm.expect(jsonData.payload[50].title).to.eql('Respiratory Care Services')\r",
											"\r",
											"       pm.expect(jsonData.payload[51].copName).to.eql('§482.58')\r",
											"  pm.expect(jsonData.payload[51].title).to.eql('Special requirements for hospital providers of long-term care services (“swing-beds”).')\r",
											"\r",
											"       \r",
											"       pm.expect(jsonData.payload[52].copName).to.eql('K100')\r",
											"  pm.expect(jsonData.payload[52].title).to.eql('Life Safety Code')\r",
											"\r",
											"       \r",
											"\r",
											"\r",
											"   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCoPByProgram?siteId={{Normal_SiteID}}&programId=69",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCoPByProgram"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"success should be False\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be 403\", function() {\r",
											" console.log(jsonData.errors.errorCode)\r",
											" pm.expect(jsonData.errors[0].errorCode).to.eql(403)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCoPByProgram?siteId=0&programId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCoPByProgram"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCoPByProgram?siteId=54586&programId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCoPByProgram"
									],
									"query": [
										{
											"key": "siteId",
											"value": "54586"
										},
										{
											"key": "programId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CREATE/UPDATE/DELETE WEBLINK",
			"item": [
				{
					"name": "Automation",
					"item": [
						{
							"name": "GetEPLinkDocuments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Get & Delete all WebLinks\", function () {\r",
											"pm.environment.set(\"EpLinkIDCount\",jsonData.payload.documents.length);\r",
											"\r",
											"console.log(jsonData.payload.documents.length);\r",
											"\r",
											"if(jsonData.payload.documents.length>0){\r",
											"for(i=0;i<jsonData.payload.documents.length;i++){\r",
											"\r",
											"console.log(\"epLinkDocumentID is\",jsonData.payload.documents[i].epLinkDocumentID)\r",
											"\r",
											"pm.environment.set(\"EpLinkIDs\",jsonData.payload.documents[i].epLinkDocumentID);\r",
											"}\r",
											"\r",
											"\r",
											"}\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": null,\r\n    \"epLinkDocumentID\": 0,\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 0,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetEPLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetEPLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete WebLink",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const EpLinkIDCount = pm.variables.get('EpLinkIDCount');\r",
											"\r",
											"console.log(EpLinkIDCount);\r",
											"\r",
											"\r",
											"if(EpLinkIDCount>0)\r",
											"\r",
											"{\r",
											"   postman.setNextRequest(\"Delete WebLink\");\r",
											"   postman.setNextRequest(\"GetEPLinkDocuments\");\r",
											"\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": 2,\r\n     \"epLinkDocumentID\": {{EpLinkIDs}},\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 1,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 0,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPLinkDocuments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"Verify documents should be Empty \", function () {\r",
											"console.log(jsonData.payload.documents)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.documents).to.eql([])\r",
											"\r",
											"})\r",
											"\r",
											"pm.test(\"Verify hasLink should be Null \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.statusFlags.hasLink).to.eql(0)\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": null,\r\n    \"epLinkDocumentID\": 0,\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 0,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetEPLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetEPLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create WebLink",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"WebLink Created\", function () {\r",
											"\r",
											"var Link= \"WWW.\" + pm.variables.replaceIn('{{$randomBsNoun}}') + \".com\";\r",
											"pm.environment.set('RandomLink',Link);\r",
											"\r",
											"var Description= pm.variables.replaceIn('{{$randomPhrase}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": 1,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"{{RandomLink}}\",\r\n    \"documentDescription\": \"{{RandomDescription}}\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": {{DivakarID}},\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 0,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPLinkDocuments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Get & Delete all WebLinks\", function () {\r",
											"pm.environment.set(\"EpLinkIDCount\",jsonData.payload.documents.length);\r",
											"\r",
											"console.log(jsonData.payload.documents.length);\r",
											"for(i=0;i<jsonData.payload.documents.length;i++){\r",
											"\r",
											"console.log(\"epLinkDocumentID is\",jsonData.payload.documents[i].epLinkDocumentID)\r",
											"\r",
											"pm.environment.set(\"EpLinkID\",jsonData.payload.documents[i].epLinkDocumentID);\r",
											"\r",
											"}\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": null,\r\n    \"epLinkDocumentID\": 0,\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 279324,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetEPLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetEPLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update WebLink with type -Filepath",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var UpdateLink= \"www.\" + pm.variables.replaceIn('{{$randomCompanyName}}') + \".com\";\r",
											"pm.environment.set('UpdateLink',UpdateLink);\r",
											"\r",
											"var UpdateDescription= pm.variables.replaceIn('{{$randomAdjective}}');\r",
											"pm.environment.set('UpdateDescription',UpdateDescription);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"linkedDocumentTypeID\": 2,\r\n  \"epLinkDocumentID\": {{EpLinkID}},\r\n  \"documentLink\": \"{{UpdateLink}}\",\r\n  \"documentDescription\": \"{{UpdateDescription}}\",\r\n  \"deleteFlag\": 0,\r\n  \"createdByUserID\": 597472,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"createdBy\": \"string\",\r\n  \"epUserRoleID\": 3,\r\n  \"userID\": 597472,\r\n  \"editFlag\": 0,\r\n  \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Updated EPLink",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"let res= pm.response.json();\r",
											"\r",
											"console.log(\"Response is\",res);\r",
											"\r",
											"console.log(\"1st linkedDocumentTypeID is:-\",res.payload.documents[0].linkedDocumentTypeID);\r",
											"\r",
											"pm.test(\"Verify linkedDocumentTypeID as 2\",function()\r",
											"{\r",
											"    pm.expect(res.payload.documents[0].linkedDocumentTypeID).to.eql(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify UpdateddocumentLink\",function()\r",
											"{\r",
											"    pm.expect(res.payload.documents[0].documentLink).to.eql(pm.environment.get(\"UpdateLink\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Verify UpdateddocumentDescription\",function()\r",
											"{\r",
											"    pm.expect(res.payload.documents[0].documentDescription).to.eql(pm.environment.get(\"UpdateDescription\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": null,\r\n    \"epLinkDocumentID\": 0,\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetEPLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetEPLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete WebLink",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify documentLink\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.statusFlags.hasLink).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"linkedDocumentTypeID\": 2,\r\n  \"epLinkDocumentID\": {{EpLinkID}},\r\n  \"documentLink\": \"https://c:/\",\r\n  \"documentDescription\": \"filepath\",\r\n  \"deleteFlag\": 1,\r\n  \"createdByUserID\": {{KamalID}},\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"createdBy\": \"string\",\r\n  \"epUserRoleID\": 3,\r\n  \"userID\": 597472,\r\n  \"editFlag\": 0,\r\n  \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-Check WebLink",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"check WebLinks\", function () {\r",
											"\r",
											"\r",
											"if(jsonData.payload.statusFlags.hasLink){\r",
											"console.log(\"hasLink is\",jsonData.payload.statusFlags.hasLink);\r",
											"console.log(\"Deleted- has Link is 0\");\r",
											"\r",
											"}else\r",
											"console.log(\"hasLink have value\")\r",
											"console.log(\"hasLink is\",jsonData.payload.statusFlags.hasLink);\r",
											"console.log(\"Deleted- has Link is 0\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Verify documentLink\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.statusFlags.hasLink).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n    \"linkedDocumentTypeID\": null,\r\n    \"epLinkDocumentID\": {{EpLinkID}},\r\n    \"documentLink\": \"www.google.com\",\r\n    \"documentDescription\": \"addedgoogle\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 0,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 0,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetEPLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetEPLinkDocuments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Status Scenario",
					"item": [
						{
							"name": "Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": null,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 42115,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"https//NewWeblink/.com\",\r\n    \"documentDescription\": \"NewWeblink\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 85,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": null,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"https//NewWeblink/.com\",\r\n    \"documentDescription\": \"NewWeblink\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 85,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentLink",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56564,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": null,\r\n    \"documentDescription\": \"NewWeblink\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 85,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid documentDescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56564,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"https//NewWeblink/.com\",\r\n    \"documentDescription\": null,\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 597472,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid API Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56564,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"https//NewWeblink/.com\",\r\n    \"documentDescription\": \"hi\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 597472,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocument",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocument"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Error Message '405 Method Not allowed' when use GET Method insteadof POST-Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": 56564,\r\n    \"linkedDocumentTypeID\": 2,\r\n    \"epLinkDocumentID\": null,\r\n    \"documentLink\": \"https//NewWeblink/.com\",\r\n    \"documentDescription\": \"hi\",\r\n    \"deleteFlag\": 0,\r\n    \"createdByUserID\": 597472,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"createdBy\": \"string\",\r\n    \"epUserRoleID\": 3,\r\n    \"userID\": 597472,\r\n    \"editFlag\": 1,\r\n    \"urlToDoc\": \"string\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						},
						{
							"name": "WithOut Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify Error Message '415 Unsupported Media Type' shown POST without Body-Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/UpdateLinkDocuments",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"UpdateLinkDocuments"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET SETUP MENU",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Program Admin",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"var jsonData = pm.response.json();\r",
															"//userid , siteid, programid - \r",
															"//userid = access token -only for that person not anyone else \r",
															"//{{BaseURL}}/siteuser/api/User/GetMenus?siteid=5\r",
															"//need to see if program id is required. \r",
															"// response body displays - authorizedroles -  no need for this \r",
															"// external url is not required \r",
															"// for main menu - double check if is disabled should be there or not.......\r",
															"// title , owner , internal url and page id are required fields nothing else \r",
															"//role id and siteid its not displaying-\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menus- Program Admin - Mock Survey Site - Verify for setupMenu_title for following *Role - Program Admin\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Communication');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Download JCR Mock Survey Findings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[11].title).to.eql('Submit Focused Standards Assessment');\r",
															"\r",
															"                                                               \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Mock Survey Site - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															" console.log(jsonData)\r",
															"  console.log(jsonData.payload.setupMenu.length)\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Mock Survey Site - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(12)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Mock Survey Site - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Mock Survey Site - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 15320,\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"GET SETUP Menu - Program Admin - Normal Site - Verify for setupMenu_title for following *Role - Program Admin\", function () {\r",
															"\r",
															"    console.log(jsonData.payload.setupMenu[0].title)\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Communication');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Submit Focused Standards Assessment');\r",
															"\r",
															" \r",
															"                                                               \r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Normal Site - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Normal Site - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(10)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Normal Site - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Normal Site - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with EST Enabled - Verify for setupMenu_title for following *Role - Program Admin\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[11].title).to.eql('Download JCR Mock Survey Findings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[12].title).to.eql('Submit Focused Standards Assessment');\r",
															"*/\r",
															"                                                               \r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with EST Enabled - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with EST Enabled - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(9)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with EST Enabled - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with EST Enabled - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 33,\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with Disabled list",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with Disabled list - Verify for setupMenu_title for following *Role - Program Admin\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage User Groups');\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Submit Focused Standards Assessment');\r",
															"*/\r",
															"                                                               \r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with Disabled list - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with Disabled list - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(5)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with Disabled list - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Program Admin - Site with Disabled list - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 67103,\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{AccessToken}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Site Manager",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Normal Site - Verify for setupMenu_title for following *Role - Site Manager \", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Email Settings');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Submit Focused Standards Assessment');\r",
															"*/\r",
															"                                                               \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Normal Site - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Normal Site - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(3)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Normal Site - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Normal Site - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Mock Survey Site - Verify for setupMenu_title for following *Role - Site Manager \", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Email Settings');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Submit Focused Standards Assessment');\r",
															"\r",
															"    */                                                           \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Mock Survey Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Mock Survey Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(3)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Mock Survey Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Mock Survey Site -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Site Manager - Site with EST Enabled - Verify for setupMenu_title for following *Role - Site Manager \", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Email Settings');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Submit Focused Standards Assessment');\r",
															"           */                                                   \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(3)\r",
															"});\r",
															"\r",
															"pm.test(\"errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 33,\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Staff Member",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - staff member - Normal Site - Verify for setupMenu_title for following *Role - staff member \", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('My Profile');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"                                                            \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Normal Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Normal Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(2)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Normal Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Normal Site -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Memberr - Mock Survey Site - Verify for setupMenu_title for following *Role - staff member \", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('My Profile');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"\r",
															"                                                               \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Mock Survey Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Mock Survey Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(2)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Mock Survey Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Mock Survey Site -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 54587,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"Verify for setupMenu_title for following  *Role -Staff Member\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('My Profile');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage User Groups');\r",
															"                                                              \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Site With EST Enabled - Verify for setupMenu_title for following *Role - staff member \", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member - Site With EST Enabled Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(2)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member -Site With EST Enabled Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Staff Member -Site With EST Enabled Site -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 33,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey Reviewer",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Mock Survey Site - Verify for setupMenu_title for following list\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Mock Survey System Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[11].title).to.eql('Mock Survey Dashboard');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[12].title).to.eql('Download RFI / ESC');\r",
															"      */                                                        \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Mock Survey Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Mock Survey Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(9)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Mock Survey Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 15320,\r\n  \"roleID\": 9,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Site With EST Enabled - Verify for setupMenu_title for following list\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Mock Survey System Settings');\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Mock Survey Setup');\r",
															"pm.expect(jsonData.payload.setupMenu[11].title).to.eql('Mock Survey Dashboard');\r",
															"pm.expect(jsonData.payload.setupMenu[12].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[13].title).to.eql('Download JCR Mock Survey Findings');\r",
															"     */                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Site With EST Enabled -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Site With EST Enabled -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(9)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Site With EST Enabled -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey Reviewer - Site With EST Enabled -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 33,\r\n  \"roleID\": 9,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey User",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Mock Survey Site Enabled - Verify for setupMenu_title for following list\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Download RFI / ESC');\r",
															"        */                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Mock Survey Site -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Mock Survey Site -No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(9)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Mock Survey Site -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Mock Survey Site - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 8,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Site With EST Enabled - Verify for setupMenu_title for following list\", function () {\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[0].title).to.eql('Site and User Maintenance');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[1].title).to.eql('Manage Departments');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[2].title).to.eql('Manage Dropdowns');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[3].title).to.eql('Guest Access Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[4].title).to.eql('Manage System Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[5].title).to.eql('Manage User Groups');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[6].title).to.eql('Tracer Category Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[7].title).to.eql('Email Settings');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[8].title).to.eql('Email Communication');\r",
															"/*\r",
															"pm.expect(jsonData.payload.setupMenu[9].title).to.eql('Mock Survey Setup');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[10].title).to.eql('Download RFI / ESC');\r",
															"\r",
															"pm.expect(jsonData.payload.setupMenu[11].title).to.eql('Download JCR Mock Survey Findings');\r",
															"*/\r",
															"                                                               \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Site With EST Enabled - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Site With EST Enabled - No Duplicate setupMenu\", function() {\r",
															" console.log(jsonData.payload.setupMenu.length)\r",
															" pm.expect(jsonData.payload.setupMenu.length).to.eql(9)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Site With EST Enabled - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"GET SETUP Menu - Mock Survey User - Site With EST Enabled - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 33,\r\n  \"roleID\": 8,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET SETUP Menu - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"GET SETUP Menu - Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"GET SETUP Menu - Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET SETUP Menu - Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenu",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenu"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"GET SETUP Menu - Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"GET SETUP Menu - Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET SETUP Menu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"GET SETUP Menu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": null,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET SETUP Menu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"GET SETUP Menu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": null,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET SETUP Menu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"GET SETUP Menu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": null,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET MOCK SURVEY HISTORY",
			"item": [
				{
					"name": "Mock Survey Findings",
					"item": [
						{
							"name": "Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mocksurvey/Findings History tab",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].epTextID + \" and \" + jsonData.payload[i].foundBy +  \" does not display null \", function () {\r",
											"console.log(jsonData.payload[i].epTextID)\r",
											"console.log(jsonData.payload[i].foundBy)\r",
											"pm.expect(jsonData.payload[i].epTextID).to.exist\r",
											"pm.expect(jsonData.payload[i].epTextID).to.not.be.null\r",
											"pm.expect(jsonData.payload[i].foundBy).to.exist\r",
											"pm.expect(jsonData.payload[i].foundBy).to.not.be.null\r",
											"})\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Mock Survey Recommendations",
					"item": [
						{
							"name": "Recommendations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"foundBy is not null\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.payload.forEach(function (item) {\r",
											"        pm.expect(item.foundBy).to.not.be.null;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 41533,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56588,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid EPTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 0,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56588,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56588,\r\n  \"roleID\": 0,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mismatch Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"roleID\": 1,\r\n  \"isFindingsHistory\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/MockSurvey/GetMockSurveyHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"MockSurvey",
										"GetMockSurveyHistory"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{AccessToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP-GET MAIN MENU",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Program Admin",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(\"---Standards Get mainMenu - Normal site----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus- Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus  -Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus- Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus - Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus -Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus - Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus - Get mainMenu - Normal site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - Normal site success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - Normal site errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\" Get mainMenu - Normal site Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title- Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus- Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus - Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus - Get mainMenu - Mock Survey site  for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus - Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus- Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].isDisabled).to.eql(true);\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus - Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus - Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus - Get mainMenu - Mock Survey site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - Mock Survey site success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - Mock Survey site errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu - Mock Survey site Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title - Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus - Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus - Get mainMenu - EST Enabled site  for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus - Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus -Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus- Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus - Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus - Get mainMenu - EST Enabled site  for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus -Get mainMenu - EST Enabled site for following *Role - Program Admin\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - EST Enabled site- success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu - EST Enabled site- errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu - EST Enabled site - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Site Manager",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for Get mainMenu -Normal site for Get mainMenu -Normal site for following *Role - Site manager Admin\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Normal site for following *Role - Site Manager\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Site Manager - success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Site Manager - errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Site Manager - Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Site manager\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Site Manager -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Site Manager -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Site Manager -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for Get mainMenu - EST Enabled site for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].isDisabled).to.eql(true);\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu - EST Enabled site for following *Role - Site manager\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Site Manager -success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Site Manager -errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Site Manager -Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"roleID\": 2,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Staff Member",
									"item": [
										{
											"name": "Normal Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Normal site for following *Role - staff member\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].isDisabled).to.eql(true);\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Staff Member-success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Staff Member-errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Normal site for following Staff Member-Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Staff member\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Staff Member-success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Staff Member-errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Staff Member-Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[2].title).to.eql('Bulk Plan of Action');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[1].title).to.eql('Bulk Scoring');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[2].title).to.eql('Bulk Plan of Correction');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for TJC Scoring Assignment subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"---TJC Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[1].menuLinks[1].title).to.eql('Re-assign EPs');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Scoring Assignment subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"---CMS Scoring Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[0].title).to.eql('New Scoring Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[2].menuLinks[1].title).to.eql('Re-assign CoP Tags');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -EST Enabled site for following *Role - staff member\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Staff Member- success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Staff Member-errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Staff Member-Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey Reviewer",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey Reviewer- success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey Reviewer-errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey Reviewer-Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"roleID\": 9,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -EST Enabled site for following *Role - Mock Survey Reviewer\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey Reviewer- success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey Reviewer- errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey Reviewer- Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n   \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"roleID\": 9,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Mock Survey User",
									"item": [
										{
											"name": "Mock Survey Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for subMenus_Title for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].isDisabled).to.eql(true);\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].isDisabled).to.eql(true);\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu -Mock Survey site for following *Role - Mock Survey user\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey User- success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey User-errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -Mock Survey site for following Mock Survey User- Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"roleID\": 8,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site with EST Enabled",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"    var jsonData = pm.response.json();\r",
															"   \r",
															"pm.test(\"Verify for mainMenu_Title for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[2].title).to.eql('Assignments');\r",
															"pm.expect(jsonData.payload.mainMenu[3].title).to.eql('Reports');\r",
															"                                                          \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Tracers subMenus_Title for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[0].title).to.eql('Tracers & Observations');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[1].title).to.eql('Create New TJC Tracer');\r",
															"pm.expect(jsonData.payload.mainMenu[0].subMenus[0].menuLinks[2].title).to.eql('Create New CMS Tracer');\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Standards subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"\r",
															"console.log(\"---Standards subMenus----\")\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[0].menuLinks[0].title).to.eql('Standards and Scoring');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for CMS Compliance subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"    console.log(\"---CMS Compliance subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[1].subMenus[1].menuLinks[0].title).to.eql('Regulations and Compliance');\r",
															"\r",
															"                                                        \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Task Assignment subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"    console.log(\"---Task Assignment subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[0].title).to.eql('Manage Tasks');\r",
															"pm.expect(jsonData.payload.mainMenu[2].subMenus[0].menuLinks[1].title).to.eql('Create Tasks');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Verify for Create Report subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"    console.log(\"---Create Report subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title)\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[3].title).to.eql('Score Analyzer');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[0].menuLinks[4].title).to.eql('Documentation Analyzer');\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Verify for My Saved Reports subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"    console.log(\"--My Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[1].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"pm.test(\"Verify for Site Saved Reports subMenus for Get mainMenu - EST Enabled site for following *Role - Mock Survey User\", function () {\r",
															"    console.log(\"--Site Saved Reports subMenus----\")\r",
															"\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title)\r",
															"console.log(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title)\r",
															"\r",
															"\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[0].title).to.eql('Tracers');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[1].title).to.eql('Standards');\r",
															"pm.expect(jsonData.payload.mainMenu[3].subMenus[2].menuLinks[2].title).to.eql('Enterprise Tracers');\r",
															"\r",
															"                                                      \r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey User-  success should be TRUE\", function() {\r",
															" console.log(jsonData.success)\r",
															" pm.expect(jsonData.success).to.eql(true)\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey User- errors should be null\", function() {\r",
															" console.log(jsonData.errors)\r",
															" pm.expect(jsonData.errors).to.eql(null)\r",
															"});\r",
															"\r",
															"pm.test(\"Get mainMenu -EST Enabled site for following Mock Survey User- Verify Json Count should be 3\", function () {\r",
															" console.log(jsonData)\r",
															"var JsonCount  = Object.keys(jsonData).length;\r",
															"console.log(JsonCount)\r",
															"pm.expect(JsonCount).to.eql(3);\r",
															"                                      \r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"userID\": null,\r\n    \"siteID\": {{ESTEnabled_SiteID}},\r\n  \"roleID\": 8,\r\n  \"cycleID\": 38,\r\n  \"programID\": 23,\r\n  \"ProgramGroupTypeID\": 1\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"siteuser",
														"api",
														"User",
														"GetMenus"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Get mainMenu - Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Get mainMenu - Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenu",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenu"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid HTTP Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Get mainMenu - Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Get mainMenu - Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\")\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get mainMenu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get mainMenu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": null,\r\n  \"roleID\": 4,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get mainMenu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get mainMenu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": null,\r\n  \"cycleID\": 38,\r\n  \"programID\": 2,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Get mainMenu - Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get mainMenu - Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"siteID\": 41533,\r\n  \"roleID\": 1,\r\n  \"cycleID\": 38,\r\n  \"programID\": null,\r\n  \"programGroupID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetMenus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetMenus"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-SEARCH STANDARD",
			"item": [
				{
					"name": "Business Scenario",
					"item": [
						{
							"name": "SearchStandard - Standards/EPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs searchOverview should be null\", function() {\r",
											" console.log(jsonData.payload.searchOverview)\r",
											" pm.expect(jsonData.payload.searchOverview).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs searchGlossary should be null\", function() {\r",
											" console.log(jsonData.payload.searchGlossary)\r",
											" pm.expect(jsonData.payload.searchGlossary).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Standards/EPs searchRationale should be null\", function() {\r",
											" console.log(jsonData.payload.searchRationale)\r",
											" pm.expect(jsonData.payload.searchRationale).to.eql(null)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify standards Count in SearchStandard - Standards/EPs should be 277\", function() {\r",
											" console.log(jsonData.payload.standardsCount)\r",
											" pm.expect(jsonData.payload.standardsCount).to.eql(277)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify overview Count in SearchStandard - Standards/EPs should be 32\", function() {\r",
											" console.log(jsonData.payload.overviewCount)\r",
											" pm.expect(jsonData.payload.overviewCount).to.eql(32)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify glossary Count in SearchStandard - Standards/EPs should be 11\", function() {\r",
											" console.log(jsonData.payload.glossaryCount)\r",
											" pm.expect(jsonData.payload.glossaryCount).to.eql(11)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify rationale Count in SearchStandard - Standards/EPs should be 124\", function() {\r",
											" console.log(jsonData.payload.rationaleCount)\r",
											" pm.expect(jsonData.payload.rationaleCount).to.eql(124)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify standardText in SearchStandard - searchStandards should have the search text- Hospital\", function() {\r",
											" console.log(jsonData.payload.searchStandards[0].standardText)\r",
											" pm.expect(jsonData.payload.searchStandards[0].standardText).includes(\"hospital\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"Hospital\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"tabID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard - Glossary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"Verify SearchStandard - Glossary success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Glossary errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Glossary Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Glossary searchOverview should be null\", function() {\r",
											" console.log(jsonData.payload.searchOverview)\r",
											" pm.expect(jsonData.payload.searchOverview).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Glossary searchStandards should be null\", function() {\r",
											" console.log(jsonData.payload.searchStandards)\r",
											" pm.expect(jsonData.payload.searchStandards).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Glossary searchRationale should be null\", function() {\r",
											" console.log(jsonData.payload.searchRationale)\r",
											" pm.expect(jsonData.payload.searchRationale).to.eql(null)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify standards Count in SearchStandard - Glossary should be 20\", function() {\r",
											" console.log(jsonData.payload.standardsCount)\r",
											" pm.expect(jsonData.payload.standardsCount).to.eql(20)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify overview Count in SearchStandard - Glossary should be 7\", function() {\r",
											" console.log(jsonData.payload.overviewCount)\r",
											" pm.expect(jsonData.payload.overviewCount).to.eql(7)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify glossary Count in SearchStandard - Glossary should be 10\", function() {\r",
											" console.log(jsonData.payload.glossaryCount)\r",
											" pm.expect(jsonData.payload.glossaryCount).to.eql(10)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify rationale Count in SearchStandard - Glossary should be 28\", function() {\r",
											" console.log(jsonData.payload.rationaleCount)\r",
											" pm.expect(jsonData.payload.rationaleCount).to.eql(28)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify glossaryDefinitionText in SearchStandard - Glossary should have the search text- Critical\", function() {\r",
											" console.log(jsonData.payload.searchGlossary[0].glossaryDefinitionText)\r",
											" pm.expect(jsonData.payload.searchGlossary[0].glossaryDefinitionText).includes(\"critical\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"Critical\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard - Overviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"Verify SearchStandard - Overviews success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Overviews errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Overviews Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Overviews searchOverview should be null\", function() {\r",
											" console.log(jsonData.payload.searchGlossary)\r",
											" pm.expect(jsonData.payload.searchGlossary).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Overviews searchStandards should be null\", function() {\r",
											" console.log(jsonData.payload.searchStandards)\r",
											" pm.expect(jsonData.payload.searchStandards).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Overviews searchRationale should be null\", function() {\r",
											" console.log(jsonData.payload.searchRationale)\r",
											" pm.expect(jsonData.payload.searchRationale).to.eql(null)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify rationaleCount Count in SearchStandard - rationaleCount should be 0\", function() {\r",
											" console.log(jsonData.payload.rationaleCount)\r",
											" pm.expect(jsonData.payload.rationaleCount).to.eql(0)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify standardsCount Count in SearchStandard - standardsCount should be 4\", function() {\r",
											" console.log(jsonData.payload.standardsCount)\r",
											" pm.expect(jsonData.payload.standardsCount).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Overviews Count in SearchStandard - overviewCount should be 2\", function() {\r",
											" console.log(jsonData.payload.overviewCount)\r",
											" pm.expect(jsonData.payload.overviewCount).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify glossaryCount Count in SearchStandard - glossaryCount should be 3\", function() {\r",
											" console.log(jsonData.payload.glossaryCount)\r",
											" pm.expect(jsonData.payload.glossaryCount).to.eql(3)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify OverviewsDefinitionText in SearchStandard - Overviews should have the search text- National Fire Protection Association\", function() {\r",
											" console.log(jsonData.payload.searchOverview[0].chapterText)\r",
											" pm.expect(jsonData.payload.searchOverview[0].chapterText).includes(\"National Fire Protection Association\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"National Fire Protection Association\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard - Rationale and Intros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const jsonData= pm.response.json();\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros searchOverview should be null\", function() {\r",
											" console.log(jsonData.payload.searchOverview)\r",
											" pm.expect(jsonData.payload.searchOverview).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros searchStandards should be null\", function() {\r",
											" console.log(jsonData.payload.searchStandards)\r",
											" pm.expect(jsonData.payload.searchStandards).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify SearchStandard - Rationale and Intros searchGlossary should be null\", function() {\r",
											" console.log(jsonData.payload.searchGlossary)\r",
											" pm.expect(jsonData.payload.searchGlossary).to.eql(null)\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify standards Count in SearchStandard - Rationale and Intros should be 0\", function() {\r",
											" console.log(jsonData.payload.standardsCount)\r",
											" pm.expect(jsonData.payload.standardsCount).to.eql(0)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify overview Count in SearchStandard - Rationale and Intros should be 0\", function() {\r",
											" console.log(jsonData.payload.overviewCount)\r",
											" pm.expect(jsonData.payload.overviewCount).to.eql(0)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify glossary Count in SearchStandard - Rationale and Intros should be 0\", function() {\r",
											" console.log(jsonData.payload.glossaryCount)\r",
											" pm.expect(jsonData.payload.glossaryCount).to.eql(0)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify rationale Count in SearchStandard - Rationale and Intros should be 1\", function() {\r",
											" console.log(jsonData.payload.rationaleCount)\r",
											" pm.expect(jsonData.payload.rationaleCount).to.eql(1)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify rationaleText in SearchStandard - Rationale and Intros should have the search text- Emergency electrical power supply\", function() {\r",
											" console.log(jsonData.payload.searchRationale[0].rationaleText)\r",
											" pm.expect(jsonData.payload.searchRationale[0].rationaleText).includes(\"Emergency electrical power supply\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"Emergency electrical power supply\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenario",
					"item": [
						{
							"name": "SearchStandard - Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"hospital\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard - Invalid Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify searchGlossary should be Emptyfor Invalid Program for Search Standard\", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.searchGlossary).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"test\",\r\n  \"programID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard - Invalid Search text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify searchGlossary should be Empty for Invalid Search text for Search Standard\", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.searchGlossary).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 1,\r\n  \"searchText\": \"@\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						},
						{
							"name": "SearchStandard -Invalid ProductId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify searchStandards should be Empty for Invalid ProductId for Search Standard\", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload.searchStandards).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"productID\": 0,\r\n  \"searchText\": \"test\",\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"tabID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Search/GetSearchResult",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Search",
										"GetSearchResult"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET RETRIEVE FILE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Get PDF for Introduction (INTRO)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=8f05f7a0-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "8f05f7a0-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Patient Safety Systems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=817de8ac-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "817de8ac-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for The Accreditation Process",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=d9b1efa6-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "d9b1efa6-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Standards Applicability Grid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=d3b1efa6-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "d3b1efa6-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Sentinel Event Policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=d3b1efa6-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "d3b1efa6-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for The Joint Commission Quality Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=8f05f7a0-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "8f05f7a0-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Performance Measurement and the ORYX Initiative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=817de8ac-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "817de8ac-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Required Written Documentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=8f05f7a0-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "8f05f7a0-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Early Survey Policy (ESP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=d9b1efa6-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "d9b1efa6-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get PDF for Primary Care Medical Home",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verify \" +  jsonData.payload.fileStreamId + \" and \" + jsonData.name +   \" and \" + jsonData.payload.createdDate + \" does not display null \", function () {\r",
											" console.log(jsonData.payload.fileStreamId)\r",
											" console.log(jsonData.payload.name)\r",
											" console.log(jsonData.payload.createdDate)\r",
											" pm.expect(jsonData.payload.fileStreamId).to.exist\r",
											"pm.expect(jsonData.payload.fileStreamId).to.not.be.null\r",
											"pm.expect(jsonData.payload.name).to.exist\r",
											"pm.expect(jsonData.payload.name).to.not.be.null\r",
											"pm.expect(jsonData.payload.createdDate).to.exist\r",
											"pm.expect(jsonData.payload.createdDate).to.not.be.null\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/RetrieveFile?fileStreamId=817de8ac-7c8b-ed11-8c63-000d3a9802a3",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "817de8ac-7c8b-ed11-8c63-000d3a9802a3"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Verify - Invalid FileID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/RetrieveFile?fileStreamId=",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify - Invalid FileID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/RetrieveFile?fileStreamId=0000000",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"RetrieveFile"
									],
									"query": [
										{
											"key": "fileStreamId",
											"value": "0000000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "UPDATE BULK PLAN OF ACTION",
			"item": [
				{
					"name": "BUSINESS SCENARIOS",
					"item": [
						{
							"name": "Organization Findings",
							"item": [
								{
									"name": "Update Organization findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response as true\",function()\r",
													"{\r",
													"     pm.expect(res.payload).to.eql(true);\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Description);\r",
													"\r",
													"pm.environment.set('Description',Description);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 0,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2023-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 1,\r\n    \"epDocumentationText\": \"{{RandomDescription}}\",\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 56464,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"standardID\": 13360\r\n    }\r\n     \r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPPlanOfAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Organization Docs Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"console.log(res.payload.epDocuments.epDocumentationText);\r",
													"\r",
													"pm.test(\"Verify epDocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.collectionVariables.get(\"Description\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"hcoid\": 337843,\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": {{epTextId}},\r\n    \"epid\": 54649,\r\n    \"documentationTypeID\": 1,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"isOtherFindings\": true,\r\n    \"userEmail\": \"kkanagaraj@jcrcinc.com\",\r\n    \"isSiteEST\": true,\r\n    \"corpScore\": \"99-disabled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Documentation",
												"GetOrganizationDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Plan OF Action",
							"item": [
								{
									"name": "Update Plan OF Action",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response as true\",function()\r",
													"{\r",
													"    pm.expect(res.payload).to.eql(true);\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Description);\r",
													"\r",
													"pm.collectionVariables.set('Description',Description);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 2,\r\n    \"epDocumentationText\": \"{{RandomDescription}}\",\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": {{epTextId}},\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14696,\r\n            \"standardID\": 13360\r\n        },\r\n        {\r\n            \"epTextID\": 25797,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25806,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25813,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25817,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25824,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25826,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 55768,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25839,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 25843,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        },\r\n        {\r\n            \"epTextID\": 54352,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 14746,\r\n            \"standardID\": 13380\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPPlanOfAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Organization Docs Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"console.log(res.payload.epDocuments.epDocumentationText);\r",
													"\r",
													"pm.test(\"Verify epDocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.collectionVariables.get(\"Description\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"hcoid\": 337843,\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": {{epTextId}},\r\n    \"epid\": 54649,\r\n    \"documentationTypeID\": 2,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"isOtherFindings\": true,\r\n    \"userEmail\": \"kkanagaraj@jcrcinc.com\",\r\n    \"isSiteEST\": true,\r\n    \"corpScore\": \"99-disabled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Documentation",
												"GetOrganizationDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Sustainment Plan",
							"item": [
								{
									"name": "Update Sustainment Plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response as true\",function()\r",
													"{\r",
													"     pm.expect(res.payload).to.eql(true);\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Description);\r",
													"\r",
													"pm.collectionVariables.set('Description',Description);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 3,\r\n    \"epDocumentationText\": \"{{RandomDescription}}\",\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n  \"epInfo\": [\r\n    {\r\n       \"epTextID\": {{epTextId}},\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"standardID\": 13360\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPPlanOfAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Organization Docs Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"console.log(res.payload.epDocuments.epDocumentationText);\r",
													"\r",
													"pm.test(\"Verify epDocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.collectionVariables.get(\"Description\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"hcoid\": 337843,\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": {{epTextId}},\r\n    \"epid\": 54649,\r\n    \"documentationTypeID\": 3,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"isOtherFindings\": true,\r\n    \"userEmail\": \"kkanagaraj@jcrcinc.com\",\r\n    \"isSiteEST\": true,\r\n    \"corpScore\": \"99-disabled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Documentation",
												"GetOrganizationDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Internal Notes",
							"item": [
								{
									"name": "Update Internal Notes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Description);\r",
													"\r",
													"pm.collectionVariables.set('Description',Description);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const res = pm.response.json();\r",
													"\r",
													"pm.test(\"Verify Response as true\",function()\r",
													"{\r",
													"     pm.expect(res.payload).to.eql(true);\r",
													"    pm.expect(res.success).to.eql(true);\r",
													"    pm.expect(res.errors).to.eql(null);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 85,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 4,\r\n    \"epDocumentationText\": \"{{RandomDescription}}\",\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 36772,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": {{epTextId}},\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"standardID\": 13360\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPPlanOfAction"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Organization Docs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"console.log(res.payload.epDocuments.epDocumentationText);\r",
													"\r",
													"pm.test(\"Verify epDocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.epDocuments.epDocumentationText).to.eql(pm.collectionVariables.get(\"Description\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userID\": 0,\r\n    \"hcoid\": 337843,\r\n    \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"epTextID\": {{epTextId}},\r\n    \"epid\": 54649,\r\n    \"documentationTypeID\": 4,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"isOtherFindings\": true,\r\n    \"userEmail\": \"kkanagaraj@jcrcinc.com\",\r\n    \"isSiteEST\": true,\r\n    \"corpScore\": \"99-disabled\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Documentation",
												"GetOrganizationDocumentation"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"",
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code",
					"item": [
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"siteID\": 0,\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": null,\r\n    \"userID\": 85,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 4,\r\n    \"epDocumentationText\": \"QA Update4\",\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 36772,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateBulkEPPlanOfAction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateBulkEPPlanOfAction"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epDocumentationText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as false\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"siteID\": {{siteId}},\r\n    \"programID\": {{programId}},\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 85,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-20T06:53:37.095Z\",\r\n    \"documentationTypeID\": 4,\r\n    \"epDocumentationText\": null,\r\n    \"compliantDate\": \"2022-07-20T06:53:37.095Z\",\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 36772,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPPlanOfAction",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateBulkEPPlanOfAction"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "92984E07602138E2A1759D02139442A965B5C2A62925D43151CBEDA5AEC2CB85",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UPDATE BULK EP SCORE",
			"item": [
				{
					"name": "BUSINESS SCENARIOS",
					"item": [
						{
							"name": "Individual Scored By Staff Member",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 99,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  \r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 0,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 2,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 6,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 15320,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 639833,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n        \r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 1122,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1123,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1211,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 1222,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 1223,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 1321,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 1322,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 1,\r\n  \"scoreID\": 1323,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Preliminary Scored By Staff Member",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 99,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 0,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 2,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 6,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1121,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1122,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1123,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1221,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1222,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 2,\r\n  \"scoreID\": 1223,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1321,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1322,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 2,\r\n    \"scoreID\": 1323,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Final Scored By Program Admin/ Site Manager",
							"item": [
								{
									"name": "Not Scored",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 99,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Insufficient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Satisfactory Compliance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 2,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Not Applicable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 6,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1121,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1122,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Low/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1123,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1221,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1222,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "Moderate/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1223,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Limited",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1321,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/Pattern",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1322,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "High/WideSpread",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15804,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"additionalFilterID\": 1,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 0,\r\n  \"epTextID\": 0,\r\n  \"userID\": 597472,\r\n  \"levelID\": 0,\r\n  \"scoreType\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1323,\r\n  \"comments\": \"\",\r\n  \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n  \"isUpdateDateOnly\": false,\r\n  \"isAcceptTCScore\": false,\r\n  \"epInfo\": [\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\": 14746,\r\n      \"standardID\": 13380\r\n    },\r\n     {\r\n      \"epTextID\": 25797,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25806,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25813,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25817,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25824,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25826,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 55768,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25839,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 25843,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    },\r\n    {\r\n      \"epTextID\": 54352,\r\n      \"chapterID\": 54,\r\n      \"standardTextID\":14746 ,\r\n      \"standardID\": 13380\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Scoring",
												"UpdateBulkEPScore"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"const res = pm.response.json();",
									"",
									"pm.test(\"Verify Response as true\",function()",
									"{",
									"     pm.expect(res.payload).to.eql(true);",
									"    pm.expect(res.success).to.eql(true);",
									"    pm.expect(res.errors).to.eql(null);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "STATUS CODE",
					"item": [
						{
							"name": "InvalidScoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": ,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": false,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid IsUpdateDateOnly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": ,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": null,\r\n    \"isAcceptTCScore\": false,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 0,\r\n            \"standardID\": 0\r\n        },\r\n        {\r\n            \"epTextID\": 0,\r\n            \"chapterID\": 54,\r\n            \"standardTextID\": 30306,\r\n            \"standardID\": 13405\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without epInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 760,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": ,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": ,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"2022-07-15T06:29:39.512Z\",\r\n    \"isUpdateDateOnly\": true,\r\n    \"isAcceptTCScore\": false\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "A939A2A5357740DD16FECFFD6D346B17DBBEE7368854AA58D32A1977EA0C329B",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "114C376E4D2FEF51134171217B41E68944B339E776F4799D4B186659834A4D3C",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "CREATE/UPDATE INDIVIDUAL & PRELIMINARY USER",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetEPScoreAssignments Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Get the assignment id from the response\r",
											"var responseBody = pm.response.json();\r",
											"var assignmentId = responseBody.payload[0].id;\r",
											"\r",
											"// Set the assignment id as an environment variable\r",
											"pm.environment.set(\"assignmentId\", assignmentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 3572,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38171,\r\n  \"isHistoryGrid\": false,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/GetEPScoresAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"GetEPScoresAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteEPScoreAssignments Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"   var jsonData = pm.response.json();\r",
											"\r",
											"   \r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"Verify Json Count should be 3\", function () {\r",
											" console.log(jsonData)\r",
											"var JsonCount  = Object.keys(jsonData).length;\r",
											"console.log(JsonCount)\r",
											"pm.expect(JsonCount).to.eql(3);\r",
											"                                      \r",
											"});\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"console.log(jsonData.payload)\r",
											"console.log(jsonData.payload.length)\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].userName + \" and \" + jsonData.payload[i].action +  \" ---does not display null \", function () {\r",
											"console.log(jsonData.payload[i].userName)\r",
											"console.log(jsonData.payload[i].dueDate)\r",
											"pm.expect(jsonData.payload[i].userName).to.exist\r",
											"pm.expect(jsonData.payload[i].userName).to.not.be.null\r",
											"pm.expect(jsonData.payload[i].dueDate).to.exist\r",
											"pm.expect(jsonData.payload[i].dueDate).to.not.be.null\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"epUserRoleID\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"chapterID\": 106,\r\n  \"standardTextID\": 17344,\r\n  \"epTextID\": 38171,\r\n  \"id\": {{assignmentId}},\r\n  \"type\": \"Assignment\",\r\n  \"userID\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/DeleteEPScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"DeleteEPScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE Single Individual User Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Payload should be true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify success should be true\",function()\r",
											"{\r",
											"    pm.expect(res.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify errors should be null\",function()\r",
											"{\r",
											"    pm.expect(res.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userID\": 0,\r\n    \"roleID\": {{PA}},\r\n     \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 3572,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"01/01/2023\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 38171,\r\n            \"chapterID\": 106,\r\n            \"standardTextID\": 17344,\r\n            \"standardID\": 14417\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n         {\r\n            \"userID\": {{KamalID}},\r\n            \"fullName\": \"kamal, kanagaraj \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Kannan\",\r\n            \"userName\": \"string\"\r\n         }       \r\n    ],\r\n    \"teamCordinator\":\r\n        {\r\n            \"userID\": {{DivakarID}},\r\n            \"fullName\": \"Divaker, Yuvaraj \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"Divakar\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Y\",\r\n            \"userName\": \"string\"\r\n        },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateandCancelEPAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Preliminary & Individual users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetUsersBySiteAndRole?siteId={{Normal_SiteID}}&roleIds=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "roleIds",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAssignedUsers",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetAssignedUsers?siteId={{Normal_SiteID}}&programId=3572&certificationItemId=0&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetAssignedUsers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "3572"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Get the Results (Individual & Preliminary assignments) based on site and program id"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 106,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": {{KamalID}},\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 17344\r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Re assign to another User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 3572,\r\n    \"certificationItemID\": 0,\r\n    \"roleID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"standardID\": 0,\r\n    \"epTextID\": 0,\r\n    \"userID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"scoreID\": 0,\r\n    \"comments\": \"string\",\r\n    \"scoreDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"origAssignedToUserId\": {{KamalID}},\r\n    \"newAssignedToUserId\": {{DivakarID}},\r\n    \"assignedByUserId\": {{KamalID}},\r\n    \"statusId\": 4,\r\n    \"epInfo\": [\r\n        {\r\n            \"epTextID\": 38171,\r\n            \"chapterID\": 106,\r\n            \"standardTextID\": 17344,\r\n            \"standardID\": 14417\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateBulkEPReassign",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateBulkEPReassign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Assignment Removed from User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": {{KamalID}},\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenario",
					"item": [
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "992B3038278F65A19F6E93F31569717C3D01BAF71D2373496021C88F88488BFE",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetUsersBySiteAndRole?siteId=&roleIds=4",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": ""
										},
										{
											"key": "roleIds",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/standards/api/Filter/GetUsersBySiteAndRole?siteId=15804&roleIds=",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Filter",
										"GetUsersBySiteAndRole"
									],
									"query": [
										{
											"key": "siteId",
											"value": "15804"
										},
										{
											"key": "roleIds",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetAssignedUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetAssignedUsers?siteId=0&programId=2&certificationItemId=0&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetAssignedUsers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetAssignedUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetAssignedUsers?siteId=15804&programId=0&certificationItemId=0&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetAssignedUsers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "15804"
										},
										{
											"key": "programId",
											"value": "0"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID- GetAssignedUsers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetAssignedUsers?siteId=15804&programId=2&certificationItemId=0&roleId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetAssignedUsers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "15804"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "certificationItemId",
											"value": "0"
										},
										{
											"key": "roleId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 57295,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 597472,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 57295,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 597472,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid UserID- GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 57295,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 597472,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid assignedToUserId- GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 57295,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid RoleID- GetAssignedToUserTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 23,\r\n  \"siteID\": 57295,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 0,\r\n  \"assignedToUserId\": 0,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"userID\": null,\r\n  \"standardTextID\": 14698\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetAssignedToUserTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetAssignedToUserTree"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "992B3038278F65A19F6E93F31569717C3D01BAF71D2373496021C88F88488BFE",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "APP EVENT LOG",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "CROSS PROGRAM",
			"item": [
				{
					"name": "Organization Findings",
					"item": [
						{
							"name": "Create Organization Findings Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 1,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2022-09-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Organization Findings Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var epDocumentationID = responseBody.payload.epDocuments.epDocumentationID;\r",
											"\r",
											"pm.environment.set(\"epDocumentationID\", epDocumentationID);\r",
											"\r",
											"// Retrieve the \"epDocumentationText\" value from the response\r",
											"var responseBody = pm.response.json();\r",
											"var epDocumentationText = responseBody.payload.epDocuments.epDocumentationText;\r",
											"\r",
											"// Set the \"epDocumentationText\" value as an environment variable\r",
											"pm.environment.set(\"epDocumentationText\", epDocumentationText);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 1,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"Create Docs from API\",\r\n  \"compliantDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 3,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program Hospital to Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkEPScore\": [\r\n        {\r\n            \"epTextID\": 56464, \r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14696,\r\n            \"programID\": 2,\r\n            \"certificationItemID\": 0\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": 0,\r\n    \"roleID\": 2,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"orgFindingsDocID\": {{epDocumentationID}},\r\n    \"poaDocID\": null,\r\n    \"mosDocID\": null,\r\n    \"orgNotesDocId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14696,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "POA",
					"item": [
						{
							"name": "Create POA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomCountry}}');\r",
											"pm.environment.set('RandomDescription',Description);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 2,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2022-09-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check POA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var epDocumentationID = responseBody.payload.epDocuments.epDocumentationID;\r",
											"\r",
											"pm.environment.set(\"epDocumentationID\", epDocumentationID);\r",
											"\r",
											"// Retrieve the \"epDocumentationText\" value from the response\r",
											"var responseBody = pm.response.json();\r",
											"var epDocumentationText = responseBody.payload.epDocuments.epDocumentationText;\r",
											"\r",
											"// Set the \"epDocumentationText\" value as an environment variable\r",
											"pm.environment.set(\"epDocumentationText\", epDocumentationText);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 2,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"Create Docs from API\",\r\n  \"compliantDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 3,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program Hospital to Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkEPScore\": [\r\n        {\r\n            \"epTextID\": 56464, \r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"programID\": 2,\r\n            \"certificationItemID\": 0\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": 0,\r\n    \"roleID\": 2,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"orgFindingsDocID\": null,\r\n    \"poaDocID\": {{epDocumentationID}},\r\n    \"mosDocID\": null,\r\n    \"orgNotesDocId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Sustainment Plan",
					"item": [
						{
							"name": "Create Sustainment Plan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 3,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2022-09-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Sustainment Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var epDocumentationID = responseBody.payload.epDocuments.epDocumentationID;\r",
											"\r",
											"pm.environment.set(\"epDocumentationID\", epDocumentationID);\r",
											"\r",
											"// Retrieve the \"epDocumentationText\" value from the response\r",
											"var responseBody = pm.response.json();\r",
											"var epDocumentationText = responseBody.payload.epDocuments.epDocumentationText;\r",
											"\r",
											"// Set the \"epDocumentationText\" value as an environment variable\r",
											"pm.environment.set(\"epDocumentationText\", epDocumentationText);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 3,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"Create Docs from API\",\r\n  \"compliantDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 3,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program Hospital to Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkEPScore\": [\r\n        {\r\n            \"epTextID\": 56464, \r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14696,\r\n            \"programID\": 2,\r\n            \"certificationItemID\": 0\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": 0,\r\n    \"roleID\": 2,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"orgFindingsDocID\": null,\r\n    \"poaDocID\": null,\r\n    \"mosDocID\": {{epDocumentationID}},\r\n    \"orgNotesDocId\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14696,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Internal Notes",
					"item": [
						{
							"name": "Create Internal Notes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 4,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2022-09-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Internal Notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var epDocumentationID = responseBody.payload.epDocuments.epDocumentationID;\r",
											"\r",
											"pm.environment.set(\"epDocumentationID\", epDocumentationID);\r",
											"\r",
											"// Retrieve the \"epDocumentationText\" value from the response\r",
											"var responseBody = pm.response.json();\r",
											"var epDocumentationText = responseBody.payload.epDocuments.epDocumentationText;\r",
											"\r",
											"// Set the \"epDocumentationText\" value as an environment variable\r",
											"pm.environment.set(\"epDocumentationText\", epDocumentationText);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 4,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"Create Docs from API\",\r\n  \"compliantDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 3,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program Hospital to Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkEPScore\": [\r\n        {\r\n            \"epTextID\": 56464, \r\n            \"chapterID\": 2,\r\n            \"standardTextID\": 14698,\r\n            \"programID\": 23,\r\n            \"certificationItemID\": 0\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"userID\": 0,\r\n    \"roleID\": 2,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"orgFindingsDocID\": null,\r\n    \"poaDocID\": null,\r\n    \"mosDocID\": null,\r\n    \"orgNotesDocId\": {{epDocumentationID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Multiple Programs",
					"item": [
						{
							"name": "Create Organization Findings Copy 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.environment.set('RandomDescription',Description);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 1,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2022-09-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Organization Findings Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var epDocumentationID = responseBody.payload.epDocuments.epDocumentationID;\r",
											"\r",
											"pm.environment.set(\"epDocumentationID\", epDocumentationID);\r",
											"\r",
											"// Retrieve the \"epDocumentationText\" value from the response\r",
											"var responseBody = pm.response.json();\r",
											"var epDocumentationText = responseBody.payload.epDocuments.epDocumentationText;\r",
											"\r",
											"// Set the \"epDocumentationText\" value as an environment variable\r",
											"pm.environment.set(\"epDocumentationText\", epDocumentationText);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 38392,\r\n  \"documentationTypeID\": 1,\r\n  \"epDocumentationID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"epDocumentationText\": \"Create Docs from API\",\r\n  \"compliantDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"createDate\": \"2022-08-03T05:13:20.125Z\",\r\n  \"updatedBy\": \"string\",\r\n  \"userID\": 0,\r\n  \"role\": \"string\",\r\n  \"userEmail\": \"kkanagaraj@jcrinc.com\",\r\n  \"isOtherFindings\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 0,\r\n  \"epUserRoleID\": 3,\r\n  \"epDocumentationTextNoHTML\": \"string\",\r\n  \"roleTypeID\": 3,\r\n  \"corpScore\": \"string\",\r\n  \"mockSurveyStatusID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/GetOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"GetOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Hospital to Ambulatory & Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    },\r\n\r\n    \t{\r\n     \"epTextID\": 56588,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 15566,\r\n      \"programID\": 21,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": null,\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": {{epDocumentationID}}\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Ambulatory Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14696,\r\n  \"epTextID\": 56324\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ambulatory to Hospital & Laboratory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56464,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14698,\r\n      \"programID\": 2,\r\n      \"certificationItemID\": 0\r\n    },\r\n\r\n    \t{\r\n     \"epTextID\": 56588,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 15566,\r\n      \"programID\": 21,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": null,\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": {{epDocumentationID}}\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Hospital  Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the saved \"epDocumentationText\" value from the environment variable\r",
											"var savedEpDocumentationText = pm.environment.get(\"epDocumentationText\");\r",
											"\r",
											"// Get the response body\r",
											"var responseBody = pm.response.json();\r",
											"\r",
											"// Get the first epDocumentationText from the response\r",
											"var firstEpDocumentationText = responseBody.payload.cpepDocuments[0].epDocumentationText;\r",
											"\r",
											"// Check if the first epDocumentationText matches the saved value\r",
											"pm.test(\"Check first epDocumentationText with environment variable epDocumentationText\", function () {\r",
											"    pm.expect(firstEpDocumentationText).to.equal(savedEpDocumentationText);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scoring- Cross Program",
					"item": [
						{
							"name": "CREATE New score assignments Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userID\": 337506,\r\n    \"roleID\": 1,\r\n    \"siteID\": 54586,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"standardEffBeginDate\": \"07/01/2022\",\r\n    \"additionalFilterID\": 1,\r\n    \"chapterID\": 0,\r\n    \"standardTextID\": 0,\r\n    \"epTextID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"statusID\": 1,\r\n    \"assignedToUserID\": 0,\r\n    \"assignedByUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"dueDate\": \"2022-07-30T12:49:22.188Z\",\r\n    \"completionDate\": \"2022-07-23T10:29:41.795Z\",\r\n    \"assignmentDate\": \"2022-07-21T10:29:41.795Z\",\r\n    \"eps\": [\r\n        {\r\n            \"epTextID\": 56464,\r\n            \"chapterID\": 23,\r\n            \"standardTextID\": 14698,\r\n            \"standardID\": 13360\r\n        }\r\n    ],\r\n    \"individualUserData\": [\r\n         {\r\n            \"userID\": 597472,\r\n            \"fullName\": \"Kamal, K \",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"k\",\r\n            \"userName\": \"string\"\r\n         }       \r\n    ],\r\n    \"teamCordinator\":\r\n        {\r\n            \"userID\": 279324,\r\n            \"fullName\": \"Divakar, Y \",\r\n            \"userLogonID\": \"DYuvaraj@jcrinc.com\",\r\n            \"firstName\": \"Divakar\",\r\n            \"middleName\": \"string\",\r\n            \"lastName\": \"Y\",\r\n            \"userName\": \"string\"\r\n        },\r\n    \"preliminaryDueDate\": \"2022-06-30T10:29:41.795Z\",\r\n    \"individualDueDate\": \"2022-08-30T10:29:41.795Z\",\r\n    \"actionType\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateandCancelEPAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateandCancelEPAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Low/Limited Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"siteID\": 54586,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"standardTextID\": 14698,\r\n    \"epTextID\": 56464,\r\n    \"userID\": 597472,\r\n    \"levelID\": 0,\r\n    \"scoreType\": 0,\r\n    \"epUserRoleID\": 3,\r\n    \"scoreID\": 1121,\r\n    \"comments\": \"\",\r\n    \"scoreDate\": \"07/13/2022\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Scoring/UpdateEPScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Scoring",
										"UpdateEPScore"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"documentationTypeID4\",jsonData.payload.cpepDocuments.epDocumentationID);\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.cpepDocuments.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.cpepDocuments[i].epDocumentationID + \" and \" + jsonData.payload.cpepDocuments[i].epDocumentationText +  \" does not display null \", function () {\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationID)\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationText)\r",
											"\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.not.be.null\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.not.be.null\r",
											"    })\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 4,\r\n  \"epUserRoleID\": 1,\r\n  \"siteID\": 54586,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n\r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 1321,\r\n  \"orgFindingsDocID\": null,\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": {{documentationTypeID4}}\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"/*\r",
											"console.log(jsonData.payload.cpepScore.scoreID);\r",
											"pm.test(\"Verify ScoreID\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.cpepScore.scoreID).to.eql(pm.collectionVariables.get(\"scoreID\"));\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"for(i=0;i<jsonData.payload.cpepDocuments.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.cpepDocuments[i].epDocumentationID + \" and \" + jsonData.payload.cpepDocuments[i].epDocumentationText +  \" does not display null \", function () {\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationID)\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationText)\r",
											"\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.not.be.null\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.not.be.null\r",
											"    })\r",
											"}*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 597472,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14696,\r\n  \"epTextID\": 56324\r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cross Program- All Org Documentation Update",
					"item": [
						{
							"name": "Create Organization Findings",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set('RandomDescription',Description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Plan Of Action",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set('RandomDescription',Description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 2,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Sustainment Plan",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set('RandomDescription',Description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 3,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Internal Notes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Description= pm.variables.replaceIn('{{$randomWords}}');\r",
											"pm.collectionVariables.set('RandomDescription',Description);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											" var jsonData = pm.response.json();\r",
											"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
											"{\r",
											"   pm.expect(jsonData.payload.orgFindingsFlag).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"userID\": 0,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 4,\r\n  \"standardEffBeginDate\": \"01/01/2023\",\r\n  \"epDocumentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-01-16T12:33:12.358Z\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epUserRoleID\": 3,\r\n  \"roleTypeID\": 4,\r\n  \"corpScore\": \"99-disabled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Documentation/SaveOrganizationDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Documentation",
										"SaveOrganizationDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.collectionVariables.set(\"documentationTypeID1\",jsonData.payload.cpepDocuments[0].epDocumentationID);\r",
											"pm.collectionVariables.set(\"documentationTypeID2\",jsonData.payload.cpepDocuments[1].epDocumentationID);\r",
											"pm.collectionVariables.set(\"documentationTypeID3\",jsonData.payload.cpepDocuments[2].epDocumentationID);\r",
											"pm.collectionVariables.set(\"documentationTypeID4\",jsonData.payload.cpepDocuments[3].epDocumentationID);\r",
											"\r",
											"for(i=0;i<jsonData.payload.cpepDocuments.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload.cpepDocuments[i].epDocumentationID + \" and \" + jsonData.payload.cpepDocuments[i].epDocumentationText +  \" does not display null \", function () {\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationID)\r",
											"console.log(jsonData.payload.cpepDocuments[i].epDocumentationText)\r",
											"\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationID).to.not.be.null\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.exist\r",
											"pm.expect(jsonData.payload.cpepDocuments[i].epDocumentationText).to.not.be.null\r",
											"    })\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "SAVE- Cross Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Response as true\",function()\r",
											"{\r",
											"    pm.expect(res.payload).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56588,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 15566,\r\n      \"programID\": 21,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 0,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": {{documentationTypeID2}},\r\n  \"mosDocID\": {{documentationTypeID3}},\r\n  \"orgNotesDocId\": {{documentationTypeID4}}\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET- Cross Program Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"/*\r",
											"console.log(jsonData.payload.cpepDocuments[3].epDocumentationText);\r",
											"pm.test(\"Verify Internal Notes\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.cpepDocuments[3].epDocumentationText).to.eql(pm.collectionVariables.get(\"RandomDescription\"));\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 54586,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 15566,\r\n  \"epTextID\": 56588\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 54586,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": null,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 760,\r\n  \"programID\": null,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid EPTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": null\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid chapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": null,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epUserRoleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 337506,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": null,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": null,\r\n  \"roleID\": 1,\r\n  \"epUserRoleID\": 3,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"standardEffBeginDate\": \"07/01/2022\",\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464\r\n}\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/GetCrossProgramDetails",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"GetCrossProgramDetails"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid epTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": null,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": null,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid chapterID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": null,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid roleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": null,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": 0,\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid userID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": null,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardTextID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": null,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bulkEPScore\": [\r\n  \r\n\t{\r\n     \"epTextID\": 56324,\r\n      \"chapterID\": 23,\r\n      \"standardTextID\": 14696,\r\n      \"programID\": 23,\r\n      \"certificationItemID\": 0\r\n    }\r\n  ],\r\n  \"siteID\": null,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"userID\": 337506,\r\n  \"roleID\": 2,\r\n  \"epUserRoleID\": 3,\r\n  \"scoreID\": 99,\r\n  \"orgFindingsDocID\": {{documentationTypeID1}},\r\n  \"poaDocID\": null,\r\n  \"mosDocID\": null,\r\n  \"orgNotesDocId\": null\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/CrossProgram/SaveCrossProgramEPs",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"CrossProgram",
										"SaveCrossProgramEPs"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "GET CHAPTERS FOR TASK",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetChaptersForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].chapterID \r",
											"+ \" and \" + jsonData.payload[i].chapterCode\r",
											"+  \" and \" + jsonData.payload[i].chapterTextName\r",
											"+ \" does not display null \", function () {\r",
											"\r",
											"console.log(jsonData.payload[i].chapterID)\r",
											"console.log(jsonData.payload[i].chapterCode)\r",
											"console.log(jsonData.payload[i].chapterTextName)\r",
											"\r",
											"pm.expect(jsonData.payload[i].chapterID).to.exist\r",
											"pm.expect(jsonData.payload[i].chapterID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].chapterCode).to.exist\r",
											"pm.expect(jsonData.payload[i].chapterCode).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].chapterTextName).to.exist\r",
											"pm.expect(jsonData.payload[i].chapterTextName).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].chapterSortOrder).to.exist\r",
											"pm.expect(jsonData.payload[i].chapterSortOrder).to.not.be.null\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 54586,\r\n  \"programID\": 3572,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetChaptersForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetChaptersForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].standardID \r",
											"+ \" and \" + jsonData.payload[i].standardTextID\r",
											"+  \" and \" + jsonData.payload[i].standardLabel\r",
											"+ \" does not display null \", function () {\r",
											"\r",
											"console.log(jsonData.payload[i].standardID)\r",
											"console.log(jsonData.payload[i].standardTextID)\r",
											"console.log(jsonData.payload[i].standardLabel)\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardID).to.exist\r",
											"pm.expect(jsonData.payload[i].standardID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardTextID).to.exist\r",
											"pm.expect(jsonData.payload[i].standardTextID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.exist\r",
											"pm.expect(jsonData.payload[i].standardLabel).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].standardText).to.exist\r",
											"pm.expect(jsonData.payload[i].standardText).to.not.be.null\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3442,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 61,\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"for(i=0;i<jsonData.payload.length;i++){\r",
											"    pm.test(\"Verify \" +  jsonData.payload[i].epTextID \r",
											"\r",
											"+ \" does not display null \", function () {\r",
											"\r",
											"console.log(jsonData.payload[i].epTextID)\r",
											"console.log(jsonData.payload[i].epText)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload[i].epTextID).to.exist\r",
											"pm.expect(jsonData.payload[i].epTextID).to.not.be.null\r",
											"\r",
											"pm.expect(jsonData.payload[i].epText).to.exist\r",
											"pm.expect(jsonData.payload[i].epText).to.not.be.null\r",
											"\r",
											"})\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 3572,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": 17344,\r\n  \"productType\": 2,\r\n  \"standardEffBeginDate\": \"08/27/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid siteID- GetChaptersForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": null,\r\n  \"programID\": 6,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetChaptersForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetChaptersForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- GetChaptersForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetChaptersForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetChaptersForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardEffBeginDate- GetChaptersForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardEffBeginDate\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetChaptersForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetChaptersForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GetChaptersForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": null,\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetChaptersForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetChaptersForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID- GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 23,\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 23,\r\n  \"productType\": 2,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid chapterID- GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 0,\r\n  \"productType\": 2,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardEffBeginDate- GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{siteId}},\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 23,\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GetStandardsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{siteId}},\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"chapterID\": 23,\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetStandardsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetStandardsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteID- GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": 0,\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": {{standardTextID}},\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": {{siteId}},\r\n  \"programID\": 0,\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": {{standardTextID}},\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardTextID- GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": {{siteId}},\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": 0,\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardEffBeginDate -GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": {{siteId}},\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": {{standardTextID}},\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "No body- GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 415\", function () {\r",
											"    pm.response.to.have.status(415);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Unsupported Media Type\", function () {\r",
											"    pm.response.to.have.status(\"Unsupported Media Type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GetEPsForTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"siteID\": {{siteId}},\r\n  \"programID\": {{programId}},\r\n  \"userID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"standardTextID\": {{standardTextID}},\r\n  \"productType\": 1,\r\n  \"standardEffBeginDate\": \"01/01/2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetEPsForTask",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetEPsForTask"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- Tracers by EP Report",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Get Sticky Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"payload should be TRUE\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload[1].isActive).to.eql(true)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": null,\r\n  \"eProductID\": 1,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetStickyDates",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetStickyDates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Process DateScore Analyzer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"payload should be TRUE\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"var Startdate=pm.variables.replaceIn('{{$isoTimestamp}}');\r",
											"pm.environment.set('startDateToProcess',Startdate);\r",
											"\r",
											"\r",
											"var Enddate=pm.variables.replaceIn('{{$isoTimestamp}}');\r",
											"pm.environment.set('endToProcess',Enddate);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": null,\r\n  \"eProductID\": 1,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"startDateToProcess\": \"{{startDateToProcess}}\",\r\n  \"endToProcess\": \"{{endToProcess}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/ProcessDateScoreAnalyzer",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"ProcessDateScoreAnalyzer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sticky Dates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"success should be TRUE\", function () {\r",
											"    console.log(jsonData.success)\r",
											"    pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"payload should be TRUE\", function () {\r",
											"    console.log(jsonData.payload)\r",
											"    pm.expect(jsonData.payload[1].isActive).to.eql(true)\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": null,\r\n  \"eProductID\": 1,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetStickyDates",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetStickyDates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracer By EP Report - Email as True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify pdfByte,wordByte & excelByte Not Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.pdfByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.wordByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.excelByte).to.not.be.null\r",
											"});\r",
											"\r",
											"pm.test(\"Verify isEmailSent as true\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.isEmailSent).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify GetEPTracerReport errors as Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Performance Test Site\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracer By EP Report - Email as False",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify pdfByte,wordByte & excelByte Not Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.pdfByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.wordByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.excelByte).to.not.be.null\r",
											"});\r",
											"\r",
											"pm.test(\"Verify isEmailSent as false\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.isEmailSent).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify GetEPTracerReport errors as Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 41533,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 54,\r\n  \"standardTextID\": 30304,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Corporate Test site A\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "EmailPrintStandard",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"pm.test(\"Verify pdfByte,wordByte & excelByte Not Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.pdfByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.wordByte).to.not.be.null\r",
											"    pm.expect(jsonData.payload.excelByte).to.not.be.null\r",
											"});\r",
											"\r",
											"pm.test(\"Verify isEmailSent as false\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload.isEmailSent).to.eql(false);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify GetEPTracerReport errors as Null\",function()\r",
											"{\r",
											"    pm.expect(jsonData.errors).to.eql(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"printStandardRequest\": {\r\n    \"userID\": 0,\r\n    \"productID\": 1,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"chapterID\": 23,\r\n    \"serviceProfileTypeID\": 1,\r\n    \"subChapterID\": 0,\r\n    \"standardID\": 13360,\r\n    \"standardTextID\": 14698,\r\n    \"cycleID\": 39,\r\n    \"standardEffBeginDate\": \"02/19/2023\",\r\n    \"siteID\": {{siteId}}\r\n  },\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi Murali\",\r\n  \"toName\": \"kamal\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Print/EmailPrintStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Print",
										"EmailPrintStandard"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Tracer By EP Report -Invalid site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Performance Test Site\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracer By EP Report -Invalid Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 54586,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Performance Test Site\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracer By EP Report -Invalid Program Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 54586,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 0,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Performance Test Site\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tracer By EP Report - Email as False Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"showCMS\": false,\r\n  \"chapterID\": 23,\r\n  \"standardTextID\": 14698,\r\n  \"epTextID\": 56464,\r\n  \"cycleID\": 39,\r\n  \"obsStartDate\": \"2022-02-01\",\r\n  \"obsEndDate\": \"2023-03-01\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Performance Test Site\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": false,\r\n  \"roleID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Process DateScore Analyzer Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"\r",
											"\r",
											"pm.test(\"success should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"payload should be TRUE\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.payload).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.payload)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": null,\r\n  \"eProductID\": 1,\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"startDateToProcess\": \"2023-03-10T11:56:26.414Z\",\r\n  \"endToProcess\": \"2022-02-10T11:56:26.414Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/ProcessDateScoreAnalyzer",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"ProcessDateScoreAnalyzer"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "revAMP - Score Analyzer",
			"item": [
				{
					"name": "Business Scenario",
					"item": [
						{
							"name": "GetStickyDates",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": 0,\r\n  \"eProductID\": 1,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/GetStickyDates",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"GetStickyDates"
									]
								}
							},
							"response": []
						},
						{
							"name": "ProcessDateScoreAnalyzer",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userID\": 0,\r\n  \"subUserID\": 0,\r\n  \"eProductID\": 1,\r\n  \"siteID\": 760,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"startDateToProcess\": \"2022-05-11T01:19:50.123Z\",\r\n  \"endToProcess\": \"2023-05-11T01:19:50.123Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/siteuser/api/User/ProcessDateScoreAnalyzer",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"siteuser",
										"api",
										"User",
										"ProcessDateScoreAnalyzer"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPScoreAnalyzerCharts",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"finalScoreFlag\": 1,\r\n  \"preliminaryScoreFlag\": 0,\r\n  \"isFSAOnly\": false,\r\n  \"startDate\": \"2022-05-09T07:52:30.955Z\",\r\n  \"endDate\": \"2023-05-09T07:52:30.955Z\",\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 760,\r\n  \"cycleID\": 39,\r\n  \"productID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPScoreAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPScoreAnalyzerCharts"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- FSAValidation",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "FSAValidation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 41533,\r\n  \"programID\": 21,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"fsaFilter\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/FSAValidation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"FSAValidation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid SiteID- FSAValidation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"fsaFilter\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/FSAValidation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"FSAValidation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- FSAValidation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 0,\r\n  \"standardEffBeginDate\": \"02/19/2023\",\r\n  \"fsaFilter\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/FSA/FSAValidation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"FSA",
										"FSAValidation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetEPDocAnalyzerCharts",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "GetEPDocAnalyzerCharts - Hospital",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 1,\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Ambulatory",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Behavioral Health and Human Service",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 6,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Critical Access Hospital",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 1,\r\n  \"programID\": 69,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 15320,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Home Care",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 22,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Laboratory",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 21,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Nursing Care Center",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 5,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Office Based Surgery",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 68,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerCharts - Assisted Living Community",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 0,\r\n  \"programID\": 6294,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 54586,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerCharts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerCharts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetEPDocAnalyzerDrillDownData",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"serviceProfileTypeID\": 1,\r\n  \"cycleID\": 40,\r\n  \"siteID\": 54586,\r\n  \"programID\": 2,\r\n  \"outdatedDate\": \"2023-06-01\",\r\n  \"reportType\": 3,\r\n  \"reportFilter\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"isFSAOnly\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerDrillDownData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerDrillDownData"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid ProgramID- GetEPDocAnalyzerCharts",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 1,\r\n  \"programID\": 0,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": 4,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerChart",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerChart"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetEPDocAnalyzerCharts",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 1,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": o,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Report/GetEPDocAnalyzerChart",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Report",
										"GetEPDocAnalyzerChart"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCoPForPrint",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCoPForPrint - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§482.1\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Basis and scope.\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"A-0008\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§482.1 - Basis and scope.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=31004",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "31004"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§482.1\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Basis and scope.\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"A-0008\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§482.1(a) - Statutory basis.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=31005",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "31005"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Hospital and Regulation : §482.1(a)(1) - Section 1861(e) of the [Social Security] Act provides that—",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§482.1\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Basis and scope.\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"A-0008\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§482.1(a)(1) - Section 1861(e) of the [Social Security] Act provides that—\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=31010",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "31010"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Hospital and Regulation :§482.1(a)(1)(ii) - The Secretary may impose additional requirements if they are found necessary in the interest of the health and safety of the individuals who are furnished services in hospitals.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§482.1\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Basis and scope.\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"A-0008\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§482.1(a)(1)(ii) - The Secretary may impose additional requirements if they are found necessary in the interest of the health and safety of the individuals who are furnished services in hospitals.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=31024",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "31024"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Hospital and Regulation :§482.1(b) - Scope. Except as provided in subpart A of part 488 of this chapter, the provisions of this part serve as the basis of survey activities for the purpose of determining whether a hospital qualifies for a",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§482.1\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Basis and scope.\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"A-0008\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§482.1(b) - Scope. Except as provided in subpart A of part 488 of this chapter, the provisions of this part serve as the basis of survey activities for the purpose of determining whether a hospital qualifies for a provider agreement under Medicare and Medicaid.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=31006",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "31006"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Hospital Top",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"const jsonData= pm.response.json();\r",
													"\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"/*\r",
													"pm.test(\"Verify copID, copName and title\", function() {\r",
													"for(i=0;i<jsonData.payload.length;i++){\r",
													"    pm.test(\"Verify \" +  jsonData.payload[i].copID \r",
													"+ \" and \" + jsonData.payload[i].copName\r",
													"+  \" and \" + jsonData.payload[i].title\r",
													"+ \" does not display null \", function () {\r",
													"\r",
													"console.log(jsonData.payload[i].copID)\r",
													"console.log(jsonData.payload[i].copName)\r",
													"console.log(jsonData.payload[i].title)\r",
													"\r",
													"pm.expect(jsonData.payload[i].copName).to.equal(\"§482.1\")\r",
													"\r",
													"pm.expect(jsonData.payload[i].copID).to.equal(\"1197\")\r",
													"\r",
													"pm.expect(jsonData.payload[i].title).to.equal(\"Basis and scope.\")\r",
													"\r",
													"\r",
													"})\r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1197&programId=2&elementId=0",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1197"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "elementId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCoPForPrint - Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§416.2\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\"Definitions\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"Q-0002\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§416.2 - Definitions<br><br>As used in this part: <br><br>Ambulatory surgical center or ASC means any distinct entity that operates exclusively for the purpose of providing surgical services to patients not requiring hospitalization and in which the expected duration of services would not exceed 24 hours following an admission. The entity must have an agreement with CMS to participate in Medicare as an ASC and must meet the conditions set forth in Subpart B and C of this part.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1144&programId=23&elementId=2490",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1144"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "elementId",
													"value": "2490"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Ambulatory Top",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=1144&programId=23&elementId=0",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "1144"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "elementId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCoPForPrint - Critical Access Hospital and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§412.25\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\" Common Requirements\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"C-0504\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§412.25 - Excluded hospital units: Common Requirements\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=55&programId=69&elementId=730",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "55"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "elementId",
													"value": "730"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Critical Access Hospital and Regulation: §412.25(a)(2) - Have written admission criteria that are applied uniformly to both Medicare and non-Medicare patients.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§412.25\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\" Common Requirements\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"C-0504\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§412.25(a)(2) - Have written admission criteria that are applied uniformly to both Medicare and non-Medicare patients.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=55&programId=69&elementId=47566",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "55"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "elementId",
													"value": "47566"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Critical Access Hospital and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                      \r",
													"});\r",
													"\r",
													"console.log(jsonData.payload[0].copName)\r",
													"console.log(jsonData.payload[0].title)\r",
													"console.log(jsonData.payload[0].tagCode)\r",
													"\r",
													"\r",
													"pm.test(\"Verify copName, title and tagCode \", function() {\r",
													"pm.expect(jsonData.payload[0].copName).to.equal(\"§412.25\")\r",
													"pm.expect(jsonData.payload[0].title).to.equal(\" Common Requirements\")\r",
													"pm.expect(jsonData.payload[0].tagCode).to.equal(\"C-0735\")\r",
													"pm.expect(jsonData.payload[0].jcrElementText).to.equal(\"§412.25(f) - Changes in classification of hospital units. For purposes of exclusions from the prospective payment system under this section, the classification of a hospital unit is effective for the unit’s entire cost reporting period. Any change in the classification of a hospital unit is made only at the start of a cost reporting period.\")\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=55&programId=69&elementId=45628",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "55"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "elementId",
													"value": "45628"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCoPForPrint - Critical Access Hospital  Top",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=55&programId=69&elementId=0",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"GetCopForPrint"
											],
											"query": [
												{
													"key": "copId",
													"value": "55"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "elementId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code scenarios",
					"item": [
						{
							"name": "Invalid ProgramID- GetCoPForPrint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=55&programId=0&elementId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Print",
										"GetCopForPrint"
									],
									"query": [
										{
											"key": "copId",
											"value": "55"
										},
										{
											"key": "programId",
											"value": "0"
										},
										{
											"key": "elementId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid CopID- GetCoPForPrint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isFSAOnly\": 1,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"siteID\": o,\r\n  \"cycleID\": 40,\r\n  \"outdatedDate\": \"2023-06-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Print/GetCopForPrint?copId=0&programId=69&elementId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Print",
										"GetCopForPrint"
									],
									"query": [
										{
											"key": "copId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "elementId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP - GETCMSSCOREASSIGNMENT",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSScoreAssignment - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{MockSurvey_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2649,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment History- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{MockSurvey_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2649,\r\n  \"isHistoryTab\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSScoreAssignment - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{MockSurvey_SiteID}},\r\n  \"programId\": 23,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 3733,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment History- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{MockSurvey_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2649,\r\n  \"isHistoryTab\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSScoreAssignment - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment History- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid Site GetCMSScoreAssignment History- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": 0,\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Program GetCMSScoreAssignment History- CAH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 0,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardId GetCMSScoreAssignment History- CAH Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 0,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP - UPDATECMSSCOREASSIGNMENT",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSScoreAssignment - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function () {\r",
													"    console.log(jsonData.success)\r",
													"    pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function () {\r",
													"    console.log(jsonData.errors)\r",
													"    pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													"    console.log(jsonData)\r",
													"    var JsonCount = Object.keys(jsonData).length;\r",
													"    console.log(JsonCount)\r",
													"    pm.expect(JsonCount).to.eql(3);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"var cmsIds = [];\r",
													"\r",
													"jsonData.payload.forEach(function (item) {\r",
													"    cmsIds.push(item.id);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"CMSID\", cmsIds.join(\",\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2649,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSScoreAssignment - Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 2649,\r\n    \"id\": 3550,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"DeleteCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateandCancelAssignment - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 639833,\r\n            \"fullName\": \"kanagaraj, kamal\",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"kanagaraj\",\r\n            \"userName\": \"\"\r\n        },\r\n        {\r\n            \"userID\": 279324,\r\n            \"fullName\": \"Yuvaraj, D\",\r\n            \"userLogonID\": \"Dyuvaraj@jcrinc.com\",\r\n            \"firstName\": \"D\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"Divakar\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n            \"copId\": 1197,\r\n            \"cmsStandardId\": 2649\r\n        }\r\n    ],\r\n    \"siteName\": \"Katalon test site 1\",\r\n    \"programName\": \"Hospital\",\r\n    \"statusID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 1,\r\n    \"programID\": 2,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment - Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function () {\r",
													"    console.log(jsonData.success)\r",
													"    pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function () {\r",
													"    console.log(jsonData.errors)\r",
													"    pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													"    console.log(jsonData)\r",
													"    var JsonCount = Object.keys(jsonData).length;\r",
													"    console.log(JsonCount)\r",
													"    pm.expect(JsonCount).to.eql(3);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"var cmsIds = [];\r",
													"\r",
													"jsonData.payload.forEach(function (item) {\r",
													"    cmsIds.push(item.id);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"CMSID\", cmsIds.join(\",\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{MockSurvey_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2651,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateandCancelAssignment Existing -  Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 306950,\r\n            \"fullName\": \"Chandrashekar, Hema\",\r\n            \"userLogonID\": \"hchandrashekar@jcrinc.com\",\r\n            \"firstName\": \"Hema\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"Chandrashekar\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n            \"copId\": 1197,\r\n            \"cmsStandardId\": 2651\r\n        }\r\n    ],\r\n    \"siteName\": \"test 1\",\r\n    \"programName\": \"Hospital\",\r\n    \"statusID\": 0,\r\n    \"siteID\": 54587,\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 2,\r\n    \"programID\": 2,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "UpdateandCancelAssignment - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 639833,\r\n            \"fullName\": \"kanagaraj, kamal\",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"kanagaraj\",\r\n            \"userName\": \"\"\r\n        },\r\n        {\r\n            \"userID\": 279324,\r\n            \"fullName\": \"Yuvaraj, D\",\r\n            \"userLogonID\": \"Dyuvaraj@jcrinc.com\",\r\n            \"firstName\": \"D\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"Divakar\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n            \"copId\": 1144,\r\n            \"cmsStandardId\": 3733\r\n        }\r\n    ],\r\n    \"siteName\": \"Katalon test site 1\",\r\n    \"programName\": \"Ambulatory\",\r\n    \"statusID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 1,\r\n    \"programID\": 23,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateandCancelAssignment Existing- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 639833,\r\n            \"fullName\": \"kanagaraj, kamal\",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"kanagaraj\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n             \"copId\": 1144,\r\n            \"cmsStandardId\": 3733\r\n        }\r\n    ],\r\n    \"siteName\": \"Katalon test site 1\",\r\n    \"programName\": \"Ambulatory\",\r\n    \"statusID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 2,\r\n    \"programID\": 23,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment History- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 23,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 3733,\r\n  \"isHistoryTab\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "UpdateandCancelAssignment- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 639833,\r\n            \"fullName\": \"kanagaraj, kamal\",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"kanagaraj\",\r\n            \"userName\": \"\"\r\n        },\r\n        {\r\n            \"userID\": 279324,\r\n            \"fullName\": \"Yuvaraj, D\",\r\n            \"userLogonID\": \"Dyuvaraj@jcrinc.com\",\r\n            \"firstName\": \"D\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"Divakar\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n            \"copId\": 55,\r\n            \"cmsStandardId\": 796\r\n        }\r\n    ],\r\n    \"siteName\": \"Katalon test site 1\",\r\n    \"programName\": \"CAH\",\r\n    \"statusID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 1,\r\n    \"programID\": 69,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateandCancelAssignment Existing- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"individualUserData\": [\r\n        {\r\n            \"userID\": 639833,\r\n            \"fullName\": \"kanagaraj, kamal\",\r\n            \"userLogonID\": \"kkanagaraj@jcrinc.com\",\r\n            \"firstName\": \"kamal\",\r\n            \"middleName\": \"\",\r\n            \"lastName\": \"kanagaraj\",\r\n            \"userName\": \"\"\r\n        }\r\n    ],\r\n    \"cMSStandardInfo\": [\r\n        {\r\n            \"copId\": 55,\r\n            \"cmsStandardId\": 796\r\n        }\r\n    ],\r\n    \"siteName\": \"Katalon test site 1\",\r\n    \"programName\": \"CAH\",\r\n    \"statusID\": 0,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 0,\r\n    \"userID\": 0,\r\n    \"actionType\": 2,\r\n    \"programID\": 69,\r\n    \"individualDueDate\": \"2023-07-20T05:22:30.307Z\",\r\n    \"assignedByUserID\": 0,\r\n    \"assignedToUserID\": 0,\r\n    \"assignmentText\": \"string\",\r\n    \"assignmentDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"completionDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"dueDate\": \"2023-07-12T05:22:30.307Z\",\r\n    \"copId\": 0,\r\n    \"cmsStandardTextId\": 0,\r\n    \"cmsStandardId\": 0,\r\n    \"epUserRoleID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateandCancelAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateandCancelAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSScoreAssignment History- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid Site GetCMSScoreAssignment History- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": 0,\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Program GetCMSScoreAssignment History- CAH Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": 15320,\r\n  \"programId\": 0,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 796,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardId GetCMSScoreAssignment History- CAH Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteId\": 15320,\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 0,\r\n  \"isHistoryTab\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"GetCMSScoreAssignment"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- DELETECMSSCOREASSIGNMENT",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSScoreAssignment - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"success should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"pm.test(\"Verify Json Count should be 3\", function () {\r",
													" console.log(jsonData)\r",
													"var JsonCount  = Object.keys(jsonData).length;\r",
													"console.log(JsonCount)\r",
													"pm.expect(JsonCount).to.eql(3);\r",
													"                                  \r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 2,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 2649,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSScoreAssignment - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 2649,\r\n    \"id\": 22030,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"DeleteCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSScoreAssignment - CAH Copy",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 23,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 3733,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSScoreAssignment - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 23,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 3733,\r\n    \"id\": 22400,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"DeleteCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSScoreAssignment - CAH",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteId\": {{Normal_SiteID}},\r\n  \"programId\": 69,\r\n  \"epRoleId\": 1,\r\n  \"cmsStandardId\": 790,\r\n  \"isHistoryTab\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/GetCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"GetCMSScoreAssignment"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSScoreAssignment - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 790,\r\n    \"id\": 22401,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"DeleteCMSScoreAssignment"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"",
									"const jsonData= pm.response.json();",
									"for (i = 0; i < jsonData.payload.length; i++) {",
									"    pm.test(\"Verify \" + jsonData.payload[i].text",
									"        + \" and \" + jsonData.payload[i].text",
									"        ",
									"        + \"displayed\", function () { ",
									"            pm.expect(jsonData.payload[i].text).to.exist",
									"            pm.expect(jsonData.payload[i].text).to.not.be.null",
									"        })",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID- GetCMSBulkTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 0,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 2649,\r\n    \"id\": 22030,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"DeleteCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetCMSBulkTree Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 2649,\r\n    \"id\": 22030,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"DeleteCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardId- GetCMSBulkTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 0,\r\n    \"id\": 22030,\r\n    \"type\": \"Assignments\",\r\n    \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"DeleteCMSScoreAssignment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid type- GetCMSBulkTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify payload as false\",function()\r",
											"{\r",
											"    pm.expect(jsonData.payload).to.eql(false);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"epUserRoleID\": 1,\r\n    \"cmsStandardId\": 790,\r\n    \"id\": 22401,\r\n    \"type\": \"string\",\r\n    \"userID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/DeleteCMSScoreAssignment",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"DeleteCMSScoreAssignment"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- EMAIL REGULATION",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi\",\r\n  \"toName\": \"Kamal K\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\",\r\n  \"coPId\": 1197,\r\n  \"elementId\": 31004,\r\n  \"programId\": 2,\r\n  \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi\",\r\n  \"toName\": \"Kamal K\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\",\r\n  \"coPId\": 1197,\r\n  \"elementId\": 31005,\r\n  \"programId\": 2,\r\n  \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi\",\r\n  \"toName\": \"Kamal K\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\",\r\n  \"coPId\": 1197,\r\n  \"elementId\": 31010,\r\n  \"programId\": 2,\r\n  \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" EmailPrintCoP - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi\",\r\n  \"toName\": \"Kamal K\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\",\r\n  \"coPId\": 1197,\r\n  \"elementId\": 31024,\r\n  \"programId\": 2,\r\n  \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"programName\": \"Hospital\",\r\n  \"fromName\": \"Sruthi\",\r\n  \"toName\": \"Kamal K\",\r\n  \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n  \"message\": \"Test\",\r\n  \"coPId\": 1197,\r\n  \"elementId\": 31006,\r\n  \"programId\": 2,\r\n  \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "EmailPrintCoP - Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"Ambulatory\",\r\n    \"fromName\": \"kamal\",\r\n    \"toName\": \"Kamal K\",\r\n    \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n    \"message\": \"Test\",\r\n    \"coPId\": 1144,\r\n    \"elementId\": 2490,\r\n    \"programId\": 23,\r\n    \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "EmailPrintCoP - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"CAH\",\r\n    \"fromName\": \"kamal\",\r\n    \"toName\": \"Kamal K\",\r\n    \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n    \"message\": \"Test\",\r\n    \"coPId\": 55,\r\n    \"elementId\": 730,\r\n    \"programId\": 69,\r\n    \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"CAH\",\r\n    \"fromName\": \"kamal\",\r\n    \"toName\": \"Kamal K\",\r\n    \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n    \"message\": \"Test\",\r\n    \"coPId\": 55,\r\n    \"elementId\": 47566,\r\n    \"programId\": 69,\r\n    \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								},
								{
									"name": "EmailPrintCoP - CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"programName\": \"CAH\",\r\n    \"fromName\": \"kamal\",\r\n    \"toName\": \"Kamal K\",\r\n    \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n    \"message\": \"Test\",\r\n    \"coPId\": 55,\r\n    \"elementId\": 45628,\r\n    \"programId\": 69,\r\n    \"siteID\": 15320\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Print",
												"EmailPrintCoP"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid CoPID- EmailPrintCoP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"EmailPrintCoP - Payload should be False for Invalid CoPID\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"  pm.expect(jsonData.payload).to.eql(false)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programName\": \"CAH\",\r\n    \"fromName\": \"kamal\",\r\n    \"toName\": \"Kamal K\",\r\n    \"toAddress\": \"kkanagaraj@jcrinc.com\",\r\n    \"message\": \"Test\",\r\n    \"coPId\": 0,\r\n    \"elementId\": 0,\r\n    \"programId\": 69,\r\n    \"siteID\": 15320\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Print/EmailPrintCoP",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Print",
										"EmailPrintCoP"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GETCROSSWALKHOVERTEXT",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCrosswalkHoverText - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation : §482.1 - Basis and scope.\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"  pm.expect(jsonData.payload.hoverText).to.eql(\"LD.04.01.01 EP 2\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=2&cmsStandardId=2651",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "2651"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText - Hospital and Regulation - Pharmaceutical Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation - Pharmaceutical Services \", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"   pm.expect(jsonData.payload.hoverText).to.eql(\"MM.03.01.01 EP 3,MM.03.01.01 EP 4,MM.05.01.11 EP 2\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=2&cmsStandardId=300",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "300"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText - Hospital and Regulation : K100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation : K100\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LS.03.01.10 EP 4,LS.03.01.10 EP 5,LS.03.01.10 EP 6,LS.03.01.10 EP 7,LS.03.01.10 EP 8,LS.03.01.10 EP 9,LS.03.01.10 EP 10\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=2&cmsStandardId=4031",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "4031"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LD.03.02.01 EP 1,LD.03.05.01 EP 1,LD.03.05.01 EP 2,LD.03.05.01 EP 3,LD.03.07.01 EP 1,LD.03.07.01 EP 2,PI.04.01.01 EP 2,PI.04.01.01 EP 5,PI.04.01.01 EP 12\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=23&cmsStandardId=3591",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3591"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													" \r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=23&cmsStandardId=3578",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3578"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LD.03.02.01 EP 1,LD.03.05.01 EP 1,LD.03.05.01 EP 2,LD.03.05.01 EP 3,LD.03.07.01 EP 1,LD.03.07.01 EP 2,PI.04.01.01 EP 2,PI.04.01.01 EP 5,PI.04.01.01 EP 12\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=23&cmsStandardId=3591",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3591"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCrosswalkHoverText- CAH and Regulation: Agreements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- CAH and Regulation: Agreements\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"    pm.expect(jsonData.payload.hoverText).to.eql(\"LD.04.01.01 EP 5,LD.04.03.01 EP 12\")\r",
													" \r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=69&cmsStandardId=998",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "998"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText- CAH  and Regulation:Anesthesia Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- CAH  and Regulation:Anesthesia Services\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"    pm.expect(jsonData.payload.hoverText).to.eql(\"PC.03.01.07 EP 7,PC.03.01.07 EP 8\")\r",
													" \r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=69&cmsStandardId=1961",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "1961"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText- CAH and Regulation:Respiratory Care Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- CAH and Regulation:Respiratory Care Services\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"  pm.expect(jsonData.payload.hoverText).to.eql(\"RC.02.01.01 EP 2\")\r",
													" \r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId={{Normal_SiteID}}&programId=69&cmsStandardId=2016",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCrosswalkHoverText"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "2016"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid CmsstandardID- GetCrosswalkHoverText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"Invalid CmsstandardID- GetCrosswalkHoverText should be null\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"  pm.expect(jsonData.payload.hoverText).to.eql(null)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCrosswalkHoverText?siteId=54586&programId=2&cmsStandardId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCrosswalkHoverText"
									],
									"query": [
										{
											"key": "siteId",
											"value": "54586"
										},
										{
											"key": "programId",
											"value": "2"
										},
										{
											"key": "cmsStandardId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GETREGULATIONIGAndSP",
			"item": [
				{
					"name": "Business scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetRegulationIGAndSP - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation : §482.1 - Basis and scope.\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"  pm.expect(jsonData.payload.hoverText).to.eql(\"LD.04.01.01 EP 2\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=2&cmsStandardId=2652&isIG=true",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "2652"
												},
												{
													"key": "isIG",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRegulationIGAndSP - Hospital and Regulation - Pharmaceutical Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation - Pharmaceutical Services \", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"   pm.expect(jsonData.payload.hoverText).to.eql(\"MM.03.01.01 EP 3,MM.03.01.01 EP 4,MM.05.01.11 EP 2\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=2&cmsStandardId=2652&isIG=false",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "2652"
												},
												{
													"key": "isIG",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetRegulationIGAndSP - Hospital and Regulation - Pharmaceutical Services Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation - Pharmaceutical Services \", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"\r",
													"   pm.expect(jsonData.payload.hoverText).to.eql(\"MM.03.01.01 EP 3,MM.03.01.01 EP 4,MM.05.01.11 EP 2\")\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=69&cmsStandardId=1227&isIG=true",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "1227"
												},
												{
													"key": "isIG",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetRegulationIGAndSP- CAH and Regulation Evaluation of Quality",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LD.03.02.01 EP 1,LD.03.05.01 EP 1,LD.03.05.01 EP 2,LD.03.05.01 EP 3,LD.03.07.01 EP 1,LD.03.07.01 EP 2,PI.04.01.01 EP 2,PI.04.01.01 EP 5,PI.04.01.01 EP 12\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=69&cmsStandardId=2652&isIG=false",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "2652"
												},
												{
													"key": "isIG",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCrosswalkHoverText - Hospital and Regulation : K100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText - Hospital and Regulation : K100\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LS.03.01.10 EP 4,LS.03.01.10 EP 5,LS.03.01.10 EP 6,LS.03.01.10 EP 7,LS.03.01.10 EP 8,LS.03.01.10 EP 9,LS.03.01.10 EP 10\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=23&cmsStandardId=3578&isIG=true",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3578"
												},
												{
													"key": "isIG",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCrosswalkHoverText- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCrosswalkHoverText- Ambulatory and Regulation Evaluation of Quality\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"     pm.expect(jsonData.payload.hoverText).to.eql(\"LD.03.02.01 EP 1,LD.03.05.01 EP 1,LD.03.05.01 EP 2,LD.03.05.01 EP 3,LD.03.07.01 EP 1,LD.03.07.01 EP 2,PI.04.01.01 EP 2,PI.04.01.01 EP 5,PI.04.01.01 EP 12\")\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=23&cmsStandardId=3591&isIG=false",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetRegulationIGAndSP"
											],
											"query": [
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3591"
												},
												{
													"key": "isIG",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "GetCrosswalkHoverText- Invalid cmsStandardId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is  No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetRegulationIGAndSP?programId=23&cmsStandardId=0&isIG=false",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetRegulationIGAndSP"
									],
									"query": [
										{
											"key": "programId",
											"value": "23"
										},
										{
											"key": "cmsStandardId",
											"value": "0"
										},
										{
											"key": "isIG",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GETCMSSTANDARDSDATA",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Program Admin",
							"item": [
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" GetCMSStandardsData - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"userID\": 0,\r\n  \"copID\": 1144,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 1,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Site Manager",
							"item": [
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" GetCMSStandardsData - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 23,\r\n  \"userID\": 0,\r\n  \"copID\": 1144,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 2,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Staff Member",
							"item": [
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" GetCMSStandardsData - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 23,\r\n  \"userID\": 0,\r\n  \"copID\": 1144,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 4,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Mock Survey User",
							"item": [
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" GetCMSStandardsData - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 23,\r\n  \"userID\": 0,\r\n  \"copID\": 1144,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 8,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Mock Survey Reviewer",
							"item": [
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1 - Basis and scope.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"EmailPrintCoP - Hospital and Regulation : §482.1 - Basis and scope. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis.",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation : §482.1(a) - Statutory basis. - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital aand Regulation : §482.1(a)(1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital aand Regulation : §482.1(a)(1) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(a)(1)(ii)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\" GetCMSStandardsData - Hospital and Regulation :§482.1(a)(1)(ii) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Hospital and Regulation :§482.1(b)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Hospital and Regulation :§482.1(b) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"userID\": 0,\r\n  \"copID\": 1197,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- Ambulatory and CoP: §416.2 Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - Ambulatory and CoP: §416.2 Definitions - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 23,\r\n  \"userID\": 0,\r\n  \"copID\": 1144,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Excluded hospital units: Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH  and Regulation: §412.25(a)(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH  and Regulation: §412.25(a)(2) - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSStandardsData- CAH and Regulation: §412.25 - Common Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData= pm.response.json();\r",
													"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
													" console.log(jsonData.success)\r",
													" pm.expect(jsonData.success).to.eql(true)\r",
													"  pm.expect(jsonData.payload).to.eql(true)\r",
													"});\r",
													"\r",
													"pm.test(\"errors should be null\", function() {\r",
													" console.log(jsonData.errors)\r",
													" pm.expect(jsonData.errors).to.eql(null)\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSStandardsData"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status Message is OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Status Code Scenarios",
					"item": [
						{
							"name": "Invalid copID - GetCMSStandardsData",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"  pm.expect(jsonData.payload).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 0,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid roleID- GetCMSStandardsData Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData= pm.response.json();\r",
											"pm.test(\"GetCMSStandardsData - CAH and Regulation: §412.25 - Common Requirements - success & Payload should be TRUE\", function() {\r",
											" console.log(jsonData.success)\r",
											" pm.expect(jsonData.success).to.eql(true)\r",
											"  pm.expect(jsonData.payload).to.eql(true)\r",
											"});\r",
											"\r",
											"pm.test(\"errors should be null\", function() {\r",
											" console.log(jsonData.errors)\r",
											" pm.expect(jsonData.errors).to.eql(null)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"userID\": 0,\r\n  \"copID\": 55,\r\n  \"roleID\": 0,\r\n  \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSStandardsData",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCMSStandardsData"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GETCMSBULKTREE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSBulkTree - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"copID\": 0,\r\n  \"roleID\": 1,\r\n  \"fromAssignmentPage\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSBulkTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSBulkTree"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSBulkTree - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"copID\": 0,\r\n  \"roleID\": 1,\r\n  \"fromAssignmentPage\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSBulkTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSBulkTree"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSBulkTree - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"copID\": 0,\r\n  \"roleID\": 1,\r\n  \"fromAssignmentPage\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSBulkTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSBulkTree"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSBulkTree - CAH Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"copID\": 0,\r\n  \"roleID\": 1,\r\n  \"fromAssignmentPage\": false\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSBulkTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCMSBulkTree"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"",
									"const jsonData= pm.response.json();",
									"for (i = 0; i < jsonData.payload.length; i++) {",
									"    pm.test(\"Verify \" + jsonData.payload[i].text",
									"        + \" and \" + jsonData.payload[i].text",
									"        ",
									"        + \"displayed\", function () { ",
									"            pm.expect(jsonData.payload[i].text).to.exist",
									"            pm.expect(jsonData.payload[i].text).to.not.be.null",
									"        })",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID- GetCMSBulkTree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be Empty \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql([])\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 0,\r\n  \"copID\": 0,\r\n  \"roleID\": 1,\r\n  \"fromAssignmentPage\": false\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Regulation/GetCMSBulkTree",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Regulation",
										"GetCMSBulkTree"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP-GET/UPDATE/REASSIGN/RESEND - TASKLIST",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetTaskList- Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"// Get the taskList from the response\r",
													"var taskList = pm.response.json().payload.taskList;\r",
													"\r",
													"// Extract the taskIDs from the taskList\r",
													"var taskIDs = [];\r",
													"taskList.forEach(function (task) {\r",
													"    taskIDs.push(task.taskID);\r",
													"});\r",
													"\r",
													"// Set the taskIDs as an environment variable\r",
													"pm.environment.set(\"taskIDs\", taskIDs);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Hospital Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"taskList is empty\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload.taskList).to.be.an('array').that.is.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task- Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"assignedDate\": \"07/28/2023\",\r\n        \"taskName\": \"test-API\",\r\n        \"epTextID\": 0,\r\n        \"taskTypeID\": 6,\r\n        \"cmsStandardID\": 2649,\r\n        \"assignedByUserID\": 639833,\r\n        \"createdByUserID\": 639833,\r\n        \"taskStatus\": 1,\r\n        \"assignedToUserID\": 0,\r\n        \"dueDate\": \"08/31/2023\",\r\n        \"reminderEmailRequired\": true,\r\n        \"ccUserIDs\": null,\r\n        \"listCcEmailIDs\": \"\",\r\n        \"listUsers\": \"279324,639833\",\r\n        \"listToEmailIDs\": \"Dyuvaraj@jcrinc.com,kkanagaraj@jcrinc.com\",\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"kkanagaraj@jcrinc.com\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Created Task- Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get the first taskID from the taskList array\r",
													"var responseBody = pm.response.json();\r",
													"var taskID = responseBody.payload.taskList[0].taskID;\r",
													"\r",
													"// Set the taskID as an environment variable\r",
													"pm.environment.set(\"taskID\", taskID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Task- Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"taskID\": {{taskID}},\r\n        \"taskName\": \"ep-testing1\",\r\n        \"taskTypeID\": 6,\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 2,\r\n        \"tracerCustomID\": null,\r\n        \"tracerTypeID\": null,\r\n        \"tracerName\": \"\",\r\n        \"tracerResponseID\": 0,\r\n        \"observationTitle\": \"\",\r\n        \"tracerQuestionID\": null,\r\n        \"tracerQuestionAnswerID\": null,\r\n        \"epTextID\": 0,\r\n        \"standardEffectiveBeginDate\": \"08/27/2023\",\r\n        \"cmsStandardID\": 2649,\r\n        \"assignedDate\": \"07/25/2023\",\r\n        \"assignedToUserID\": 639833,\r\n        \"assignedToEmailAddress\": \"kkanagaraj@jcrinc.com\",\r\n        \"assignedToUserStatus\": 1,\r\n        \"assignedByUserID\": 639833,\r\n        \"lastUpdatedByName\": \"k, kamal\",\r\n        \"createdByName\": \"k, kamal\",\r\n        \"createDate\": \"07/25/2023\",\r\n        \"taskDetails\": \"test test\",\r\n        \"ccUserIDs\": \"639875\",\r\n        \"ccUserEmailIDs\": \"kmarsonia@jcrinc.com\",\r\n        \"dueDate\": \"07/28/2023\",\r\n        \"taskStatus\": 2,\r\n        \"completeDate\": null,\r\n        \"taskResolution\": null,\r\n        \"reminderEmailRequired\": true,\r\n        \"updateDate\": \"07/25/2023\",\r\n        \"listCcEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"listUsers\": \"639833\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Task- Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"const taskList = response.payload.taskList;\r",
													"\r",
													"let firstTaskStatus = \"\";\r",
													"\r",
													"if (taskList.length > 0) {\r",
													"    firstTaskStatus = taskList[0].statusName;\r",
													"}\r",
													"\r",
													"pm.test(\"First task status is complete\", function () {\r",
													"    pm.expect(firstTaskStatus).to.eql(\"Complete\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Details Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=2&taskId={{taskID}}&standardEffBeginDate=08/27/2023",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskAndUserDetails"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "taskId",
													"value": "{{taskID}}"
												},
												{
													"key": "standardEffBeginDate",
													"value": "08/27/2023"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ResendTask - Hospital Mock survey site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Payload is true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"skipItemAssociated\": false,\r\n    \"taskIDs\": \"{{taskID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ResendTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ResendTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "ReAssignTasks- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lstTaskIDs\": \"{{taskIDs}}\",\r\n    \"assignedToUserID\": 279324,\r\n    \"assignedToEmailID\": \"Dyuvaraj@jcrinc.com\",\r\n    \"ccUserIDs\": null,\r\n    \"ccEmailIDs\": null,\r\n    \"dueDate\": \"\",\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"updatedByUserID\": 0,\r\n    \"skipItemAssociated\": false,\r\n    \"standardEffBeginDate\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ReAssignTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetTaskList- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"// Get the taskList from the response\r",
													"var taskList = pm.response.json().payload.taskList;\r",
													"\r",
													"// Extract the taskIDs from the taskList\r",
													"var taskIDs = [];\r",
													"taskList.forEach(function (task) {\r",
													"    taskIDs.push(task.taskID);\r",
													"});\r",
													"\r",
													"// Set the taskIDs as an environment variable\r",
													"pm.environment.set(\"taskIDs\", taskIDs);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 3723,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"taskList is empty\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload.taskList).to.be.an('array').that.is.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 3723,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"assignedDate\": \"07/28/2023\",\r\n        \"taskName\": \"test-API\",\r\n        \"epTextID\": 0,\r\n        \"taskTypeID\": 6,\r\n        \"cmsStandardID\": 3723,\r\n        \"assignedByUserID\": 639833,\r\n        \"createdByUserID\": 639833,\r\n        \"taskStatus\": 1,\r\n        \"assignedToUserID\": 0,\r\n        \"dueDate\": \"08/31/2023\",\r\n        \"reminderEmailRequired\": true,\r\n        \"ccUserIDs\": null,\r\n        \"listCcEmailIDs\": \"\",\r\n        \"listUsers\": \"279324,639833\",\r\n        \"listToEmailIDs\": \"Dyuvaraj@jcrinc.com,kkanagaraj@jcrinc.com\",\r\n        \"siteID\": {{MockSurvey_SiteID}},\r\n        \"programID\": 23,\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"kkanagaraj@jcrinc.com\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Created Task- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get the first taskID from the taskList array\r",
													"var responseBody = pm.response.json();\r",
													"var taskID = responseBody.payload.taskList[0].taskID;\r",
													"\r",
													"// Set the taskID as an environment variable\r",
													"pm.environment.set(\"taskID\", taskID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 3723,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Task- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"taskID\": {{taskID}},\r\n        \"taskName\": \"ep-testing1\",\r\n        \"taskTypeID\": 6,\r\n        \"siteID\": {{MockSurvey_SiteID}},\r\n        \"programID\": 23,\r\n        \"tracerCustomID\": null,\r\n        \"tracerTypeID\": null,\r\n        \"tracerName\": \"\",\r\n        \"tracerResponseID\": 0,\r\n        \"observationTitle\": \"\",\r\n        \"tracerQuestionID\": null,\r\n        \"tracerQuestionAnswerID\": null,\r\n        \"epTextID\": 0,\r\n        \"standardEffectiveBeginDate\": \"08/27/2023\",\r\n        \"cmsStandardID\": 3723,\r\n        \"assignedDate\": \"07/25/2023\",\r\n        \"assignedToUserID\": 639833,\r\n        \"assignedToEmailAddress\": \"kkanagaraj@jcrinc.com\",\r\n        \"assignedToUserStatus\": 1,\r\n        \"assignedByUserID\": 639833,\r\n        \"lastUpdatedByName\": \"k, kamal\",\r\n        \"createdByName\": \"k, kamal\",\r\n        \"createDate\": \"07/25/2023\",\r\n        \"taskDetails\": \"test test\",\r\n        \"ccUserIDs\": \"639875\",\r\n        \"ccUserEmailIDs\": \"kmarsonia@jcrinc.com\",\r\n        \"dueDate\": \"07/28/2023\",\r\n        \"taskStatus\": 2,\r\n        \"completeDate\": null,\r\n        \"taskResolution\": null,\r\n        \"reminderEmailRequired\": true,\r\n        \"updateDate\": \"07/25/2023\",\r\n        \"listCcEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"listUsers\": \"639833\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Task- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"const taskList = response.payload.taskList;\r",
													"\r",
													"let firstTaskStatus = \"\";\r",
													"\r",
													"if (taskList.length > 0) {\r",
													"    firstTaskStatus = taskList[0].statusName;\r",
													"}\r",
													"\r",
													"pm.test(\"First task status is complete\", function () {\r",
													"    pm.expect(firstTaskStatus).to.eql(\"Complete\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 3723,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Details Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{MockSurvey_SiteID}}&programId=2&taskId={{taskID}}&standardEffBeginDate=08/27/2023",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskAndUserDetails"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "taskId",
													"value": "{{taskID}}"
												},
												{
													"key": "standardEffBeginDate",
													"value": "08/27/2023"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ResendTask - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Payload is true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"skipItemAssociated\": false,\r\n    \"taskIDs\": \"{{taskID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ResendTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ResendTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "ReAssignTasks- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lstTaskIDs\": \"{{taskIDs}}\",\r\n    \"assignedToUserID\": 279324,\r\n    \"assignedToEmailID\": \"Dyuvaraj@jcrinc.com\",\r\n    \"ccUserIDs\": null,\r\n    \"ccEmailIDs\": null,\r\n    \"dueDate\": \"\",\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"updatedByUserID\": 0,\r\n    \"skipItemAssociated\": false,\r\n    \"standardEffBeginDate\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ReAssignTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2649,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 23,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 3723,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetTaskList-CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"// Get the taskList from the response\r",
													"var taskList = pm.response.json().payload.taskList;\r",
													"\r",
													"// Extract the taskIDs from the taskList\r",
													"var taskIDs = [];\r",
													"taskList.forEach(function (task) {\r",
													"    taskIDs.push(task.taskID);\r",
													"});\r",
													"\r",
													"// Set the taskIDs as an environment variable\r",
													"pm.environment.set(\"taskIDs\", taskIDs);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"taskList is empty\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload.taskList).to.be.an('array').that.is.empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Task- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"assignedDate\": \"07/28/2023\",\r\n        \"taskName\": \"test-API\",\r\n        \"epTextID\": 0,\r\n        \"taskTypeID\": 6,\r\n        \"cmsStandardID\": 960,\r\n        \"assignedByUserID\": 639833,\r\n        \"createdByUserID\": 639833,\r\n        \"taskStatus\": 1,\r\n        \"assignedToUserID\": 0,\r\n        \"dueDate\": \"08/31/2023\",\r\n        \"reminderEmailRequired\": true,\r\n        \"ccUserIDs\": null,\r\n        \"listCcEmailIDs\": \"\",\r\n        \"listUsers\": \"279324,639833\",\r\n        \"listToEmailIDs\": \"Dyuvaraj@jcrinc.com,kkanagaraj@jcrinc.com\",\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 69,\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"kkanagaraj@jcrinc.com\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Created Task- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get the first taskID from the taskList array\r",
													"var responseBody = pm.response.json();\r",
													"var taskID = responseBody.payload.taskList[0].taskID;\r",
													"\r",
													"// Set the taskID as an environment variable\r",
													"pm.environment.set(\"taskID\", taskID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Task- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userTask\": {\r\n        \"taskID\": {{taskID}},\r\n        \"taskName\": \"ep-testing1\",\r\n        \"taskTypeID\": 6,\r\n        \"siteID\": {{Normal_SiteID}},\r\n        \"programID\": 69,\r\n        \"tracerCustomID\": null,\r\n        \"tracerTypeID\": null,\r\n        \"tracerName\": \"\",\r\n        \"tracerResponseID\": 0,\r\n        \"observationTitle\": \"\",\r\n        \"tracerQuestionID\": null,\r\n        \"tracerQuestionAnswerID\": null,\r\n        \"epTextID\": 0,\r\n        \"standardEffectiveBeginDate\": \"08/27/2023\",\r\n        \"cmsStandardID\": 960,\r\n        \"assignedDate\": \"07/25/2023\",\r\n        \"assignedToUserID\": 639833,\r\n        \"assignedToEmailAddress\": \"kkanagaraj@jcrinc.com\",\r\n        \"assignedToUserStatus\": 1,\r\n        \"assignedByUserID\": 639833,\r\n        \"lastUpdatedByName\": \"k, kamal\",\r\n        \"createdByName\": \"k, kamal\",\r\n        \"createDate\": \"07/25/2023\",\r\n        \"taskDetails\": \"test test\",\r\n        \"ccUserIDs\": \"639875\",\r\n        \"ccUserEmailIDs\": \"kmarsonia@jcrinc.com\",\r\n        \"dueDate\": \"07/28/2023\",\r\n        \"taskStatus\": 2,\r\n        \"completeDate\": null,\r\n        \"taskResolution\": null,\r\n        \"reminderEmailRequired\": true,\r\n        \"updateDate\": \"07/25/2023\",\r\n        \"listCcEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"listUsers\": \"639833\",\r\n        \"listToEmailIDs\": \"kkanagaraj@jcrinc.com\",\r\n        \"updatedByUserID\": 639833,\r\n        \"skipItemAssociated\": false\r\n    },\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"updatedByUserID\": 639833,\r\n    \"lstUserEmailsCc\": \"\",\r\n    \"lstUserEmailsTo\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/UpdateUserTask",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"UpdateUserTask"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Task- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"const taskList = response.payload.taskList;\r",
													"\r",
													"let firstTaskStatus = \"\";\r",
													"\r",
													"if (taskList.length > 0) {\r",
													"    firstTaskStatus = taskList[0].statusName;\r",
													"}\r",
													"\r",
													"pm.test(\"First task status is complete\", function () {\r",
													"    pm.expect(firstTaskStatus).to.eql(\"Complete\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User Details- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskAndUserDetails?siteId={{Normal_SiteID}}&programId=69&taskId={{taskID}}&standardEffBeginDate=08/27/2023",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskAndUserDetails"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "taskId",
													"value": "{{taskID}}"
												},
												{
													"key": "standardEffBeginDate",
													"value": "08/27/2023"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ResendTask - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Payload is true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.eql(true);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"skipItemAssociated\": false,\r\n    \"taskIDs\": \"{{taskID}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ResendTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ResendTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "ReAssignTasks- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"lstTaskIDs\": \"{{taskIDs}}\",\r\n    \"assignedToUserID\": 279324,\r\n    \"assignedToEmailID\": \"Dyuvaraj@jcrinc.com\",\r\n    \"ccUserIDs\": null,\r\n    \"ccEmailIDs\": null,\r\n    \"dueDate\": \"\",\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"updatedByUserID\": 0,\r\n    \"skipItemAssociated\": false,\r\n    \"standardEffBeginDate\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/ReAssignTasks",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"ReAssignTasks"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteTask - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/DeleteTasks?taskIds={{taskIDs}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"DeleteTasks"
											],
											"query": [
												{
													"key": "taskIds",
													"value": "{{taskIDs}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTaskList- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 69,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 960,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTaskList"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"",
									"",
									"const jsonData= pm.response.json();",
									"for (i = 0; i < jsonData.payload.length; i++) {",
									"    pm.test(\"Verify \" + jsonData.payload[i].text",
									"        + \" and \" + jsonData.payload[i].text",
									"        ",
									"        + \"displayed\", function () { ",
									"            pm.expect(jsonData.payload[i].text).to.exist",
									"            pm.expect(jsonData.payload[i].text).to.not.be.null",
									"        })",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID- Get Task List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"TaskList is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload.taskList.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 0,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2652,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardId - GetTask List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"TaskList is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload.taskList.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 0,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetTask List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"TaskList is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload.taskList.length).to.equal(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 0,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2652,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GetTask List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"siteID\": 0,\r\n    \"programID\": 2,\r\n    \"certificationItemID\": 0,\r\n    \"standardEffBeginDate\": \"\",\r\n    \"cmsStandardId\": 2652,\r\n    \"epTextID\": 0,\r\n    \"taskTypeId\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTaskList",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTaskList"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UPDATEBULKCMSDOCUMENTATION",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "UpdateBulkCMSDocumentation - Hospital & Organization CMS Findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 372\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 373\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 374\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 375\r\n        }\r\n    ],\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"documentationTypeID\": 1,\r\n    \"documentationText\": \"Food and Dietetic Services & Organization CMS Findings_Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation - Hospital / Plan of Correction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 372\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 373\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 374\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 375\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"documentationTypeID\": 2,\r\n    \"documentationText\": \"UpdateBulkCMSDocumentation - Hospital / Plan of Correction\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation - Hospital & Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 372\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 373\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 374\r\n        },\r\n        {\r\n            \"copID\": 101,\r\n            \"cmsStandardID\": 375\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"documentationTypeID\": 4,\r\n    \"documentationText\": \"UpdateBulkCMSDocumentation - Hospital & Internal Notes\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "UpdateBulkCMSDocumentation - Ambulatory & Organization CMS Findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3707\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 239\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3397\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3708\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3709\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3710\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 285\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3713\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3382\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3716\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3717\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3718\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3719\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3720\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3721\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3722\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 23,\r\n    \"documentationTypeID\": 1,\r\n    \"documentationText\": \"Ambulatory_Documentation _Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation - Ambulatory & Plan of Correction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3707\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 239\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3397\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3708\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3709\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3710\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 285\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3713\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3382\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3716\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3717\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3718\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3719\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3720\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3721\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3722\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 23,\r\n    \"documentationTypeID\": 2,\r\n    \"documentationText\": \"Ambulatory_Documentation Plan of Correction _Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation - Ambulatory & Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3707\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 239\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3397\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3708\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3709\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3710\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 285\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3713\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3382\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3716\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3717\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3718\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3719\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3720\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3721\r\n        },\r\n        {\r\n            \"copID\": 117,\r\n            \"cmsStandardID\": 3722\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 23,\r\n    \"documentationTypeID\": 4,\r\n    \"documentationText\": \"Ambulatory_Documentation Internal Notes _Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "UpdateBulkCMSDocumentation- CAH & Organization CMS Findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1624\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1625\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1627\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1629\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 69,\r\n    \"documentationTypeID\": 1,\r\n    \"documentationText\": \"Organization CMS Findings_Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation- CAH & Plan of Correction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1624\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1625\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1627\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1629\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 69,\r\n    \"documentationTypeID\": 2,\r\n    \"documentationText\": \"Plan of Correction_Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSDocumentation- CAH Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1624\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1625\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1627\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1629\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 69,\r\n    \"documentationTypeID\": 4,\r\n    \"documentationText\": \"Internal Notes_Test_API\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSDocumentation"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"payload should be true\", function() {",
									" ",
									" pm.expect(jsonData.payload).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid documentationTypeID- UpdateBulkCMSDocumentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be false \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql(false)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1624\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1625\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1627\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 1629\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 69,\r\n    \"documentationTypeID\": 0,\r\n    \"documentationText\": \"Internal Notes_Test_API\",\r\n    \"compliantDate\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"UpdateBulkCMSDocumentation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UPDATEBULKCMSSCORE",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "UpdateBulkCMSScore - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"roleID\": 4,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 1,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 0,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 91,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "UpdateBulkCMSScore- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 91,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 116,\r\n            \"cmsStandardID\": 3701,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 116,\r\n            \"cmsStandardID\": 3702,\r\n            \"levelID\": 2\r\n        },\r\n         {\r\n            \"copID\": 116,\r\n            \"cmsStandardID\": 3703,\r\n            \"levelID\": 3\r\n        }\r\n    ],\r\n    \"siteID\": 15320,\r\n    \"roleID\": 4,\r\n    \"programID\": 23,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "UpdateBulkCMSScore- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 95,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCMSScore- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 91,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{MockSurvey_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCMSScore"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"payload should be true\", function() {",
									" ",
									" pm.expect(jsonData.payload).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid documentationTypeID- UpdateBulkCMSDocumentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be false \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql(false)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bulkCmsInfo\": [\r\n        {\r\n            \"copID\": 1197,\r\n            \"cmsStandardID\": 2649,\r\n            \"levelID\": 1\r\n        },\r\n        {\r\n            \"copID\": 91,\r\n            \"cmsStandardID\": 6,\r\n            \"levelID\": 1\r\n        }\r\n    ],\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"roleID\": 1,\r\n    \"programID\": 2,\r\n    \"scoreType\": 1,\r\n    \"scoreID\": 2,\r\n    \"isUpdateDateOnly\": false,\r\n    \"certificationItemID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCMSScore",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"UpdateBulkCMSScore"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UPDATECMSSCOREDOCUMENTATION",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "UpdateCMSScoreDocumentation - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 3578,\r\n  \"siteID\": 54586,\r\n  \"programID\": 23,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1000,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 1,\r\n  \"roleID\": 4,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 19,\r\n  \"levelTypeID\": 1,\r\n  \"scoreValue\" : 0,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT5-new\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 2650,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1000,\r\n  \"scoreDate\": \"2023-08-09T12:37:08.536Z\",\r\n  \"epUserRoleID\": 1,\r\n  \"roleID\": 4,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 1000,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 2652,\r\n  \"siteID\": 14679,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 1,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1121,\r\n  \"scoreDate\": \"2023-08-09T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- 192536",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"cmsStandardID\": 2649,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 1,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 1,\r\n  \"roleID\": 4,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 1,\r\n  \"scoreValue\" : 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT5-new\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "UpdateCMSScoreDocumentation- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 3589,\r\n   \"siteID\": 14679,\r\n  \"programID\": 23,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1,\r\n  \"scoreDate\":  \"2023-08-01T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 20,\r\n  \"levelTypeID\": 1,\r\n  \"scoreValue\" : 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 3591,\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1,\r\n  \"scoreDate\":  \"2023-08-01T12:37:08.536Z\",\r\n  \"epUserRoleID\": 1,\r\n  \"roleID\": 4,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 20,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 3590,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1121,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 20,\r\n  \"levelTypeID\": 2,\r\n  \"scoreValue\" : 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "UpdateCMSScoreDocumentation- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"cmsStandardID\": 2652,\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"regulationTypeID\": 1,\r\n    \"userID\": 0,\r\n    \"scoreTypeID\": 1,\r\n    \"scoreID\": 1121,\r\n    \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n    \"epUserRoleID\": 3,\r\n    \"roleID\": 1,\r\n    \"updateDocumentation\": true,\r\n    \"isUpdateCMSCOPNote\": false,\r\n    \"copID\": 1197,\r\n    \"levelTypeID\": 3,\r\n    \"scoreValue\": 0,\r\n    \"documentationTypeID\": 1,\r\n    \"documentationText\": \"Doc-DT\",\r\n    \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 2652,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1121,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 0,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSScoreDocumentation- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"cmsStandardID\": 2652,\r\n  \"siteID\": 15076,\r\n  \"programID\": 69,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1121,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 0,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateCMSScoreDocumentation"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"payload should be true\", function() {",
									" ",
									" pm.expect(jsonData.payload).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid documentationTypeID- UpdateCMSScoreDocumentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be false \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql(false)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"cmsStandardID\": 2652,\r\n  \"siteID\": 15076,\r\n  \"programID\": 2,\r\n  \"regulationTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"scoreTypeID\": 1,\r\n  \"scoreID\": 1121,\r\n  \"scoreDate\": \"2023-07-23T12:37:08.536Z\",\r\n  \"epUserRoleID\": 3,\r\n  \"roleID\": 1,\r\n  \"updateDocumentation\": true,\r\n  \"isUpdateCMSCOPNote\": false,\r\n  \"copID\": 1197,\r\n  \"levelTypeID\": 3,\r\n  \"scoreValue\" : 0,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"Doc-DT\",\r\n  \"compliantDate\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/UpdateCMSScoreDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"UpdateCMSScoreDocumentation"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- UPDATEBULKCMSREASSIGN",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "UpdateBulkCmsReassign- Hospital & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"hospital\",\r\n  \"origAssignedToUserId\": 279324,\r\n  \"newAssignedToUserId\": 639833,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 94,\r\n      \"cmsStandardID\": 169\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- Hospital / Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"hospital\",\r\n \"origAssignedToUserId\": 639833,\r\n  \"newAssignedToUserId\": 279324,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1197,\r\n      \"cmsStandardID\": 2649\r\n    },\r\n     {\r\n      \"copID\": 95,\r\n      \"cmsStandardID\": 197\r\n    },\r\n     {\r\n      \"copID\": 95,\r\n      \"cmsStandardID\": 198\r\n    },\r\n     {\r\n      \"copID\": 96,\r\n      \"cmsStandardID\": 233\r\n    },\r\n     {\r\n      \"copID\": 96,\r\n      \"cmsStandardID\": 234\r\n    },\r\n     {\r\n      \"copID\": 97,\r\n      \"cmsStandardID\": 266\r\n    },\r\n     {\r\n      \"copID\": 97,\r\n      \"cmsStandardID\": 269\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- Hospital &MockSurvey_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"hospital\",\r\n \"origAssignedToUserId\": 279324,\r\n  \"newAssignedToUserId\": 639833,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1197,\r\n      \"cmsStandardID\": 2649\r\n    },\r\n     {\r\n      \"copID\": 95,\r\n      \"cmsStandardID\": 197\r\n    },\r\n     {\r\n      \"copID\": 95,\r\n      \"cmsStandardID\": 198\r\n    },\r\n     {\r\n      \"copID\": 96,\r\n      \"cmsStandardID\": 233\r\n    },\r\n     {\r\n      \"copID\": 96,\r\n      \"cmsStandardID\": 234\r\n    },\r\n     {\r\n      \"copID\": 97,\r\n      \"cmsStandardID\": 266\r\n    },\r\n     {\r\n      \"copID\": 97,\r\n      \"cmsStandardID\": 269\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "UpdateBulkCmsReassign- Ambulatory & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"Ambulatory\",\r\n  \"origAssignedToUserId\": 639833,\r\n  \"newAssignedToUserId\": 279324,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1144,\r\n      \"cmsStandardID\": 3733\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- Ambulatory & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"Ambulatory\",\r\n  \"origAssignedToUserId\": 279324,\r\n  \"newAssignedToUserId\": 639833,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1144,\r\n      \"cmsStandardID\": 3733\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- Ambulatory & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 23,\r\n    \"siteName\": \"Katalon Site Two\",\r\n    \"programName\": \"hospital\",\r\n    \"origAssignedToUserId\": 639833,\r\n    \"newAssignedToUserId\": 279324,\r\n    \"assignedByUserId\": 639833,\r\n    \"cmsStandardInfo\": [\r\n        {\r\n            \"copID\": 19,\r\n            \"cmsStandardID\": 3578\r\n        },\r\n        {\r\n            \"copID\": 19,\r\n            \"cmsStandardID\": 3579\r\n        },\r\n        {\r\n            \"copID\": 20,\r\n            \"cmsStandardID\": 3589\r\n        },\r\n        {\r\n            \"copID\": 20,\r\n            \"cmsStandardID\": 3590\r\n        },\r\n        {\r\n            \"copID\": 21,\r\n            \"cmsStandardID\": 3617\r\n        },\r\n        {\r\n            \"copID\": 21,\r\n            \"cmsStandardID\": 3618\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- Ambulatory &MockSurvey_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 23,\r\n    \"siteName\": \"Katalon Site Two\",\r\n    \"programName\": \"hospital\",\r\n    \"origAssignedToUserId\": 279324,\r\n    \"newAssignedToUserId\": 639833,\r\n    \"assignedByUserId\": 639833,\r\n    \"cmsStandardInfo\": [\r\n        {\r\n            \"copID\": 19,\r\n            \"cmsStandardID\": 3578\r\n        },\r\n        {\r\n            \"copID\": 19,\r\n            \"cmsStandardID\": 3579\r\n        },\r\n        {\r\n            \"copID\": 20,\r\n            \"cmsStandardID\": 3589\r\n        },\r\n        {\r\n            \"copID\": 20,\r\n            \"cmsStandardID\": 3590\r\n        },\r\n        {\r\n            \"copID\": 21,\r\n            \"cmsStandardID\": 3617\r\n        },\r\n        {\r\n            \"copID\": 21,\r\n            \"cmsStandardID\": 3618\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "UpdateBulkCmsReassign- CAH & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"siteName\": \"Katalon Site Two\",\r\n    \"programName\": \"CAH\",\r\n    \"origAssignedToUserId\": 639833,\r\n    \"newAssignedToUserId\": 279324,\r\n    \"assignedByUserId\": 639833,\r\n    \"cmsStandardInfo\": [\r\n        {\r\n            \"copID\": 55,\r\n            \"cmsStandardID\": 790\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- CAH & Normal_SiteID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"siteID\": {{Normal_SiteID}},\r\n    \"programID\": 69,\r\n    \"siteName\": \"Katalon Site Two\",\r\n    \"programName\": \"CAH\",\r\n  \"origAssignedToUserId\": 279324,\r\n  \"newAssignedToUserId\": 639833,\r\n  \"assignedByUserId\": 639833,\r\n    \"cmsStandardInfo\": [\r\n        {\r\n            \"copID\": 55,\r\n            \"cmsStandardID\": 790\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- CAH & Normal_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"CAH\",\r\n  \"origAssignedToUserId\": 639833,\r\n    \"newAssignedToUserId\": 279324,\r\n    \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1119\r\n    },\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1120\r\n    },\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1121\r\n    },\r\n     {\r\n      \"copID\": 37,\r\n      \"cmsStandardID\": 1166\r\n    },\r\n    {\r\n      \"copID\": 37,\r\n      \"cmsStandardID\": 1167\r\n    },\r\n     {\r\n      \"copID\": 38,\r\n      \"cmsStandardID\": 1181\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateBulkCmsReassign- CAH & MockSurvey_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n   \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"CAH\",\r\n  \"origAssignedToUserId\": 279324,\r\n  \"newAssignedToUserId\": 639833,\r\n  \"assignedByUserId\": 639833,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1119\r\n    },\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1120\r\n    },\r\n    {\r\n      \"copID\": 36,\r\n      \"cmsStandardID\": 1121\r\n    },\r\n     {\r\n      \"copID\": 37,\r\n      \"cmsStandardID\": 1166\r\n    },\r\n    {\r\n      \"copID\": 37,\r\n      \"cmsStandardID\": 1167\r\n    },\r\n     {\r\n      \"copID\": 38,\r\n      \"cmsStandardID\": 1181\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Scoring",
												"UpdateBulkCmsReassign"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"payload should be true\", function() {",
									" ",
									" pm.expect(jsonData.payload).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid siteID- UpdateBulkCmsReassign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be false \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql(false)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"hospital\",\r\n  \"origAssignedToUserId\": 580681,\r\n  \"newAssignedToUserId\": 306950,\r\n  \"assignedByUserId\": 337506,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1197,\r\n      \"cmsStandardID\": 2651\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"UpdateBulkCmsReassign"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GET/UPDATE/DELETE - Linked Documentation",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSLinkDocuments- Hospital & Mock survey ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with File path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 6,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"http://www.pepper.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with WebAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 6,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.pepper.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSLinkDocuments- Update DocumentDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"http://www.pepper1.com\",\r\n  \"DocumentDescription\": \"pepper1\",\r\n  \"RegulationLinkedDocumentID\": 486,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSLinkDocuments- Delete Linked Documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"Check if documentDescription contains 'pepper'\", function () {\r",
													"    var responseJSON = pm.response.json();\r",
													"    var cmsLinkDocumentsResponse = responseJSON.payload.cmsLinkDocumentsResponse;\r",
													"\r",
													"    cmsLinkDocumentsResponse.forEach(function (document) {\r",
													"        pm.expect(document.documentDescription).to.include('pepper');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 6,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.gp.com\",\r\n  \"DocumentDescription\": \"gp\",\r\n  \"RegulationLinkedDocumentID\": 476,\r\n  \"DeleteFlag\": true\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSLinkDocuments- Hospital & Mock survey ID Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"epUserRoleID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"linkedDocumentTypeID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSLinkDocuments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSLinkDocuments- Ambulatory & Mock survey ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Get & Delete all WebLinks\", function () {\r",
													"pm.environment.set(\"EpLinkIDCount\",jsonData.payload.cmsLinkDocumentsResponse.length);\r",
													"\r",
													"console.log(jsonData.payload.cmsLinkDocumentsResponse.length);\r",
													"\r",
													"if(jsonData.payload.cmsLinkDocumentsResponse.length>0){\r",
													"for(i=0;i<jsonData.payload.cmsLinkDocumentsResponse.length;i++){\r",
													"\r",
													"\r",
													"\r",
													"pm.environment.set(\"regulationLinkedDocumentIDs\",jsonData.payload.cmsLinkDocumentsResponse[i].regulationLinkedDocumentID);\r",
													"}\r",
													"\r",
													"\r",
													"}\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"epUserRoleID\": 0,\r\n  \"cmsStandardID\": 3730,\r\n  \"linkedDocumentTypeID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSLinkDocuments- Delete Linked Documents Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3730,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.gp.com\",\r\n  \"DocumentDescription\": \"gp\",\r\n  \"RegulationLinkedDocumentID\": {{regulationLinkedDocumentIDs}},\r\n  \"DeleteFlag\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with File path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Set regulationLinkedDocumentID as environment variable\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    var firstDocument = jsonData.payload.cmsLinkDocumentsResponse[0];\r",
													"    pm.environment.set(\"regulationLinkedDocumentID\", firstDocument.regulationLinkedDocumentID.toString());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3730,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"http://www.pepper.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with WebAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3730,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.pepper.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSLinkDocuments- Update DocumentDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var DocumentLink= \"www.\" + pm.variables.replaceIn('{{$randomCompanyName}}') + \".com\";\r",
													"pm.environment.set('UpdateDocumentLink',DocumentLink);\r",
													"\r",
													"var DocumentDescription= pm.variables.replaceIn('{{$randomAdjective}}');\r",
													"pm.environment.set('UpdateDocumentDescription',DocumentDescription);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3730,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"{{UpdateDocumentLink}}\",\r\n  \"DocumentDescription\": \"{{UpdateDocumentDescription}}\",\r\n  \"RegulationLinkedDocumentID\": {{regulationLinkedDocumentID}},\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSLinkDocuments- Ambulatory & Mock survey ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"pm.test(\"Verify UpdateddocumentLink\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsLinkDocumentsResponse[0].documentLink).to.eql(pm.environment.get(\"UpdateDocumentLink\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Verify UpdateddocumentDescription\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsLinkDocumentsResponse[0].documentDescription).to.eql(pm.environment.get(\"UpdateDocumentDescription\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"epUserRoleID\": 0,\r\n  \"cmsStandardID\": 3730,\r\n  \"linkedDocumentTypeID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "DeleteCMSLinkDocuments- Delete Linked Documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3730,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.gp.com\",\r\n  \"DocumentDescription\": \"gp\",\r\n  \"RegulationLinkedDocumentID\": 492,\r\n  \"DeleteFlag\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSLinkDocuments- CAH & Mock survey ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"epUserRoleID\": 0,\r\n  \"cmsStandardID\": 2492,\r\n  \"linkedDocumentTypeID\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with File path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 2492,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"http://www.pepper.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateCMSLinkDocuments- with WebAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 2492,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.indhu.com\",\r\n  \"DocumentDescription\": \"pepper\",\r\n  \"RegulationLinkedDocumentID\": null,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSLinkDocuments- Update DocumentDescription",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 2492,\r\n  \"LinkedDocumentTypeID\": 1,\r\n  \"DocumentLink\": \"http://www.kamal.com\",\r\n  \"DocumentDescription\": \"pepper1\",\r\n  \"RegulationLinkedDocumentID\": 512,\r\n  \"DeleteFlag\": false\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateCMSLinkDocuments- Delete Linked Documents",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 2492,\r\n  \"LinkedDocumentTypeID\": 2,\r\n  \"DocumentLink\": \"http://www.gp.com\",\r\n  \"DocumentDescription\": \"gp\",\r\n  \"RegulationLinkedDocumentID\": 512,\r\n  \"DeleteFlag\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSLinkDocuments",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSLinkDocuments"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid siteID- UpdateBulkCmsReassign",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status Message is OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Verify Payload should be false \", function () {\r",
											"console.log(jsonData.payload)\r",
											"\r",
											"\r",
											"pm.expect(jsonData.payload).to.eql(false)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"siteName\": \"Katalon Site Two\",\r\n  \"programName\": \"hospital\",\r\n  \"origAssignedToUserId\": 580681,\r\n  \"newAssignedToUserId\": 306950,\r\n  \"assignedByUserId\": 337506,\r\n  \"cmsStandardInfo\": [\r\n    {\r\n      \"copID\": 1197,\r\n      \"cmsStandardID\": 2651\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Scoring/UpdateBulkCmsReassign",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Scoring",
										"UpdateBulkCmsReassign"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GET/UPDATE - CMSDocumentation",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "Create Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Plan of Correction CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 2,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Plan of Correction CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Internal Notes CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 4,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Internal Notes CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 4\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 4,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"levelTypeID\": 4,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 4\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verified 1st documentationText \", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"    var firstDocumentationText = responseBody.payload[0].documentationText;\r",
													"    var randomDescription = pm.environment.get(\"RandomDescription\");\r",
													"\r",
													"    pm.expect(firstDocumentationText).to.include(randomDescription);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CMSOtherFindings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 12\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSOtherFindings",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSOtherFindings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "Create Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 2,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Plan of Correction CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 2,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Plan of Correction CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Internal Notes CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 4,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Internal Notes CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 4\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verified 1st documentationText \", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"    var firstDocumentationText = responseBody.payload[0].documentationText;\r",
													"    var randomDescription = pm.environment.get(\"RandomDescription\");\r",
													"\r",
													"    pm.expect(firstDocumentationText).to.include(randomDescription);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CMSOtherFindings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3733\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSOtherFindings",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSOtherFindings"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "Create Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Plan of Correction CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 2,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Plan of Correction CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Internal Notes CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 4,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Internal Notes CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 4\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res = pm.response.json();\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Verified 1st documentationText \", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"    var firstDocumentationText = responseBody.payload[0].documentationText;\r",
													"    var randomDescription = pm.environment.get(\"RandomDescription\");\r",
													"\r",
													"    pm.expect(firstDocumentationText).to.include(randomDescription);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Organization CMS Findings CMSDocumentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													" var jsonData = pm.response.json();\r",
													"pm.test(\"Verify orgFindingsFlag has 1\",function()\r",
													"{\r",
													"   pm.expect(jsonData.payload.statusFlags.orgFindingsFlag).to.eql(1);\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var Documentation= pm.variables.replaceIn('{{$randomWords}}');\r",
													"pm.environment.set('RandomDescription',Documentation);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 1,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"UpdateCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Updated Organization CMS Findings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"let res= pm.response.json();\r",
													"\r",
													"\r",
													"pm.test(\"Verify DocumentationText\",function()\r",
													"{\r",
													"    pm.expect(res.payload.cmsDocumentationResponse.documentationText).to.eql(pm.environment.get(\"RandomDescription\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get CMSOtherFindings CMS Documentation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 3563\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSOtherFindings",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSOtherFindings"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid cmsStandardID - CMSDocumentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 0,\r\n  \"userID\": 0,\r\n  \"roleTypeID\": 0,\r\n  \"regualtionTypeID\": 0,\r\n  \"userRoleID\": 1,\r\n  \"documentationTypeID\": 1,\r\n  \"documentationText\": \"{{RandomDescription}}\",\r\n  \"compliantDate\": \"2023-07-26T09:55:09.939Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/UpdateCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"UpdateCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardID- Get Organization CMS Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 0,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- Get Organization CMS Findings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 0,\r\n  \"levelTypeID\": 1,\r\n  \"userID\": 0,\r\n  \"documentationTypeID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentation",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"GetCMSDocumentation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardID -Get CMSOtherFindings CMS Documentation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSOtherFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"GetCMSOtherFindings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GETCMSASSIGNEDUSERS",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCmsAssignedUsers -Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{Normal_SiteID}}&programId=2&roleId={{PA}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "roleId",
													"value": "{{PA}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - Hospital Normal Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 639833\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedUsers - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{MockSurvey_SiteID}}&programId=2&roleId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "roleId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - Hospital - Mocksurvey Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 639833\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCmsAssignedUsers - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{Normal_SiteID}}&programId=23&roleId={{PA}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "roleId",
													"value": "{{PA}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 639833\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedUsers  - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{MockSurvey_SiteID}}&programId=23&roleId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "roleId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - Ambulatory Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\":{{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 639833\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCmsAssignedUsers -CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status Message is OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{Normal_SiteID}}&programId=69&roleId={{PA}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "roleId",
													"value": "{{PA}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 639833\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedUsers -CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId={{MockSurvey_SiteID}}&programId=69&roleId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Filter",
												"GetCmsAssignedUsers"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "roleId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCmsAssignedToUserTree - CAH MockSurvey_SiteID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n \r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"roleID\": 1,\r\n  \"assignedToUserId\": 374035\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Regulation/GetCmsAssignedToUserTree",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Regulation",
												"GetCmsAssignedToUserTree"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const jsonData= pm.response.json();",
									"pm.test(\"success should be TRUE\", function() {",
									" console.log(jsonData.success)",
									" pm.expect(jsonData.success).to.eql(true)",
									"});",
									"",
									"pm.test(\"payload should be true\", function() {",
									" ",
									" pm.expect(jsonData.payload).to.eql(true)",
									"});",
									"",
									"pm.test(\"errors should be null\", function() {",
									" console.log(jsonData.errors)",
									" pm.expect(jsonData.errors).to.eql(null)",
									"});",
									"",
									"pm.test(\"Verify Json Count should be 3\", function () {",
									" console.log(jsonData)",
									"var JsonCount  = Object.keys(jsonData).length;",
									"console.log(JsonCount)",
									"pm.expect(JsonCount).to.eql(3);",
									"                                      ",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "GetCmsAssignedUsers -Invalid SiteID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Filter/GetCmsAssignedUsers?siteId=0&programId=69&roleId={{STM}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Filter",
										"GetCmsAssignedUsers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "roleId",
											"value": "{{STM}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCoPsForTask",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCoPsForTask-Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the success field is true\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check all title properties\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    responseData.payload.forEach(function (item) {\r",
													"        pm.expect(item.title).to.be.a('string');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check the count of payload items is 27\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.payload).to.have.lengthOf(27);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetCoPsForTask?siteId={{MockSurvey_SiteID}}&programId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetCoPsForTask"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTagsByCopNameForTask - Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a success property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a payload array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test(\"First tagCode is 'A-0008'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[0].tagCode).to.eql('A-0008');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTagsByCopNameForTask?copName=%C2%A7482.1&programId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTagsByCopNameForTask"
											],
											"query": [
												{
													"key": "copName",
													"value": "%C2%A7482.1"
												},
												{
													"key": "programId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetElementsByTagForTask- Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has 'success' property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response payload is an array with at least one element\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Each element in the payload has 'tagCode' property with value 'A-0008'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.payload.forEach(function (element) {\r",
													"        pm.expect(element.tagCode).to.equal('A-0008');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetElementsByTagForTask?tagCode=A-0008&programId=2",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetElementsByTagForTask"
											],
											"query": [
												{
													"key": "tagCode",
													"value": "A-0008"
												},
												{
													"key": "programId",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCoPsForTask-Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the success field is true\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check all title properties\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    responseData.payload.forEach(function (item) {\r",
													"        pm.expect(item.title).to.be.a('string');\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Check the count of payload items is 17\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.payload).to.have.lengthOf(17);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetCoPsForTask?siteId={{Normal_SiteID}}&programId=23",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetCoPsForTask"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTagsByCopNameForTask - Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a success property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a payload array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test(\"First tagCode is 'Q-0219'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[0].tagCode).to.eql('Q-0219');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTagsByCopNameForTask?copName=%C2%A7416.50&programId=23",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTagsByCopNameForTask"
											],
											"query": [
												{
													"key": "copName",
													"value": "%C2%A7416.50"
												},
												{
													"key": "programId",
													"value": "23"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetElementsByTagForTask- Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has 'success' property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response payload is an array with at least one element\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Each element in the payload has 'tagCode' property with value 'Q-0219'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.payload.forEach(function (element) {\r",
													"        pm.expect(element.tagCode).to.equal('Q-0219');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetElementsByTagForTask?tagCode=Q-0219&programId=23",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetElementsByTagForTask"
											],
											"query": [
												{
													"key": "tagCode",
													"value": "Q-0219"
												},
												{
													"key": "programId",
													"value": "23"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCoPsForTask-CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the success field is true\", function () {\r",
													"    pm.expect(pm.response.json().success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check all title properties\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    responseData.payload.forEach(function (item) {\r",
													"        pm.expect(item.title).to.be.a('string');\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Check the count of payload items is 53\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.payload).to.have.lengthOf(53);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetCoPsForTask?siteId={{Normal_SiteID}}&programId=69",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetCoPsForTask"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetTagsByCopNameForTask - CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a success property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a payload array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test(\"First tagCode is 'A-0020'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[0].tagCode).to.eql('A-0020');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetTagsByCopNameForTask?copName=%C2%A7482.11&programId=69",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetTagsByCopNameForTask"
											],
											"query": [
												{
													"key": "copName",
													"value": "%C2%A7482.11"
												},
												{
													"key": "programId",
													"value": "69"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetElementsByTagForTask- CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has 'success' property with value true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"Response payload is an array with at least one element\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Each element in the payload has 'tagCode' property with value 'A-0008'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.payload.forEach(function (element) {\r",
													"        pm.expect(element.tagCode).to.equal('A-0020');\r",
													"\r",
													"        pm.expect(element.jcrElementText).to.equal('§482.11 - Condition of Participation: Compliance with Federal, State and Local Laws');\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/task/api/Task/GetElementsByTagForTask?tagCode=A-0020&programId=69",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"task",
												"api",
												"Task",
												"GetElementsByTagForTask"
											],
											"query": [
												{
													"key": "tagCode",
													"value": "A-0020"
												},
												{
													"key": "programId",
													"value": "69"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID -GetCoPsForTask-CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetCoPsForTask?siteId={{Normal_SiteID}}&programId=0",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetCoPsForTask"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{Normal_SiteID}}"
										},
										{
											"key": "programId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid CopName-GetTagsByCopNameForTask - Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetTagsByCopNameForTask?copName=0&programId=23",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetTagsByCopNameForTask"
									],
									"query": [
										{
											"key": "copName",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "23"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid tagCode - GetElementsByTagForTask- Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/task/api/Task/GetElementsByTagForTask?tagCode=A-1&programId=2",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"task",
										"api",
										"Task",
										"GetElementsByTagForTask"
									],
									"query": [
										{
											"key": "tagCode",
											"value": "A-1"
										},
										{
											"key": "programId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCMSDocumentationHistory",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSDocumentationHistory-Hospital Internal Notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 2649,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -Organization CMS findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 4028,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -POA History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 4028,\r\n  \"documentationTypeID\": 2,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital - Internal Notes History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 2,\r\n  \"cmsStandardID\": 4028,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSDocumentationHistory-Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 585,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -Organization CMS findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3701,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -POA History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3701,\r\n  \"documentationTypeID\": 2,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital - Internal Notes History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"cmsStandardID\": 3701,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSDocumentationHistory-Hospital Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 585,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -Organization CMS findings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 962,\r\n  \"documentationTypeID\": 1,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital Mock Site -POA History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 962,\r\n  \"documentationTypeID\": 2,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSDocumentationHistory-Hospital - Internal Notes History",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 962,\r\n  \"documentationTypeID\": 4,\r\n  \"regualtionTypeID\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Documentation",
												"GetCMSDocumentationHistory"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the success field is true\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "GetCMSDocumentationHistory-Hospital - Invalid documentationTypeID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 962,\r\n  \"documentationTypeID\": 0,\r\n  \"regualtionTypeID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"GetCMSDocumentationHistory"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetCMSDocumentationHistory-Hospital - Invalid cmsStandardID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Payload is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.payload).to.be.an('array').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 69,\r\n  \"cmsStandardID\": 0,\r\n  \"documentationTypeID\": 2,\r\n  \"regualtionTypeID\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Documentation/GetCMSDocumentationHistory",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Documentation",
										"GetCMSDocumentationHistory"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCMSTracerReport",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetCMSTracerReport-Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 2649,\r\n  \"copID\": 1197,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSTracerReport - Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 2650,\r\n  \"copID\": 1197,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSTracerReport - Normal site Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetCMSTracerReport - Mock site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 3730,\r\n  \"copID\": 135,\r\n  \"cycleID\": 0,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\": null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": false,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSTracerReport - Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 3733,\r\n  \"copID\": 1144,\r\n  \"cycleID\": 0,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\":null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSTracerReport - Normal site Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"programID\": 23,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 3723,\r\n  \"copID\": 133,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetCMSTracerReport - Mock site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 790,\r\n  \"copID\": 55,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\": null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetCMSTracerReport - Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 796,\r\n  \"copID\": 55,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\": null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"cms",
												"api",
												"Report",
												"GetCMSTracerReport"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the success field is true\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"pdfByte is a string\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.payload.pdfByte).to.be.a('string');",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid CopID - GetCMSTracerReport",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 796,\r\n  \"copID\": 0,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\": null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Report",
										"GetCMSTracerReport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid cmsStandardID - GetCMSTracerReport",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 69,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 0,\r\n  \"copID\": 55,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": null,\r\n  \"obsEndDate\": null,\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/Report/GetCMSTracerReport",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"Report",
										"GetCMSTracerReport"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetEPsByCmsStandardID",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "Hospital",
							"item": [
								{
									"name": "GetEPsByCmsStandardID-Hospital",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=2&cmsStandardId=233&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "233"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID- Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 2650,\r\n  \"copID\": 1197,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{Normal_SiteID}}&programId=2&cmsStandardId=2652&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "2652"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID - Mock Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=2&cmsStandardId=6&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "2"
												},
												{
													"key": "cmsStandardId",
													"value": "6"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ambulatory",
							"item": [
								{
									"name": "GetEPsByCmsStandardID-Ambulatory",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{Normal_SiteID}}&programId=23&cmsStandardId=3730&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3730"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID- Ambulatory Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"All standardLabel is LD.04.01.01\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.payload.forEach(function (item) {\r",
													"        pm.expect(item.standardLabel).to.eql(\"LD.04.01.01\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 2650,\r\n  \"copID\": 1197,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{Normal_SiteID}}&programId=23&cmsStandardId=3723&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3723"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID - Ambulatory Mock Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"The response has a 'success' property that is true\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.success).to.be.true;\r",
													"});\r",
													"\r",
													"pm.test(\"The response payload is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload).to.be.an('array');\r",
													"});\r",
													"\r",
													"pm.test(\"The first object in the payload has a 'standardLabel' property equal to 'RI.01.01.01'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[0].standardLabel).to.equal('RI.01.01.01');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=23&cmsStandardId=3700&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "23"
												},
												{
													"key": "cmsStandardId",
													"value": "3700"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CAH",
							"item": [
								{
									"name": "GetEPsByCmsStandardID-CAH",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"pm.test(\"The third standardLabel value is 'MS.13.01.01'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[2].standardLabel).to.eql('MS.13.01.01');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=69&cmsStandardId=1654&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "1654"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID- CAH Normal site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"The second standardLabel value is 'RC.02.01.03'\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.payload[1].standardLabel).to.eql('RC.02.01.03');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 2650,\r\n  \"copID\": 1197,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{Normal_SiteID}}&programId=69&cmsStandardId=1187&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{Normal_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "1187"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GetEPsByCmsStandardID - CAH Mock Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=69&cmsStandardId=962&roleId=1",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"standards",
												"api",
												"Crosswalk",
												"GetEPsByCmsStandardID"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{MockSurvey_SiteID}}"
												},
												{
													"key": "programId",
													"value": "69"
												},
												{
													"key": "cmsStandardId",
													"value": "962"
												},
												{
													"key": "roleId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid cmsStandardId -GetEPsByCmsStandardID - CAH Mock Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=69&cmsStandardId=0&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetEPsByCmsStandardID"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "cmsStandardId",
											"value": "0"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programId-GetEPsByCmsStandardID - CAH Mock Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId={{MockSurvey_SiteID}}&programId=0&cmsStandardId=962&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetEPsByCmsStandardID"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{MockSurvey_SiteID}}"
										},
										{
											"key": "programId",
											"value": "0"
										},
										{
											"key": "cmsStandardId",
											"value": "962"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid siteId-GetEPsByCmsStandardID - CAH Mock Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"certificationItemID\": 0,\r\n  \"roleID\": 1,\r\n  \"showEP\": true,\r\n  \"chapterID\": 0,\r\n  \"cmsStandardID\": 6,\r\n  \"copID\": 91,\r\n  \"cycleID\": 41,\r\n  \"obsStartDate\": \"2022-01-01T06:17:25.956Z\",\r\n  \"obsEndDate\": \"2023-07-28T06:17:25.956Z\",\r\n  \"compliancePercent\": 100,\r\n  \"not100PercentCompliance\": false,\r\n  \"sendEmail\": true,\r\n  \"emailTo\": \"kkanagaraj@jcrinc.com\",\r\n  \"siteName\": \"Mock CO\",\r\n  \"programName\": \"Hospital\",\r\n  \"userID\": 0,\r\n  \"isCMS\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Crosswalk/GetEPsByCmsStandardID?siteId=0&programId=69&cmsStandardId=962&roleId=1",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Crosswalk",
										"GetEPsByCmsStandardID"
									],
									"query": [
										{
											"key": "siteId",
											"value": "0"
										},
										{
											"key": "programId",
											"value": "69"
										},
										{
											"key": "cmsStandardId",
											"value": "962"
										},
										{
											"key": "roleId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCMSMSFindings",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "MSR",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "GetCMSMSFindings-Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "GetCMSMSFindings-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check the count of payload items is 17\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(17);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('Q-0219');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('Q-0219');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CAH",
									"item": [
										{
											"name": "GetCMSMSFindings-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    pm.expect(pm.response.json().success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.test(\"Check the count of payload items is 53\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(53);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'A-0020'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('A-0020');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'A-0008'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('A-0020');\r",
															"\r",
															"        pm.expect(element.jcrElementText).to.equal('§482.11 - Condition of Participation: Compliance with Federal, State and Local Laws');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "MSU",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "GetCMSMSFindings-Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "GetCoPsForTask-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check the count of payload items is 17\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(17);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetTagsByCopNameForTask - Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('Q-0219');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetElementsByTagForTask- Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('Q-0219');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CAH",
									"item": [
										{
											"name": "GetCoPsForTask-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    pm.expect(pm.response.json().success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.test(\"Check the count of payload items is 53\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(53);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetTagsByCopNameForTask - CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'A-0020'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('A-0020');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetElementsByTagForTask- CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'A-0008'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('A-0020');\r",
															"\r",
															"        pm.expect(element.jcrElementText).to.equal('§482.11 - Condition of Participation: Compliance with Federal, State and Local Laws');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID -GetCoPsForTask-CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid CopName-GetTagsByCopNameForTask - Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid tagCode - GetElementsByTagForTask- Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- Finding - Get Finding and Score",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "MSR",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "GetFindings-Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"mockSurveyID\": 3228,\r\n \"epTextID\": 56464,\r\n \"siteID\": {{MockSurvey_SiteID}},\r\n \"cycleID\": 1,\r\n \"programID\": 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetFindings",
													"host": [
														"{{MockSurveyURL}}"
													],
													"path": [
														"api",
														"v1",
														"MockSurvey",
														"MockSurvey",
														"GetFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetMockSurveysCorpFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"mockSurveyID\": 3228,\r\n  \"epTextID\": 56464,\r\n  \"documentationTypeID\": 2\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetMockSurveysCorpFindings",
													"host": [
														"{{MockSurveyURL}}"
													],
													"path": [
														"api",
														"v1",
														"MockSurvey",
														"MockSurvey",
														"GetMockSurveysCorpFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "GetFindings-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n \"mockSurveyID\": 3228,\r\n \"epTextID\": 56464,\r\n \"siteID\": {{MockSurvey_SiteID}},\r\n \"cycleID\": 1,\r\n \"programID\": 2\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetFindings",
													"host": [
														"{{MockSurveyURL}}"
													],
													"path": [
														"api",
														"v1",
														"MockSurvey",
														"MockSurvey",
														"GetFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFindings-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 23,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CAH",
									"item": [
										{
											"name": "GetFindings-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetFindings",
													"host": [
														"{{MockSurveyURL}}"
													],
													"path": [
														"api",
														"v1",
														"MockSurvey",
														"MockSurvey",
														"GetFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFindings-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 69,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 233,\r\n  \"cmsStandardID\": 270,\r\n  \"roleID\": 9\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "MSU",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "GetCMSMSFindings-Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetCMSMSFindings- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"siteID\": 15320,\r\n  \"programID\": 2,\r\n  \"cetificationItemID\": 0,\r\n  \"currentTab\":2,\r\n  \"regulationID\": 5,\r\n  \"cmsStandardID\": 12,\r\n  \"roleID\": 8\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "GetCoPsForTask-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"\r",
															"\r",
															"pm.test(\"Check the count of payload items is 17\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(17);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetTagsByCopNameForTask - Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('Q-0219');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetElementsByTagForTask- Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'Q-0219'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('Q-0219');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CAH",
									"item": [
										{
											"name": "GetCoPsForTask-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the success field is true\", function () {\r",
															"    pm.expect(pm.response.json().success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Validate the payload field is an array and is not empty\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData).to.be.an('object');\r",
															"    pm.expect(responseData.payload).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
															"});\r",
															"\r",
															"pm.test(\"Check all title properties\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    responseData.payload.forEach(function (item) {\r",
															"        pm.expect(item.title).to.be.a('string');\r",
															"    });\r",
															"});\r",
															"\r",
															"pm.test(\"Check the count of payload items is 53\", function () {\r",
															"    const responseData = pm.response.json();\r",
															"    pm.expect(responseData.payload).to.have.lengthOf(53);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetTagsByCopNameForTask - CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a success property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response contains a payload array\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array');\r",
															"});\r",
															"\r",
															"pm.test(\"First tagCode is 'A-0020'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload[0].tagCode).to.eql('A-0020');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetElementsByTagForTask- CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response status is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has 'success' property with value true\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.success).to.be.true;\r",
															"});\r",
															"\r",
															"pm.test(\"Response payload is an array with at least one element\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload).to.be.an('array').that.is.not.empty;\r",
															"});\r",
															"\r",
															"pm.test(\"Each element in the payload has 'tagCode' property with value 'A-0008'\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    jsonData.payload.forEach(function (element) {\r",
															"        pm.expect(element.tagCode).to.equal('A-0020');\r",
															"\r",
															"        pm.expect(element.jcrElementText).to.equal('§482.11 - Condition of Participation: Compliance with Federal, State and Local Laws');\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"cms",
														"api",
														"MockSurvey",
														"GetCMSMSFindings"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid ProgramID -GetCoPsForTask-CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid CopName-GetTagsByCopNameForTask - Ambulatory",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid tagCode - GetElementsByTagForTask- Hospital",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/cms/api/MockSurvey/GetCMSMSFindings",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"cms",
										"api",
										"MockSurvey",
										"GetCMSMSFindings"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "revAMP- GetCMS Crosswalk API",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "All roles",
							"item": [
								{
									"name": "Hospital",
									"item": [
										{
											"name": "GetEPsByStandard-Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15194,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"chapterID\": 57,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337851,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13450,\r\n  \"standardTextID\": 14980,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- Hospital",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 2,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15194,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Ambulatory",
									"item": [
										{
											"name": "GetEPsByStandard-Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 23,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15192,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- Amulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"chapterID\": 56,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 337851,\r\n  \"programID\": 23,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13333,\r\n  \"standardTextID\": 14629,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- Ambulatory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 23,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15192,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "CAH",
									"item": [
										{
											"name": "GetEPsByStandard-CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"hcoid\": 337843,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"epText should not be null\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.payload.ePs).to.be.an('array');\r",
															"    jsonData.payload.ePs.forEach(function (ep) {\r",
															"        pm.expect(ep.epText).to.not.be.null;\r",
															"    });\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "\r\n{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 2915,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 1,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetEPsByStandard- CAH",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
													"host": [
														"{{BaseURL}}"
													],
													"path": [
														"standards",
														"api",
														"Standard",
														"GetEPsByStandard"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status Message is OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid standardID - GetEPsByStandard- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 0,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid standardTextID - GetEPsByStandard- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 0,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid ProgramID- GetEPsByStandard- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": {{Normal_SiteID}},\r\n  \"hcoid\": 3456,\r\n  \"programID\": 0,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID- GetEPsByStandard- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": 0,\r\n  \"hcoid\": 3456,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Method- GetEPsByStandard- CAH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"chapterID\": 7,\r\n  \"siteID\": 0,\r\n  \"hcoid\": 3456,\r\n  \"programID\": 69,\r\n  \"productType\": 1,\r\n  \"certificationItemID\": 0,\r\n  \"serviceProfileTypeID\": 1,\r\n  \"roleID\": 9,\r\n  \"viewByID\": 1,\r\n  \"standardEffBeginDate\": \"08/27/2023\",\r\n  \"currentStandardEffBeginDate\": \"08/27/2023\",\r\n  \"stickyStartDate\": null,\r\n  \"stickyEndDate\": null,\r\n  \"standardID\": 13573,\r\n  \"standardTextID\": 15193,\r\n  \"isSiteEST\": true,\r\n  \"isCMSLicense\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/standards/api/Standard/GetEPsByStandard",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"standards",
										"api",
										"Standard",
										"GetEPsByStandard"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "MocksurveySetup  -  List and Details",
			"item": [
				{
					"name": "Business Scenarios",
					"item": [
						{
							"name": "GetSetupSurveysBySiteAndProgram",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"userID\": {{KamalID}},\r\n  \"certificationItemID\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetSetupSurveysBySiteAndProgram",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetSetupSurveysBySiteAndProgram"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllMockSurveyStatusNames",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetAllMockSurveyStatusNames",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetAllMockSurveyStatusNames"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllLatestMockSurveys",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 2,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0,\r\n  \"isSiteCorp\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetAllLatestMockSurveys",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetAllLatestMockSurveys"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Status Scenarios",
					"item": [
						{
							"name": "Invalid SiteID - GetSetupSurveysBySiteAndProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"userID\": {{KamalID}},\r\n  \"certificationItemID\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetSetupSurveysBySiteAndProgram",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetSetupSurveysBySiteAndProgram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID- GetSetupSurveysBySiteAndProgram",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 0,\r\n  \"userID\": {{KamalID}},\r\n  \"certificationItemID\": 0\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetSetupSurveysBySiteAndProgram",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetSetupSurveysBySiteAndProgram"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAllMockSurveyStatusNames",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetAllMockSurveyStatusNames",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetAllMockSurveyStatusNames"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid SiteID - GetAllLatestMockSurveys",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": 0,\r\n  \"programID\": 2,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0,\r\n  \"isSiteCorp\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetAllLatestMockSurveys",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetAllLatestMockSurveys"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid programID -GetAllLatestMockSurveys",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"siteID\": {{MockSurvey_SiteID}},\r\n  \"programID\": 0,\r\n  \"roleID\": 9,\r\n  \"certificationItemID\": 0,\r\n  \"isSiteCorp\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MockSurveyURL}}/api/v1/MockSurvey/MockSurvey/GetAllLatestMockSurveys",
									"host": [
										"{{MockSurveyURL}}"
									],
									"path": [
										"api",
										"v1",
										"MockSurvey",
										"MockSurvey",
										"GetAllLatestMockSurveys"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// Refresh the OAuth token if necessary",
					"/*var tokenDate = new Date(2010,1,1);",
					"var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");",
					"if(tokenTimestamp){",
					"  tokenDate = Date.parse(tokenTimestamp);",
					"}",
					"var expiresInTime = pm.environment.get(\"ExpiresInTime\");",
					"if(!expiresInTime){",
					"    expiresInTime = 300000; // Set default expiration time to 5 minutes",
					"}",
					"if((new Date() - tokenDate) >= expiresInTime) ",
					"{",
					"   pm.sendRequest({",
					"      url:  pm.variables.get(\"Auth_Url\"), ",
					"      method: 'POST',",
					"      header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"        'Authorization': pm.variables.get(\"Basic_Auth\")",
					"      },",
					"      body:{",
					"        mode:\"urlencoded\",",
					"        urlencoded:[",
					"            {",
					"                key:\"grant_type\",",
					"                value:\"client_credentials\"",
					"            },",
					"            {",
					"                key:\"scope\",",
					"                value:\"8f506e06-f468-42aa-89cc-ab54570fcc69/.default\"",
					"      }",
					"   ]",
					"}",
					"  }, function (err, res) {",
					"        pm.environment.set(\"OAuth_Token\", res.json().access_token);",
					"        console.log(pm.environment.replaceIn('{{OAuth_Token}}'));",
					"        pm.environment.set(\"OAuth_Timestamp\", new Date());",
					"        ",
					"        // Set the ExpiresInTime variable to the time given in the response if it exists",
					"        if(res.json().expires_in){",
					"            expiresInTime = res.json().expires_in * 1000;",
					"        }",
					"        pm.environment.set(\"ExpiresInTime\", expiresInTime);",
					"  });",
					"}",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"",
					"// JavaScript module from Allen Helton",
					"// https://allenheltondev.medium.com/how-to-automate-oauth2-token-renewal-in-postman-864420d381a0",
					"",
					"// Refresh the OAuth token if necessary",
					"/*var tokenDate = new Date(2010,1,1);",
					"var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");",
					"if(tokenTimestamp){",
					"  tokenDate = Date.parse(tokenTimestamp);",
					"}",
					"var expiresInTime = pm.environment.get(\"ExpiresInTime\");",
					"if(!expiresInTime){",
					"    expiresInTime = 300000; // Set default expiration time to 5 minutes",
					"}",
					"if((new Date() - tokenDate) >= expiresInTime) ",
					"{",
					"   pm.sendRequest({",
					"      url:  pm.variables.get(\"Auth_Url\"), ",
					"      method: 'POST',",
					"      header: {",
					"        'Accept': 'application/json',",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"        'Authorization': pm.variables.get(\"Basic_Auth\")",
					"      },",
					"      body:{",
					"        mode:\"urlencoded\",",
					"        urlencoded:[",
					"            {",
					"                key:\"grant_type\",",
					"                value:\"client_credentials\"",
					"            },",
					"            {",
					"                key:\"scope\",",
					"                value:\"8f506e06-f468-42aa-89cc-ab54570fcc69/.default\"",
					"      }",
					"   ]",
					"}",
					"  }, function (err, res) {",
					"        pm.environment.set(\"OAuth_Token\", res.json().access_token);",
					"        console.log(pm.environment.replaceIn('{{OAuth_Token}}'));",
					"        pm.environment.set(\"OAuth_Timestamp\", new Date());",
					"        ",
					"        // Set the ExpiresInTime variable to the time given in the response if it exists",
					"        if(res.json().expires_in){",
					"            expiresInTime = res.json().expires_in * 1000;",
					"        }",
					"        pm.environment.set(\"ExpiresInTime\", expiresInTime);",
					"  });",
					"}",
					"*/"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TaskCount",
			"value": ""
		},
		{
			"key": "ScoreID",
			"value": ""
		},
		{
			"key": "EpLinkIDCount",
			"value": ""
		},
		{
			"key": "RandomLink",
			"value": ""
		},
		{
			"key": "RandomDescription",
			"value": ""
		},
		{
			"key": "EpLinkIDs",
			"value": ""
		},
		{
			"key": "createdTaskIds",
			"value": ""
		},
		{
			"key": "taskID",
			"value": ""
		},
		{
			"key": "taskName",
			"value": ""
		},
		{
			"key": "Description",
			"value": ""
		},
		{
			"key": "EpLinkID",
			"value": ""
		},
		{
			"key": "startDateToProcess",
			"value": ""
		},
		{
			"key": "endToProcess",
			"value": ""
		},
		{
			"key": "documentationTypeID4",
			"value": ""
		},
		{
			"key": "documentationTypeID1",
			"value": ""
		},
		{
			"key": "documentationTypeID2",
			"value": ""
		},
		{
			"key": "documentationTypeID3",
			"value": ""
		},
		{
			"key": "cmsStandardID",
			"value": ""
		},
		{
			"key": "levelTypeID",
			"value": ""
		},
		{
			"key": "randomdocumentationText",
			"value": ""
		}
	]
}